"You are an expert full-stack architect, AI engineer, and career-tech product strategist. I want you to design and help me implement a complete real-world web application called Career Mirror, a Personalized Career and Skills Advisor. Cover everything from architecture to tech stack, AI integration, data pipelines, and frontend UX. Ensure it‚Äôs practical and production-ready, not theoretical. Here are the detailed requirements:"
________________________________________
1. Core Features
‚Ä¢	Career Doppelg√§nger Matching: Find users with similar profiles and show their career trajectories.
‚Ä¢	Skill Gap Analysis: Identify missing skills for target roles, recommend learning resources (Coursera, Udemy, LinkedIn Learning APIs).
‚Ä¢	Lifestyle Simulation: Estimate salary, work-life balance, travel, stress, and progression trade-offs.
‚Ä¢	AI Career Guidance: Use GPT to give narrative advice (‚Äúfuture self‚Äù storytelling, next best steps).
‚Ä¢	Interactive Career Map Dashboard: Visualize career paths, growth timelines, and skill-building plans.
‚Ä¢	Continuous Feedback Loop: Users update progress (new skills/jobs) ‚Üí system improves over time.
________________________________________
2. Architecture
‚Ä¢	Frontend: Next.js + TailwindCSS + Framer Motion (animations) + Recharts (visuals).
‚Ä¢	Backend: FastAPI (Python) or Node.js (Express).
‚Ä¢	Database Layer:
o	PostgreSQL ‚Üí user profiles, skills, job mappings.
o	Vector DB (Pinecone/Weaviate) ‚Üí embeddings for similarity search.
‚Ä¢	AI Layer:
o	OpenAI GPT ‚Üí personalized advice generation.
o	HuggingFace / OpenAI embeddings ‚Üí profile similarity.
‚Ä¢	Storage: Cloud (AWS S3, GCP, or Supabase for user uploads).
‚Ä¢	Authentication: Auth0 or Supabase Auth.
‚Ä¢	Analytics: PostHog or Mixpanel for user insights.
________________________________________
3. Data Pipeline
‚Ä¢	Data Sources: O*NET, ESCO, LinkedIn, Kaggle career datasets, Stack Overflow Dev Survey, GitHub profiles, Coursera APIs.
‚Ä¢	Preprocessing:
o	Skill extraction (spaCy/NLTK/OpenAI).
o	Job title normalization (map to O*NET/ESCO).
o	Embedding creation (HuggingFace, OpenAI).
o	Optional synthetic data generation for rare roles.
‚Ä¢	Storage:
o	Structured data ‚Üí PostgreSQL.
o	Embeddings ‚Üí Vector DB.
________________________________________
4. Matching & Recommendations
1.	User submits CV/LinkedIn/skills.
2.	System parses & normalizes profile.
3.	Embeddings created ‚Üí query vector DB for ‚Äúcareer doppelg√§ngers.‚Äù
4.	Extract top 10 similar profiles ‚Üí map their career trajectories.
5.	Compare skills ‚Üí highlight gaps.
6.	Recommend courses/resources ‚Üí API integrations.
7.	Lifestyle simulation ‚Üí salary (Glassdoor APIs), hours (survey data), stress (approximate indexes).
8.	AI narrative ‚Üí GPT generates guidance & ‚Äúfuture self‚Äù view.
________________________________________
5. Frontend UX
‚Ä¢	Career Dashboard (central hub).
‚Ä¢	Tabs:
o	Doppelg√§ngers (similar people‚Äôs paths).
o	Career Map (interactive timeline view).
o	Skill Gaps (missing skills + recommended courses).
o	Lifestyle Simulation (sliders to tweak trade-offs).
‚Ä¢	Gamification: Badges for progress, career milestones.
‚Ä¢	Notifications: Email/SMS reminders for skill goals.
________________________________________
6. Unique Differentiators
‚Ä¢	Career Doppelg√§ngers: ‚ÄúPeople like you became X, Y, Z.‚Äù
‚Ä¢	Lifestyle Simulator: Beyond skills ‚Äî see impact on salary, hours, stress.
‚Ä¢	Future Self AI Narrative: GPT writes a ‚Äúletter from your future self.‚Äù
‚Ä¢	Dynamic Skill-Job Graph: Visual, interactive, evolving with user progress.
________________________________________
7. Implementation Roadmap (MVP ‚Üí Scale)
1.	MVP (3 months)
o	User input (CV/skills).
o	Profile parsing + embeddings.
o	Basic similarity search (vector DB).
o	Simple dashboard: Doppelg√§ngers + skill gaps.
2.	Phase 2 (6 months)
o	Add lifestyle simulation (salary + stress).
o	Course API integrations.
o	AI narrative generation.
3.	Phase 3 (12 months)
o	Full interactive career maps.
o	Community features (peer mentorship).
o	Analytics + personalization at scale.
________________________________________
8. Guardrails
‚Ä¢	Be transparent: predictions = guidance, not guarantees.
‚Ä¢	Show data sources clearly.
‚Ä¢	Label lifestyle simulation as approximate.
‚Ä¢	Give users control over data privacy.
________________________________________
9. Deliverables
‚Ä¢	Full-stack web app (Next.js + FastAPI).
‚Ä¢	PostgreSQL + Vector DB schema.
‚Ä¢	Data pipeline scripts (ETL for O*NET, Kaggle, LinkedIn, etc.).
‚Ä¢	AI integration endpoints (profile parsing, similarity, narrative generation).
‚Ä¢	Frontend components (career dashboard, maps, skill gap cards, lifestyle simulation graphs).
________________________________________
üëâ Instruction to AI (you, ChatGPT):
Now, generate step-by-step implementation plans, code templates, database schemas, and integration strategies for this application so it can be developed as a real-world product. Ensure clarity, modularity, and scalability.
