{"file_contents":{"README.md":{"content":"# career_mirror\n# _Career_Mirror_\n# _Career_Mirror_\n","size_bytes":52},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Career Mirror - AI-Powered Career Guidance Platform\n\n## Overview\n\nCareer Mirror is a comprehensive career guidance platform that leverages AI to provide personalized career advice, skill gap analysis, and professional development recommendations. The application uses machine learning to match users with \"career doppelgangers\" - professionals with similar backgrounds who have achieved career success - and provides actionable insights for career progression.\n\nThe platform combines career profile analysis, skill assessment, educational resource recommendations, and AI-powered guidance to help users make informed career decisions and plan their professional development journey.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Library**: shadcn/ui components built on Radix UI primitives\n- **Styling**: TailwindCSS with custom design tokens and CSS variables\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation\n\n### Backend Architecture\n- **Runtime**: Node.js with Express server\n- **Language**: TypeScript with ES modules\n- **Authentication**: Replit Auth integration with OpenID Connect\n- **Session Management**: Express sessions with PostgreSQL store\n- **API Design**: RESTful endpoints with structured error handling\n- **File Uploads**: Multer middleware for resume/CV processing\n\n### Database Design\n- **Primary Database**: PostgreSQL with Drizzle ORM\n- **Database Provider**: Neon serverless PostgreSQL\n- **Schema Management**: Drizzle Kit for migrations and schema updates\n- **Key Tables**:\n  - Users and profiles with career information\n  - Skills tracking with proficiency levels\n  - Career paths and progression timelines\n  - Educational classes and enrollments\n  - AI guidance history and chat messages\n  - Vector embeddings for similarity matching\n\n### AI and Machine Learning\n- **AI Provider**: OpenAI GPT models for career guidance and content generation\n- **Model Selection**: Uses GPT-5 as the latest available model\n- **Vector Search**: Profile similarity matching using embeddings\n- **Use Cases**:\n  - Resume parsing and profile extraction\n  - Career path recommendations\n  - Skill gap analysis\n  - Personalized career guidance\n  - Chat-based career counseling\n\n### Authentication and Security\n- **Auth Provider**: Replit Auth with OIDC integration\n- **Session Storage**: PostgreSQL-backed sessions with automatic cleanup\n- **Security Features**: HTTPS enforcement, secure cookies, CSRF protection\n- **Authorization**: Route-level authentication middleware\n\n### File Processing\n- **File Types**: PDF, DOC, DOCX, and TXT resume uploads\n- **Storage**: In-memory processing with size limits (5MB)\n- **Processing**: AI-powered text extraction and profile parsing\n\n## External Dependencies\n\n### Core Infrastructure\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Replit Auth**: Authentication service with OpenID Connect support\n- **Replit Platform**: Development and hosting environment\n\n### AI and Machine Learning\n- **OpenAI API**: GPT models for text generation and embeddings\n- **Vector Database**: Profile similarity search and matching capabilities\n\n### Frontend Libraries\n- **Radix UI**: Headless component primitives for accessibility\n- **TailwindCSS**: Utility-first CSS framework\n- **Lucide Icons**: Icon library for UI elements\n- **TanStack Query**: Server state management and caching\n\n### Development Tools\n- **TypeScript**: Type safety across frontend and backend\n- **Vite**: Fast build tool with HMR support\n- **Drizzle ORM**: Type-safe database operations\n- **ESBuild**: Production bundling for server code\n\n### Planned Integrations\n- **Career Data Sources**: O*NET, ESCO, LinkedIn APIs for job market data\n- **Learning Platforms**: Coursera, Udemy, LinkedIn Learning APIs\n- **Salary Data**: Glassdoor API for compensation insights\n- **Analytics**: PostHog or Mixpanel for user behavior tracking\n\nThe application follows a modular architecture with clear separation between client and server code, shared type definitions, and a comprehensive database schema designed to support complex career tracking and analysis features.","size_bytes":4394},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n\nexport function initDb() {\n  // Database is initialized when the module is imported\n  // The connection pool is created and ready to use\n  console.log(\"Database connection initialized\");\n}","size_bytes":672},"server/index.ts":{"content":"import express, { type Request, Response } from \"express\";\nimport session from \"express-session\";\nimport { log, setupVite, serveStatic } from \"./vite\";\nimport { registerRoutes } from \"./routes\";\nimport { initDb } from \"./db\";\n\nconst app = express();\nconst port = parseInt(process.env.PORT || '5000');\n\n// Initialize database connection\ninitDb();\n\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: true, limit: '10mb' }));\n\n// Session configuration\napp.use(session({\n  secret: process.env.SESSION_SECRET || 'career-mirror-dev-secret',\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: process.env.NODE_ENV === 'production',\n    maxAge: 1000 * 60 * 60 * 24 // 24 hours\n  }\n}));\n\n// Health check endpoint\napp.get('/health', (req: Request, res: Response) => {\n  res.status(200).json({ \n    status: 'OK', \n    timestamp: new Date().toISOString(),\n    environment: process.env.NODE_ENV || 'development'\n  });\n});\n\nasync function startServer() {\n  try {\n    // Register API routes\n    const server = await registerRoutes(app);\n    \n    // Setup Vite dev server or static files based on environment\n    if (process.env.NODE_ENV === \"production\") {\n      serveStatic(app);\n    } else {\n      await setupVite(app, server);\n    }\n    \n    // Start the server\n    server.listen(port, \"0.0.0.0\", () => {\n      const colorText = (text: string) => `\\x1b[36m${text}\\x1b[0m`;\n      \n      log(`Server running on ${colorText(`http://localhost:${port}`)}`);\n      \n      if (process.env.NODE_ENV !== \"production\") {\n        log(`Development mode: ${colorText(\"Vite dev server active\")}`);\n      }\n    });\n    \n  } catch (error) {\n    console.error(\"Failed to start server:\", error);\n    process.exit(1);\n  }\n}\n\nstartServer();\n","size_bytes":1757},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport multer from \"multer\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { openAIService } from \"./services/openai\";\nimport { vectorSearchService } from \"./services/vectorSearch\";\nimport { registerLifestyleRoutes } from \"./routes/lifestyle\";\nimport { registerCourseRoutes } from \"./routes/courses\";\nimport { registerCareerMapRoutes } from \"./routes/career-map\";\nimport { registerAchievementRoutes } from \"./routes/achievements\";\nimport {\n  insertUserProfileSchema,\n  insertUserSkillSchema,\n  insertCareerPathSchema,\n  insertEnrollmentSchema,\n  insertChatMessageSchema,\n} from \"@shared/schema\";\n\n// Configure multer for file uploads\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 5 * 1024 * 1024, // 5MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    // Accept PDF, DOC, DOCX files\n    const allowedTypes = [\n      'application/pdf',\n      'application/msword',\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      'text/plain'\n    ];\n    \n    if (allowedTypes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Invalid file type. Please upload PDF, DOC, DOCX, or TXT files.'));\n    }\n  }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      const profile = await storage.getUserProfile(userId);\n      \n      res.json({\n        ...user,\n        profile,\n      });\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Profile routes\n  app.get('/api/profile', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const profile = await storage.getUserProfile(userId);\n      const skills = await storage.getUserSkills(userId);\n      const careerPaths = await storage.getUserCareerPaths(userId);\n      \n      res.json({\n        profile,\n        skills,\n        careerPaths,\n      });\n    } catch (error) {\n      console.error(\"Error fetching profile:\", error);\n      res.status(500).json({ message: \"Failed to fetch profile\" });\n    }\n  });\n\n  app.post('/api/profile', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const profileData = insertUserProfileSchema.parse({ ...req.body, userId });\n      \n      const existingProfile = await storage.getUserProfile(userId);\n      let profile;\n      \n      if (existingProfile) {\n        profile = await storage.updateUserProfile(userId, profileData);\n      } else {\n        profile = await storage.createUserProfile(profileData);\n      }\n\n      // Update profile embedding when profile changes\n      await vectorSearchService.updateProfileEmbedding(userId);\n      \n      res.json(profile);\n    } catch (error) {\n      console.error(\"Error saving profile:\", error);\n      res.status(500).json({ message: \"Failed to save profile\" });\n    }\n  });\n\n  // Resume upload and parsing\n  app.post('/api/profile/upload-resume', isAuthenticated, upload.single('resume'), async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      \n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      // Extract text from uploaded file (simplified - in production you'd use proper PDF/DOC parsers)\n      const resumeText = req.file.buffer.toString('utf-8');\n      \n      // Parse resume using OpenAI\n      const parsedProfile = await openAIService.parseResume(resumeText, userId);\n      \n      // Save parsed information\n      if (parsedProfile.currentRole || parsedProfile.experience) {\n        const profileData = {\n          userId,\n          currentRole: parsedProfile.currentRole,\n          experience: parsedProfile.experience,\n          education: parsedProfile.education,\n          resumeText,\n        };\n        \n        const existingProfile = await storage.getUserProfile(userId);\n        if (existingProfile) {\n          await storage.updateUserProfile(userId, profileData);\n        } else {\n          await storage.createUserProfile(profileData);\n        }\n      }\n\n      // Save skills\n      for (const skill of parsedProfile.skills) {\n        await storage.addUserSkill(skill);\n      }\n\n      // Save career paths\n      for (const path of parsedProfile.careerPaths) {\n        await storage.addCareerPath(path);\n      }\n\n      // Update profile embedding\n      await vectorSearchService.updateProfileEmbedding(userId);\n      \n      res.json({\n        message: \"Resume uploaded and parsed successfully\",\n        parsedData: parsedProfile,\n      });\n    } catch (error) {\n      console.error(\"Error processing resume:\", error);\n      res.status(500).json({ message: \"Failed to process resume\" });\n    }\n  });\n\n  // Skills routes\n  app.post('/api/skills', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const skillData = insertUserSkillSchema.parse({ ...req.body, userId });\n      \n      const skill = await storage.addUserSkill(skillData);\n      \n      // Update profile embedding when skills change\n      await vectorSearchService.updateProfileEmbedding(userId);\n      \n      res.json(skill);\n    } catch (error) {\n      console.error(\"Error adding skill:\", error);\n      res.status(500).json({ message: \"Failed to add skill\" });\n    }\n  });\n\n  app.delete('/api/skills/:skillName', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { skillName } = req.params;\n      \n      await storage.deleteUserSkill(userId, skillName);\n      \n      // Update profile embedding when skills change\n      await vectorSearchService.updateProfileEmbedding(userId);\n      \n      res.json({ message: \"Skill deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting skill:\", error);\n      res.status(500).json({ message: \"Failed to delete skill\" });\n    }\n  });\n\n  // Career doppelgangers\n  app.get('/api/doppelgangers', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const limit = parseInt(req.query.limit as string) || 10;\n      \n      const doppelgangers = await vectorSearchService.findCareerDoppelgangers(userId, limit);\n      \n      res.json(doppelgangers);\n    } catch (error) {\n      console.error(\"Error fetching doppelgangers:\", error);\n      res.status(500).json({ message: \"Failed to fetch career doppelgangers\" });\n    }\n  });\n\n  // Skill gap analysis\n  app.post('/api/skill-gap-analysis', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { targetRole } = req.body;\n      \n      const userSkills = await storage.getUserSkills(userId);\n      const skillNames = userSkills.map(skill => skill.skillName);\n      \n      const analysis = await openAIService.analyzeSkillGap(skillNames, targetRole);\n      \n      // Save the analysis\n      const skillGap = await storage.createSkillGap({\n        userId,\n        targetRole,\n        missingSkills: analysis.missingSkills,\n        improvementSkills: analysis.improvementSkills,\n        strongSkills: analysis.strongSkills,\n        recommendations: analysis.recommendations,\n      });\n      \n      res.json(skillGap);\n    } catch (error) {\n      console.error(\"Error analyzing skill gap:\", error);\n      res.status(500).json({ message: \"Failed to analyze skill gap\" });\n    }\n  });\n\n  app.get('/api/skill-gap-analysis', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const skillGap = await storage.getLatestSkillGap(userId);\n      \n      res.json(skillGap);\n    } catch (error) {\n      console.error(\"Error fetching skill gap analysis:\", error);\n      res.status(500).json({ message: \"Failed to fetch skill gap analysis\" });\n    }\n  });\n\n  // AI Career Guidance\n  app.post('/api/ai-guidance', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      \n      // Get user context\n      const user = await storage.getUser(userId);\n      const profile = await storage.getUserProfile(userId);\n      const careerPaths = await storage.getUserCareerPaths(userId);\n      const skillGaps = await storage.getLatestSkillGap(userId);\n      const doppelgangers = await vectorSearchService.findCareerDoppelgangers(userId, 3);\n      \n      const guidance = await openAIService.generateCareerGuidance(\n        profile,\n        careerPaths,\n        skillGaps,\n        doppelgangers\n      );\n      \n      // Save the guidance\n      const aiGuidance = await storage.createAIGuidance({\n        userId,\n        prompt: \"Career guidance request\",\n        response: guidance.guidance,\n        guidanceType: \"career_advice\",\n      });\n      \n      res.json({\n        ...guidance,\n        id: aiGuidance.id,\n      });\n    } catch (error) {\n      console.error(\"Error generating AI guidance:\", error);\n      res.status(500).json({ message: \"Failed to generate AI guidance\" });\n    }\n  });\n\n  // Classes routes\n  app.get('/api/classes', async (req, res) => {\n    try {\n      const { search, category, location } = req.query;\n      \n      let classes;\n      if (search || category || location) {\n        classes = await storage.searchClasses(\n          search as string,\n          category as string,\n          location as string\n        );\n      } else {\n        classes = await storage.getActiveClasses();\n      }\n      \n      // Add spots remaining calculation\n      const classesWithSpots = classes.map(cls => ({\n        ...cls,\n        spotsLeft: Math.max(0, (cls.maxStudents || 0) - (cls.currentStudents || 0)),\n      }));\n      \n      res.json(classesWithSpots);\n    } catch (error) {\n      console.error(\"Error fetching classes:\", error);\n      res.status(500).json({ message: \"Failed to fetch classes\" });\n    }\n  });\n\n  app.get('/api/classes/recommended', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { search } = req.query;\n      \n      const recommendedClasses = await vectorSearchService.findRelevantClasses(\n        userId,\n        search as string\n      );\n      \n      res.json(recommendedClasses);\n    } catch (error) {\n      console.error(\"Error fetching recommended classes:\", error);\n      res.status(500).json({ message: \"Failed to fetch recommended classes\" });\n    }\n  });\n\n  app.post('/api/classes/:classId/enroll', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { classId } = req.params;\n      \n      // Check if class exists and has spots\n      const classItem = await storage.getClassById(classId);\n      if (!classItem) {\n        return res.status(404).json({ message: \"Class not found\" });\n      }\n      \n      const spotsLeft = (classItem.maxStudents || 0) - (classItem.currentStudents || 0);\n      if (spotsLeft <= 0) {\n        return res.status(400).json({ message: \"Class is full\" });\n      }\n      \n      const enrollment = await storage.enrollUserInClass({ userId, classId });\n      \n      res.json(enrollment);\n    } catch (error) {\n      console.error(\"Error enrolling in class:\", error);\n      res.status(500).json({ message: \"Failed to enroll in class\" });\n    }\n  });\n\n  app.get('/api/enrollments', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const enrollments = await storage.getUserEnrollments(userId);\n      \n      res.json(enrollments);\n    } catch (error) {\n      console.error(\"Error fetching enrollments:\", error);\n      res.status(500).json({ message: \"Failed to fetch enrollments\" });\n    }\n  });\n\n  // Chat routes\n  app.post('/api/chat', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { message } = req.body;\n      \n      if (!message || typeof message !== 'string') {\n        return res.status(400).json({ message: \"Message is required\" });\n      }\n      \n      // Save user message\n      await storage.createChatMessage({\n        userId,\n        message,\n        isBot: false,\n      });\n      \n      // Get chat history for context\n      const chatHistory = await storage.getUserChatHistory(userId, 10);\n      \n      // Generate AI response\n      const response = await openAIService.generateChatResponse(message, userId, chatHistory);\n      \n      // Save bot response\n      const botMessage = await storage.createChatMessage({\n        userId,\n        message: response,\n        isBot: true,\n      });\n      \n      res.json({\n        message: response,\n        id: botMessage.id,\n      });\n    } catch (error) {\n      console.error(\"Error processing chat message:\", error);\n      res.status(500).json({ message: \"Failed to process chat message\" });\n    }\n  });\n\n  app.get('/api/chat/history', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const limit = parseInt(req.query.limit as string) || 50;\n      \n      const history = await storage.getUserChatHistory(userId, limit);\n      \n      res.json(history.reverse()); // Reverse to show oldest first\n    } catch (error) {\n      console.error(\"Error fetching chat history:\", error);\n      res.status(500).json({ message: \"Failed to fetch chat history\" });\n    }\n  });\n\n  // Dashboard data endpoint\n  app.get('/api/dashboard', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      \n      // Get all dashboard data in parallel\n      const [\n        user,\n        profile,\n        skills,\n        careerPaths,\n        doppelgangers,\n        skillGap,\n        recommendedClasses,\n        enrollments,\n        latestGuidance\n      ] = await Promise.all([\n        storage.getUser(userId),\n        storage.getUserProfile(userId),\n        storage.getUserSkills(userId),\n        storage.getUserCareerPaths(userId),\n        vectorSearchService.findCareerDoppelgangers(userId, 5),\n        storage.getLatestSkillGap(userId),\n        vectorSearchService.findRelevantClasses(userId),\n        storage.getUserEnrollments(userId),\n        storage.getUserAIGuidance(userId, 1)\n      ]);\n      \n      // Calculate profile completion\n      let completionScore = 0;\n      if (user?.firstName) completionScore += 20;\n      if (user?.email) completionScore += 10;\n      if (profile?.currentRole) completionScore += 20;\n      if (skills.length > 0) completionScore += 25;\n      if (profile?.resumeText) completionScore += 25;\n      \n      res.json({\n        user,\n        profile: {\n          ...profile,\n          profileCompletion: completionScore,\n        },\n        skills,\n        careerPaths,\n        doppelgangers,\n        skillGap,\n        recommendedClasses: recommendedClasses.slice(0, 5),\n        enrollments,\n        latestGuidance: latestGuidance[0],\n      });\n    } catch (error) {\n      console.error(\"Error fetching dashboard data:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard data\" });\n    }\n  });\n\n  // Register additional route modules\n  registerLifestyleRoutes(app);\n  registerCourseRoutes(app);\n  registerCareerMapRoutes(app);\n  registerAchievementRoutes(app);\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":15584},"server/storage.ts":{"content":"import {\n  users,\n  userProfiles,\n  userSkills,\n  careerPaths,\n  profileEmbeddings,\n  classes,\n  enrollments,\n  skillGaps,\n  aiGuidance,\n  chatMessages,\n  achievements,\n  userAchievements,\n  notifications,\n  salaryCache,\n  type User,\n  type UpsertUser,\n  type UserProfile,\n  type InsertUserProfile,\n  type UserSkill,\n  type InsertUserSkill,\n  type CareerPath,\n  type InsertCareerPath,\n  type ProfileEmbedding,\n  type Class,\n  type InsertClass,\n  type Enrollment,\n  type InsertEnrollment,\n  type SkillGap,\n  type InsertSkillGap,\n  type AIGuidance,\n  type InsertAIGuidance,\n  type ChatMessage,\n  type InsertChatMessage,\n  type Achievement,\n  type InsertAchievement,\n  type UserAchievement,\n  type InsertUserAchievement,\n  type Notification,\n  type InsertNotification,\n  type SalaryCache,\n  type InsertSalaryCache,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, inArray, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (mandatory for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Profile operations\n  getUserProfile(userId: string): Promise<UserProfile | undefined>;\n  createUserProfile(profile: InsertUserProfile): Promise<UserProfile>;\n  updateUserProfile(userId: string, profile: Partial<InsertUserProfile>): Promise<UserProfile>;\n  \n  // Skills operations\n  getUserSkills(userId: string): Promise<UserSkill[]>;\n  addUserSkill(skill: InsertUserSkill): Promise<UserSkill>;\n  deleteUserSkill(userId: string, skillName: string): Promise<void>;\n  \n  // Career paths operations\n  getUserCareerPaths(userId: string): Promise<CareerPath[]>;\n  addCareerPath(path: InsertCareerPath): Promise<CareerPath>;\n  \n  // Profile embeddings operations\n  getProfileEmbedding(userId: string): Promise<ProfileEmbedding | undefined>;\n  upsertProfileEmbedding(userId: string, embedding: number[], profileData: any): Promise<ProfileEmbedding>;\n  findSimilarProfiles(embedding: number[], limit: number): Promise<ProfileEmbedding[]>;\n  \n  // Classes operations\n  getActiveClasses(): Promise<Class[]>;\n  getClassById(id: string): Promise<Class | undefined>;\n  searchClasses(query: string, category?: string, location?: string): Promise<Class[]>;\n  updateClassEnrollment(classId: string, increment: number): Promise<void>;\n  \n  // Enrollment operations\n  enrollUserInClass(enrollment: InsertEnrollment): Promise<Enrollment>;\n  getUserEnrollments(userId: string): Promise<(Enrollment & { class: Class })[]>;\n  \n  // Skill gap operations\n  getLatestSkillGap(userId: string): Promise<SkillGap | undefined>;\n  createSkillGap(skillGap: InsertSkillGap): Promise<SkillGap>;\n  \n  // AI guidance operations\n  createAIGuidance(guidance: InsertAIGuidance): Promise<AIGuidance>;\n  getUserAIGuidance(userId: string, limit?: number): Promise<AIGuidance[]>;\n  \n  // Chat operations\n  createChatMessage(message: InsertChatMessage): Promise<ChatMessage>;\n  getUserChatHistory(userId: string, limit?: number): Promise<ChatMessage[]>;\n  \n  // Achievement operations\n  getAchievements(): Promise<Achievement[]>;\n  getUserAchievements(userId: string): Promise<(UserAchievement & { achievement: Achievement })[]>;\n  awardAchievement(userAchievement: InsertUserAchievement): Promise<UserAchievement>;\n  \n  // Notification operations\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  getUserNotifications(userId: string, status?: string): Promise<Notification[]>;\n  markNotificationAsRead(notificationId: string): Promise<void>;\n  \n  // Salary cache operations\n  getSalaryCacheEntry(role: string, location: string): Promise<SalaryCache | undefined>;\n  cacheSalaryData(salaryData: InsertSalaryCache): Promise<SalaryCache>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (mandatory for Replit Auth)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Profile operations\n  async getUserProfile(userId: string): Promise<UserProfile | undefined> {\n    const [profile] = await db\n      .select()\n      .from(userProfiles)\n      .where(eq(userProfiles.userId, userId));\n    return profile;\n  }\n\n  async createUserProfile(profile: InsertUserProfile): Promise<UserProfile> {\n    const [newProfile] = await db\n      .insert(userProfiles)\n      .values(profile)\n      .returning();\n    return newProfile;\n  }\n\n  async updateUserProfile(userId: string, profile: Partial<InsertUserProfile>): Promise<UserProfile> {\n    const [updatedProfile] = await db\n      .update(userProfiles)\n      .set({ ...profile, updatedAt: new Date() })\n      .where(eq(userProfiles.userId, userId))\n      .returning();\n    return updatedProfile;\n  }\n\n  // Skills operations\n  async getUserSkills(userId: string): Promise<UserSkill[]> {\n    return await db\n      .select()\n      .from(userSkills)\n      .where(eq(userSkills.userId, userId))\n      .orderBy(desc(userSkills.proficiency));\n  }\n\n  async addUserSkill(skill: InsertUserSkill): Promise<UserSkill> {\n    const [newSkill] = await db\n      .insert(userSkills)\n      .values(skill)\n      .onConflictDoUpdate({\n        target: [userSkills.userId, userSkills.skillName],\n        set: {\n          proficiency: skill.proficiency,\n          verified: skill.verified,\n        },\n      })\n      .returning();\n    return newSkill;\n  }\n\n  async deleteUserSkill(userId: string, skillName: string): Promise<void> {\n    await db\n      .delete(userSkills)\n      .where(and(\n        eq(userSkills.userId, userId),\n        eq(userSkills.skillName, skillName)\n      ));\n  }\n\n  // Career paths operations\n  async getUserCareerPaths(userId: string): Promise<CareerPath[]> {\n    return await db\n      .select()\n      .from(careerPaths)\n      .where(eq(careerPaths.userId, userId))\n      .orderBy(desc(careerPaths.startDate));\n  }\n\n  async addCareerPath(path: InsertCareerPath): Promise<CareerPath> {\n    const [newPath] = await db\n      .insert(careerPaths)\n      .values(path)\n      .returning();\n    return newPath;\n  }\n\n  // Profile embeddings operations\n  async getProfileEmbedding(userId: string): Promise<ProfileEmbedding | undefined> {\n    const [embedding] = await db\n      .select()\n      .from(profileEmbeddings)\n      .where(eq(profileEmbeddings.userId, userId));\n    return embedding;\n  }\n\n  async upsertProfileEmbedding(userId: string, embedding: number[], profileData: any): Promise<ProfileEmbedding> {\n    const [result] = await db\n      .insert(profileEmbeddings)\n      .values({\n        userId,\n        embedding,\n        profileData,\n      })\n      .onConflictDoUpdate({\n        target: profileEmbeddings.userId,\n        set: {\n          embedding,\n          profileData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return result;\n  }\n\n  async findSimilarProfiles(embedding: number[], limit: number): Promise<ProfileEmbedding[]> {\n    // Simple cosine similarity using array operations\n    // In production, you'd want to use a proper vector database like Pinecone or pgvector\n    const allEmbeddings = await db.select().from(profileEmbeddings);\n    \n    const similarities = allEmbeddings.map(profile => {\n      const similarity = this.cosineSimilarity(embedding, profile.embedding || []);\n      return { ...profile, similarity };\n    });\n\n    return similarities\n      .sort((a, b) => b.similarity - a.similarity)\n      .slice(0, limit);\n  }\n\n  private cosineSimilarity(a: number[], b: number[]): number {\n    if (a.length !== b.length) return 0;\n    \n    let dotProduct = 0;\n    let normA = 0;\n    let normB = 0;\n    \n    for (let i = 0; i < a.length; i++) {\n      dotProduct += a[i] * b[i];\n      normA += a[i] * a[i];\n      normB += b[i] * b[i];\n    }\n    \n    return dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));\n  }\n\n  // Classes operations\n  async getActiveClasses(): Promise<Class[]> {\n    return await db\n      .select()\n      .from(classes)\n      .where(eq(classes.isActive, true))\n      .orderBy(desc(classes.startDate));\n  }\n\n  async getClassById(id: string): Promise<Class | undefined> {\n    const [classItem] = await db\n      .select()\n      .from(classes)\n      .where(eq(classes.id, id));\n    return classItem;\n  }\n\n  async searchClasses(query: string, category?: string, location?: string): Promise<Class[]> {\n    let whereConditions = eq(classes.isActive, true);\n    \n    if (category) {\n      const categoryCondition = and(whereConditions, eq(classes.category, category));\n      if (categoryCondition) whereConditions = categoryCondition;\n    }\n    \n    if (location && location !== \"Online\") {\n      const locationCondition = and(whereConditions, eq(classes.location, location));\n      if (locationCondition) whereConditions = locationCondition;\n    } else if (location === \"Online\") {\n      const onlineCondition = and(whereConditions, eq(classes.isOnline, true));\n      if (onlineCondition) whereConditions = onlineCondition;\n    }\n\n    // Simple text search - in production you'd want full-text search\n    return await db\n      .select()\n      .from(classes)\n      .where(whereConditions)\n      .orderBy(desc(classes.startDate));\n  }\n\n  async updateClassEnrollment(classId: string, increment: number): Promise<void> {\n    await db\n      .update(classes)\n      .set({\n        currentStudents: sql`${classes.currentStudents} + ${increment}`,\n      })\n      .where(eq(classes.id, classId));\n  }\n\n  // Enrollment operations\n  async enrollUserInClass(enrollment: InsertEnrollment): Promise<Enrollment> {\n    const [newEnrollment] = await db\n      .insert(enrollments)\n      .values(enrollment)\n      .returning();\n    \n    // Update class enrollment count\n    await this.updateClassEnrollment(enrollment.classId, 1);\n    \n    return newEnrollment;\n  }\n\n  async getUserEnrollments(userId: string): Promise<(Enrollment & { class: Class })[]> {\n    return await db\n      .select({\n        id: enrollments.id,\n        userId: enrollments.userId,\n        classId: enrollments.classId,\n        enrolledAt: enrollments.enrolledAt,\n        completed: enrollments.completed,\n        completedAt: enrollments.completedAt,\n        class: classes,\n      })\n      .from(enrollments)\n      .innerJoin(classes, eq(enrollments.classId, classes.id))\n      .where(eq(enrollments.userId, userId))\n      .orderBy(desc(enrollments.enrolledAt));\n  }\n\n  // Skill gap operations\n  async getLatestSkillGap(userId: string): Promise<SkillGap | undefined> {\n    const [skillGap] = await db\n      .select()\n      .from(skillGaps)\n      .where(eq(skillGaps.userId, userId))\n      .orderBy(desc(skillGaps.createdAt))\n      .limit(1);\n    return skillGap;\n  }\n\n  async createSkillGap(skillGap: InsertSkillGap): Promise<SkillGap> {\n    const [newSkillGap] = await db\n      .insert(skillGaps)\n      .values(skillGap)\n      .returning();\n    return newSkillGap;\n  }\n\n  // AI guidance operations\n  async createAIGuidance(guidance: InsertAIGuidance): Promise<AIGuidance> {\n    const [newGuidance] = await db\n      .insert(aiGuidance)\n      .values(guidance)\n      .returning();\n    return newGuidance;\n  }\n\n  async getUserAIGuidance(userId: string, limit = 10): Promise<AIGuidance[]> {\n    return await db\n      .select()\n      .from(aiGuidance)\n      .where(eq(aiGuidance.userId, userId))\n      .orderBy(desc(aiGuidance.createdAt))\n      .limit(limit);\n  }\n\n  // Chat operations\n  async createChatMessage(message: InsertChatMessage): Promise<ChatMessage> {\n    const [newMessage] = await db\n      .insert(chatMessages)\n      .values(message)\n      .returning();\n    return newMessage;\n  }\n\n  async getUserChatHistory(userId: string, limit = 50): Promise<ChatMessage[]> {\n    return await db\n      .select()\n      .from(chatMessages)\n      .where(eq(chatMessages.userId, userId))\n      .orderBy(desc(chatMessages.createdAt))\n      .limit(limit);\n  }\n\n  // Achievement operations\n  async getAchievements(): Promise<Achievement[]> {\n    return await db\n      .select()\n      .from(achievements)\n      .where(eq(achievements.isActive, true))\n      .orderBy(achievements.name);\n  }\n\n  async getUserAchievements(userId: string): Promise<(UserAchievement & { achievement: Achievement })[]> {\n    const results = await db\n      .select({\n        id: userAchievements.id,\n        userId: userAchievements.userId,\n        achievementId: userAchievements.achievementId,\n        earnedAt: userAchievements.earnedAt,\n        progress: userAchievements.progress,\n        achievement: achievements,\n      })\n      .from(userAchievements)\n      .innerJoin(achievements, eq(userAchievements.achievementId, achievements.id))\n      .where(eq(userAchievements.userId, userId))\n      .orderBy(desc(userAchievements.earnedAt));\n    \n    return results as (UserAchievement & { achievement: Achievement })[];\n  }\n\n  async awardAchievement(userAchievement: InsertUserAchievement): Promise<UserAchievement> {\n    const [newAchievement] = await db\n      .insert(userAchievements)\n      .values(userAchievement)\n      .returning();\n    return newAchievement;\n  }\n\n  // Notification operations\n  async createNotification(notification: InsertNotification): Promise<Notification> {\n    const [newNotification] = await db\n      .insert(notifications)\n      .values(notification)\n      .returning();\n    return newNotification;\n  }\n\n  async getUserNotifications(userId: string, status?: string): Promise<Notification[]> {\n    const conditions = [eq(notifications.userId, userId)];\n    \n    if (status) {\n      conditions.push(eq(notifications.status, status));\n    }\n\n    return await db\n      .select()\n      .from(notifications)\n      .where(and(...conditions))\n      .orderBy(desc(notifications.createdAt))\n      .limit(50);\n  }\n\n  async markNotificationAsRead(notificationId: string): Promise<void> {\n    await db\n      .update(notifications)\n      .set({ \n        status: \"read\", \n        readAt: new Date() \n      })\n      .where(eq(notifications.id, notificationId));\n  }\n\n  // Salary cache operations\n  async getSalaryCacheEntry(role: string, location: string): Promise<SalaryCache | undefined> {\n    const [cached] = await db\n      .select()\n      .from(salaryCache)\n      .where(and(\n        eq(salaryCache.role, role),\n        eq(salaryCache.location, location)\n      ))\n      .orderBy(desc(salaryCache.cachedAt))\n      .limit(1);\n    return cached;\n  }\n\n  async cacheSalaryData(salaryData: InsertSalaryCache): Promise<SalaryCache> {\n    const [cached] = await db\n      .insert(salaryCache)\n      .values(salaryData)\n      .returning();\n    return cached;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":14888},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n  decimal,\n  uuid,\n  real,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// User profiles with career information\nexport const userProfiles = pgTable(\"user_profiles\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  currentRole: varchar(\"current_role\"),\n  targetRole: varchar(\"target_role\"),\n  experience: integer(\"experience\"), // years of experience\n  education: text(\"education\"),\n  location: varchar(\"location\"),\n  salary: integer(\"salary\"),\n  resumeText: text(\"resume_text\"),\n  resumeUrl: varchar(\"resume_url\"),\n  profileCompletion: integer(\"profile_completion\").default(0),\n  // Lifestyle simulation preferences (1-10 scale)\n  salaryImportance: integer(\"salary_importance\").default(5),\n  wlbImportance: integer(\"wlb_importance\").default(5), // work-life balance\n  stressTolerance: integer(\"stress_tolerance\").default(5),\n  remotePreference: integer(\"remote_preference\").default(5),\n  commutePreference: integer(\"commute_preference\").default(5), // max commute tolerance\n  travelWillingness: integer(\"travel_willingness\").default(5),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// User skills\nexport const userSkills = pgTable(\"user_skills\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  skillName: varchar(\"skill_name\").notNull(),\n  proficiency: integer(\"proficiency\"), // 1-5 scale\n  verified: boolean(\"verified\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Career paths and trajectories\nexport const careerPaths = pgTable(\"career_paths\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  role: varchar(\"role\").notNull(),\n  company: varchar(\"company\"),\n  startDate: timestamp(\"start_date\"),\n  endDate: timestamp(\"end_date\"),\n  isCurrent: boolean(\"is_current\").default(false),\n  salary: integer(\"salary\"),\n  skills: text(\"skills\").array(), // Array of skills used in this role\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Profile embeddings for similarity search\nexport const profileEmbeddings = pgTable(\"profile_embeddings\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  embedding: real(\"embedding\").array(), // Vector embedding\n  profileData: jsonb(\"profile_data\"), // Serialized profile data\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Available classes and workshops\nexport const classes = pgTable(\"classes\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  category: varchar(\"category\").notNull(),\n  instructor: varchar(\"instructor\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }),\n  duration: varchar(\"duration\"),\n  location: varchar(\"location\"),\n  isOnline: boolean(\"is_online\").default(false),\n  startDate: timestamp(\"start_date\"),\n  endDate: timestamp(\"end_date\"),\n  maxStudents: integer(\"max_students\"),\n  currentStudents: integer(\"current_students\").default(0),\n  skills: text(\"skills\").array(), // Skills taught in this class\n  difficulty: varchar(\"difficulty\"), // beginner, intermediate, advanced\n  imageUrl: varchar(\"image_url\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// User enrollments\nexport const enrollments = pgTable(\"enrollments\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  classId: uuid(\"class_id\").notNull().references(() => classes.id, { onDelete: \"cascade\" }),\n  enrolledAt: timestamp(\"enrolled_at\").defaultNow(),\n  completed: boolean(\"completed\").default(false),\n  completedAt: timestamp(\"completed_at\"),\n});\n\n// Skill gap analysis results\nexport const skillGaps = pgTable(\"skill_gaps\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  targetRole: varchar(\"target_role\").notNull(),\n  missingSkills: text(\"missing_skills\").array(),\n  improvementSkills: text(\"improvement_skills\").array(),\n  strongSkills: text(\"strong_skills\").array(),\n  recommendations: jsonb(\"recommendations\"), // Course recommendations\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// AI guidance sessions\nexport const aiGuidance = pgTable(\"ai_guidance\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  prompt: text(\"prompt\").notNull(),\n  response: text(\"response\").notNull(),\n  guidanceType: varchar(\"guidance_type\"), // career_advice, skill_recommendation, etc.\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Chat messages\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }),\n  message: text(\"message\").notNull(),\n  response: text(\"response\"),\n  isBot: boolean(\"is_bot\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Achievements for gamification\nexport const achievements = pgTable(\"achievements\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: varchar(\"code\").notNull().unique(), // unique identifier for each achievement\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  icon: varchar(\"icon\"), // icon class or emoji\n  criteriaJson: jsonb(\"criteria_json\"), // JSON criteria for earning the achievement\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// User achievements tracking\nexport const userAchievements = pgTable(\"user_achievements\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  achievementId: uuid(\"achievement_id\").notNull().references(() => achievements.id, { onDelete: \"cascade\" }),\n  earnedAt: timestamp(\"earned_at\").defaultNow(),\n  progress: integer(\"progress\").default(100), // percentage for partial achievements\n});\n\n// Notifications system\nexport const notifications = pgTable(\"notifications\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  channel: varchar(\"channel\").notNull(), // 'in-app', 'email', 'sms'\n  type: varchar(\"type\").notNull(), // 'goal_reminder', 'achievement', 'course_suggestion', etc.\n  title: varchar(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  payloadJson: jsonb(\"payload_json\"), // additional data for the notification\n  dueAt: timestamp(\"due_at\"), // when to send the notification\n  status: varchar(\"status\").default(\"pending\"), // 'pending', 'sent', 'failed', 'read'\n  sentAt: timestamp(\"sent_at\"),\n  readAt: timestamp(\"read_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Salary data cache for lifestyle simulation\nexport const salaryCache = pgTable(\"salary_cache\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  role: varchar(\"role\").notNull(),\n  location: varchar(\"location\").notNull(),\n  source: varchar(\"source\").notNull(), // 'bls', 'onet', 'glassdoor', etc.\n  p25: integer(\"p25\"), // 25th percentile salary\n  median: integer(\"median\"), // median salary\n  p75: integer(\"p75\"), // 75th percentile salary\n  currency: varchar(\"currency\").default(\"USD\"),\n  dataYear: integer(\"data_year\"),\n  cachedAt: timestamp(\"cached_at\").defaultNow(),\n  expiresAt: timestamp(\"expires_at\"), // cache expiration\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  profile: one(userProfiles, {\n    fields: [users.id],\n    references: [userProfiles.userId],\n  }),\n  skills: many(userSkills),\n  careerPaths: many(careerPaths),\n  embeddings: one(profileEmbeddings, {\n    fields: [users.id],\n    references: [profileEmbeddings.userId],\n  }),\n  enrollments: many(enrollments),\n  skillGaps: many(skillGaps),\n  aiGuidance: many(aiGuidance),\n  chatMessages: many(chatMessages),\n  achievements: many(userAchievements),\n  notifications: many(notifications),\n}));\n\nexport const userProfilesRelations = relations(userProfiles, ({ one }) => ({\n  user: one(users, {\n    fields: [userProfiles.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const userSkillsRelations = relations(userSkills, ({ one }) => ({\n  user: one(users, {\n    fields: [userSkills.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const careerPathsRelations = relations(careerPaths, ({ one }) => ({\n  user: one(users, {\n    fields: [careerPaths.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const enrollmentsRelations = relations(enrollments, ({ one }) => ({\n  user: one(users, {\n    fields: [enrollments.userId],\n    references: [users.id],\n  }),\n  class: one(classes, {\n    fields: [enrollments.classId],\n    references: [classes.id],\n  }),\n}));\n\nexport const classesRelations = relations(classes, ({ many }) => ({\n  enrollments: many(enrollments),\n}));\n\nexport const achievementsRelations = relations(achievements, ({ many }) => ({\n  userAchievements: many(userAchievements),\n}));\n\nexport const userAchievementsRelations = relations(userAchievements, ({ one }) => ({\n  user: one(users, {\n    fields: [userAchievements.userId],\n    references: [users.id],\n  }),\n  achievement: one(achievements, {\n    fields: [userAchievements.achievementId],\n    references: [achievements.id],\n  }),\n}));\n\nexport const notificationsRelations = relations(notifications, ({ one }) => ({\n  user: one(users, {\n    fields: [notifications.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserProfileSchema = createInsertSchema(userProfiles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserSkillSchema = createInsertSchema(userSkills).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCareerPathSchema = createInsertSchema(careerPaths).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertClassSchema = createInsertSchema(classes).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertEnrollmentSchema = createInsertSchema(enrollments).omit({\n  id: true,\n  enrolledAt: true,\n});\n\nexport const insertSkillGapSchema = createInsertSchema(skillGaps).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAIGuidanceSchema = createInsertSchema(aiGuidance).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertChatMessageSchema = createInsertSchema(chatMessages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAchievementSchema = createInsertSchema(achievements).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserAchievementSchema = createInsertSchema(userAchievements).omit({\n  id: true,\n  earnedAt: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSalaryCacheSchema = createInsertSchema(salaryCache).omit({\n  id: true,\n  cachedAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type UserProfile = typeof userProfiles.$inferSelect;\nexport type InsertUserProfile = z.infer<typeof insertUserProfileSchema>;\nexport type UserSkill = typeof userSkills.$inferSelect;\nexport type InsertUserSkill = z.infer<typeof insertUserSkillSchema>;\nexport type CareerPath = typeof careerPaths.$inferSelect;\nexport type InsertCareerPath = z.infer<typeof insertCareerPathSchema>;\nexport type ProfileEmbedding = typeof profileEmbeddings.$inferSelect;\nexport type Class = typeof classes.$inferSelect;\nexport type InsertClass = z.infer<typeof insertClassSchema>;\nexport type Enrollment = typeof enrollments.$inferSelect;\nexport type InsertEnrollment = z.infer<typeof insertEnrollmentSchema>;\nexport type SkillGap = typeof skillGaps.$inferSelect;\nexport type InsertSkillGap = z.infer<typeof insertSkillGapSchema>;\nexport type AIGuidance = typeof aiGuidance.$inferSelect;\nexport type InsertAIGuidance = z.infer<typeof insertAIGuidanceSchema>;\nexport type ChatMessage = typeof chatMessages.$inferSelect;\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\nexport type Achievement = typeof achievements.$inferSelect;\nexport type InsertAchievement = z.infer<typeof insertAchievementSchema>;\nexport type UserAchievement = typeof userAchievements.$inferSelect;\nexport type InsertUserAchievement = z.infer<typeof insertUserAchievementSchema>;\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type SalaryCache = typeof salaryCache.$inferSelect;\nexport type InsertSalaryCache = z.infer<typeof insertSalaryCacheSchema>;\n","size_bytes":14386},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Profile from \"@/pages/profile\";\nimport LifestyleSimulation from \"@/pages/lifestyle-simulation\";\nimport CareerMap from \"@/pages/career-map\";\nimport Achievements from \"@/pages/achievements\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/profile\" component={Profile} />\n          <Route path=\"/lifestyle\" component={LifestyleSimulation} />\n          <Route path=\"/career-map\" component={CareerMap} />\n          <Route path=\"/achievements\" component={Achievements} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1434},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(214, 85%, 45%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(24, 95%, 53%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(214, 85%, 45%);\n  --chart-1: hsl(214, 85%, 45%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(24, 95%, 53%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-primary: hsl(214, 85%, 45%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-border: hsl(214.3, 31.8%, 91.4%);\n  --sidebar-ring: hsl(214, 85%, 45%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(214, 85%, 45% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(214, 85%, 45% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(214, 85%, 45% / 0.00), 0px 1px 2px -1px hsl(214, 85%, 45% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(214, 85%, 45% / 0.00), 0px 1px 2px -1px hsl(214, 85%, 45% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(214, 85%, 45% / 0.00), 0px 2px 4px -1px hsl(214, 85%, 45% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(214, 85%, 45% / 0.00), 0px 4px 6px -1px hsl(214, 85%, 45% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(214, 85%, 45% / 0.00), 0px 8px 10px -1px hsl(214, 85%, 45% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(214, 85%, 45% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(214, 85%, 45%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(24, 95%, 53%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(214, 85%, 45%);\n  --chart-1: hsl(214, 85%, 45%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(24, 95%, 53%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(222.2, 84%, 4.9%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(214, 85%, 45%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-ring: hsl(214, 85%, 45%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  .glassmorphism {\n    background: rgba(255, 255, 255, 0.25);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.18);\n  }\n\n  .gradient-bg {\n    background: linear-gradient(135deg, hsl(214, 85%, 45%) 0%, hsl(24, 95%, 53%) 100%);\n  }\n\n  .line-clamp-2 {\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n}\n","size_bytes":4154},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/openai.ts":{"content":"import OpenAI from \"openai\";\nimport type { InsertUserSkill, InsertCareerPath } from \"@shared/schema\";\n\n/*\nFollow these instructions when using this blueprint:\n1. Note that the newest OpenAI model is \"gpt-5\", not \"gpt-4o\" or \"gpt-4\". gpt-5 was released on August 7, 2025, after your knowledge cutoff. Always prefer using gpt-5 as it is the latest model. When copying code from this blueprint, ensure you also mention this information verbatim as a comment so that you don't revert it to older models: `// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user`\n*/\n\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR\n});\n\nexport interface ParsedProfile {\n  name?: string;\n  email?: string;\n  phone?: string;\n  experience: number;\n  currentRole?: string;\n  education?: string;\n  skills: InsertUserSkill[];\n  careerPaths: InsertCareerPath[];\n  summary?: string;\n}\n\nexport interface SkillGapAnalysis {\n  missingSkills: string[];\n  improvementSkills: string[];\n  strongSkills: string[];\n  recommendations: {\n    courses: string[];\n    resources: string[];\n    priority: \"high\" | \"medium\" | \"low\";\n  }[];\n}\n\nexport interface CareerGuidance {\n  guidance: string;\n  nextSteps: string[];\n  timeline: string;\n  resources: string[];\n}\n\nexport class OpenAIService {\n  // Parse CV/Resume text and extract structured information\n  async parseResume(resumeText: string, userId: string): Promise<ParsedProfile> {\n    try {\n      // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n      const response = await openai.chat.completions.create({\n        model: \"gpt-5\",\n        messages: [\n          {\n            role: \"system\",\n            content: `You are an expert CV/Resume parser. Extract structured information from the resume text and return it as JSON. Focus on:\n            - Personal information (name, email, phone)\n            - Years of experience (estimate if not explicit)\n            - Current/most recent role\n            - Education background\n            - Skills with proficiency levels (1-5 scale)\n            - Career progression with dates, roles, companies\n            - Professional summary\n\n            Return JSON in this exact format:\n            {\n              \"name\": \"string or null\",\n              \"email\": \"string or null\", \n              \"phone\": \"string or null\",\n              \"experience\": number,\n              \"currentRole\": \"string or null\",\n              \"education\": \"string or null\",\n              \"skills\": [{\"skillName\": \"string\", \"proficiency\": number}],\n              \"careerPaths\": [{\"role\": \"string\", \"company\": \"string\", \"startDate\": \"YYYY-MM-DD or null\", \"endDate\": \"YYYY-MM-DD or null\", \"isCurrent\": boolean, \"skills\": [\"skill1\", \"skill2\"], \"description\": \"string or null\"}],\n              \"summary\": \"string or null\"\n            }`\n          },\n          {\n            role: \"user\",\n            content: `Parse this resume:\\n\\n${resumeText}`\n          }\n        ],\n        response_format: { type: \"json_object\" },\n      });\n\n      const parsed = JSON.parse(response.choices[0].message.content || \"{}\");\n      \n      // Transform to match our schema\n      return {\n        ...parsed,\n        skills: parsed.skills?.map((skill: any) => ({\n          userId,\n          skillName: skill.skillName,\n          proficiency: Math.max(1, Math.min(5, skill.proficiency || 3)),\n          verified: false,\n        })) || [],\n        careerPaths: parsed.careerPaths?.map((path: any) => ({\n          userId,\n          role: path.role,\n          company: path.company,\n          startDate: path.startDate ? new Date(path.startDate) : null,\n          endDate: path.endDate ? new Date(path.endDate) : null,\n          isCurrent: path.isCurrent || false,\n          skills: path.skills || [],\n          description: path.description,\n        })) || [],\n      };\n    } catch (error) {\n      console.error(\"Error parsing resume:\", error);\n      throw new Error(\"Failed to parse resume. Please check the content and try again.\");\n    }\n  }\n\n  // Generate profile embedding for similarity search\n  async generateProfileEmbedding(profileData: any): Promise<number[]> {\n    try {\n      const profileText = this.serializeProfileForEmbedding(profileData);\n      \n      const response = await openai.embeddings.create({\n        model: \"text-embedding-ada-002\",\n        input: profileText,\n      });\n\n      return response.data[0].embedding;\n    } catch (error) {\n      console.error(\"Error generating embedding:\", error);\n      throw new Error(\"Failed to generate profile embedding.\");\n    }\n  }\n\n  // Analyze skill gaps for a target role\n  async analyzeSkillGap(currentSkills: string[], targetRole: string): Promise<SkillGapAnalysis> {\n    try {\n      // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n      const response = await openai.chat.completions.create({\n        model: \"gpt-5\",\n        messages: [\n          {\n            role: \"system\",\n            content: `You are a career advisor analyzing skill gaps. Given a person's current skills and their target role, identify:\n            1. Missing skills they need to acquire\n            2. Skills they have but need improvement\n            3. Strong skills they already possess\n            4. Course/resource recommendations with priority levels\n\n            Return JSON in this exact format:\n            {\n              \"missingSkills\": [\"skill1\", \"skill2\"],\n              \"improvementSkills\": [\"skill3\", \"skill4\"],\n              \"strongSkills\": [\"skill5\", \"skill6\"],\n              \"recommendations\": [\n                {\n                  \"courses\": [\"course1\", \"course2\"],\n                  \"resources\": [\"resource1\", \"resource2\"],\n                  \"priority\": \"high|medium|low\"\n                }\n              ]\n            }`\n          },\n          {\n            role: \"user\",\n            content: `Analyze skill gap for:\n            Target Role: ${targetRole}\n            Current Skills: ${currentSkills.join(\", \")}\n            \n            Consider industry standards and typical requirements for this role.`\n          }\n        ],\n        response_format: { type: \"json_object\" },\n      });\n\n      return JSON.parse(response.choices[0].message.content || \"{}\");\n    } catch (error) {\n      console.error(\"Error analyzing skill gap:\", error);\n      throw new Error(\"Failed to analyze skill gaps. Please try again.\");\n    }\n  }\n\n  // Generate personalized career guidance\n  async generateCareerGuidance(\n    userProfile: any,\n    careerPaths: any[],\n    skillGaps: any,\n    doppelgangers: any[]\n  ): Promise<CareerGuidance> {\n    try {\n      const context = {\n        profile: userProfile,\n        careerHistory: careerPaths,\n        skillGaps: skillGaps,\n        similarProfessionals: doppelgangers.slice(0, 3), // Top 3 matches\n      };\n\n      // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n      const response = await openai.chat.completions.create({\n        model: \"gpt-5\",\n        messages: [\n          {\n            role: \"system\",\n            content: `You are an expert career advisor providing personalized guidance. Write from the perspective of the user's \"future self\" who has successfully achieved their career goals. Be encouraging, specific, and actionable.\n\n            Return JSON in this exact format:\n            {\n              \"guidance\": \"Detailed career guidance message (200-300 words)\",\n              \"nextSteps\": [\"step1\", \"step2\", \"step3\"],\n              \"timeline\": \"Suggested timeline for achieving goals\",\n              \"resources\": [\"resource1\", \"resource2\", \"resource3\"]\n            }`\n          },\n          {\n            role: \"user\",\n            content: `Provide career guidance based on this context:\\n\\n${JSON.stringify(context, null, 2)}`\n          }\n        ],\n        response_format: { type: \"json_object\" },\n      });\n\n      return JSON.parse(response.choices[0].message.content || \"{}\");\n    } catch (error) {\n      console.error(\"Error generating career guidance:\", error);\n      throw new Error(\"Failed to generate career guidance. Please try again.\");\n    }\n  }\n\n  // Generate chatbot response\n  async generateChatResponse(message: string, userId: string, chatHistory: any[] = []): Promise<string> {\n    try {\n      const recentHistory = chatHistory.slice(-10); // Last 10 messages for context\n\n      // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n      const response = await openai.chat.completions.create({\n        model: \"gpt-5\",\n        messages: [\n          {\n            role: \"system\",\n            content: `You are StudyPath Assistant, a helpful AI career advisor and course finder. You help users:\n            - Find relevant classes and workshops\n            - Get career guidance and advice\n            - Understand skill requirements for different roles\n            - Navigate their career development journey\n\n            Be friendly, professional, and concise. Provide actionable advice and suggest specific next steps when appropriate.`\n          },\n          ...recentHistory.map((msg: any) => ({\n            role: (msg.isBot ? \"assistant\" : \"user\") as \"assistant\" | \"user\",\n            content: (msg.isBot ? msg.response : msg.message) as string,\n          })),\n          {\n            role: \"user\",\n            content: message\n          }\n        ],\n        max_completion_tokens: 300,\n      });\n\n      return response.choices[0].message.content || \"I'm sorry, I couldn't generate a response. Please try again.\";\n    } catch (error) {\n      console.error(\"Error generating chat response:\", error);\n      return \"I'm experiencing some technical difficulties. Please try again in a moment.\";\n    }\n  }\n\n  // Generate AI-powered future self narrative\n  async generateFutureSelf(career: string, skills: string[] = []): Promise<string> {\n    try {\n      const skillsList = skills.length > 0 ? skills.join(\", \") : \"general professional skills\";\n      \n      // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n      const response = await openai.chat.completions.create({\n        model: \"gpt-5\",\n        messages: [\n          {\n            role: \"system\",\n            content: `You are a career visioning expert who helps people envision their future professional selves. Create an inspiring, realistic narrative about someone's potential career journey. The narrative should be:\n            - Personal and engaging (use \"you\" perspective)\n            - Specific about career progression and achievements\n            - Include realistic timelines and milestones\n            - Mention skill development and learning opportunities\n            - Address potential challenges and how to overcome them\n            - Be encouraging but realistic\n            - Focus on growth, impact, and fulfillment\n            \n            Create a compelling future-self narrative in 200-300 words.`\n          },\n          {\n            role: \"user\",\n            content: `Create a future-self narrative for someone pursuing a career in ${career} with current skills in: ${skillsList}`\n          }\n        ],\n        max_completion_tokens: 400,\n      });\n\n      return response.choices[0].message.content || \"Your future self awaits - a journey of growth, learning, and meaningful impact in your chosen field.\";\n    } catch (error) {\n      console.error(\"Error generating future self narrative:\", error);\n      return \"Your future self holds incredible potential. With dedication and continuous learning, you'll build a fulfilling career that makes a meaningful impact.\";\n    }\n  }\n\n  private serializeProfileForEmbedding(profileData: any): string {\n    const parts = [];\n    \n    if (profileData.currentRole) parts.push(`Current Role: ${profileData.currentRole}`);\n    if (profileData.targetRole) parts.push(`Target Role: ${profileData.targetRole}`);\n    if (profileData.experience) parts.push(`Years of Experience: ${profileData.experience}`);\n    if (profileData.education) parts.push(`Education: ${profileData.education}`);\n    if (profileData.skills) parts.push(`Skills: ${profileData.skills.map((s: any) => s.skillName).join(\", \")}`);\n    if (profileData.location) parts.push(`Location: ${profileData.location}`);\n    \n    return parts.join(\"\\n\");\n  }\n}\n\nexport const openAIService = new OpenAIService();\n","size_bytes":12665},"server/services/vectorSearch.ts":{"content":"import { storage } from \"../storage\";\nimport { openAIService } from \"./openai\";\nimport type { ProfileEmbedding } from \"@shared/schema\";\n\nexport interface SimilarProfile {\n  userId: string;\n  profileData: any;\n  similarity: number;\n  careerPath?: string;\n  currentRole?: string;\n  skills?: string[];\n}\n\nexport class VectorSearchService {\n  // Find career doppelgangers based on profile similarity\n  async findCareerDoppelgangers(userId: string, limit = 10): Promise<SimilarProfile[]> {\n    try {\n      // Get user's profile embedding\n      const userEmbedding = await storage.getProfileEmbedding(userId);\n      \n      if (!userEmbedding || !userEmbedding.embedding) {\n        throw new Error(\"User profile embedding not found. Please update your profile first.\");\n      }\n\n      // Find similar profiles\n      const similarProfiles = await storage.findSimilarProfiles(\n        userEmbedding.embedding,\n        limit + 1 // +1 to exclude self\n      );\n\n      // Filter out the user's own profile and format results\n      return similarProfiles\n        .filter(profile => profile.userId !== userId)\n        .slice(0, limit)\n        .map(profile => ({\n          userId: profile.userId,\n          profileData: profile.profileData,\n          similarity: (profile as any).similarity || 0,\n          careerPath: this.generateCareerPathSummary((profile.profileData as any)?.careerPaths || []),\n          currentRole: (profile.profileData as any)?.currentRole,\n          skills: (profile.profileData as any)?.skills?.map((s: any) => s.skillName) || [],\n        }));\n    } catch (error) {\n      console.error(\"Error finding career doppelgangers:\", error);\n      throw new Error(\"Failed to find career doppelgangers. Please try again.\");\n    }\n  }\n\n  // Update or create profile embedding\n  async updateProfileEmbedding(userId: string): Promise<void> {\n    try {\n      // Get user's complete profile data\n      const user = await storage.getUser(userId);\n      const profile = await storage.getUserProfile(userId);\n      const skills = await storage.getUserSkills(userId);\n      const careerPaths = await storage.getUserCareerPaths(userId);\n\n      if (!user) {\n        throw new Error(\"User not found\");\n      }\n\n      // Combine all profile data\n      const profileData = {\n        userId,\n        name: `${user.firstName || ''} ${user.lastName || ''}`.trim(),\n        email: user.email,\n        currentRole: profile?.currentRole,\n        targetRole: profile?.targetRole,\n        experience: profile?.experience,\n        education: profile?.education,\n        location: profile?.location,\n        skills: skills,\n        careerPaths: careerPaths,\n      };\n\n      // Generate embedding\n      const embedding = await openAIService.generateProfileEmbedding(profileData);\n\n      // Store embedding\n      await storage.upsertProfileEmbedding(userId, embedding, profileData);\n    } catch (error) {\n      console.error(\"Error updating profile embedding:\", error);\n      throw new Error(\"Failed to update profile embedding. Please try again.\");\n    }\n  }\n\n  // Search for relevant classes based on user profile\n  async findRelevantClasses(userId: string, query?: string): Promise<any[]> {\n    try {\n      // Get user's skills and target role\n      const profile = await storage.getUserProfile(userId);\n      const skills = await storage.getUserSkills(userId);\n      const skillGap = await storage.getLatestSkillGap(userId);\n\n      // Get all active classes\n      let classes = await storage.getActiveClasses();\n\n      // Filter based on user's needs\n      if (skillGap) {\n        const neededSkills = [\n          ...(skillGap.missingSkills || []),\n          ...(skillGap.improvementSkills || [])\n        ].map(skill => skill.toLowerCase());\n\n        classes = classes.filter(cls => {\n          const classSkills = (cls.skills || []).map(skill => skill.toLowerCase());\n          return classSkills.some(skill => \n            neededSkills.some(needed => skill.includes(needed) || needed.includes(skill))\n          );\n        });\n      }\n\n      // If query provided, filter by title/description\n      if (query) {\n        const queryLower = query.toLowerCase();\n        classes = classes.filter(cls =>\n          cls.title.toLowerCase().includes(queryLower) ||\n          cls.description?.toLowerCase().includes(queryLower) ||\n          (cls.skills || []).some(skill => skill.toLowerCase().includes(queryLower))\n        );\n      }\n\n      // Add relevance scoring\n      return classes.map(cls => ({\n        ...cls,\n        relevanceScore: this.calculateClassRelevance(cls, skills, skillGap),\n        spotsLeft: Math.max(0, (cls.maxStudents || 0) - (cls.currentStudents || 0)),\n      }))\n      .sort((a, b) => b.relevanceScore - a.relevanceScore);\n    } catch (error) {\n      console.error(\"Error finding relevant classes:\", error);\n      throw new Error(\"Failed to find relevant classes. Please try again.\");\n    }\n  }\n\n  private generateCareerPathSummary(careerPaths: any[]): string {\n    if (!careerPaths || careerPaths.length === 0) return \"\";\n\n    const sortedPaths = careerPaths.sort((a, b) => \n      new Date(a.startDate || 0).getTime() - new Date(b.startDate || 0).getTime()\n    );\n\n    return sortedPaths\n      .map(path => path.role)\n      .join(\" → \");\n  }\n\n  private calculateClassRelevance(\n    classItem: any,\n    userSkills: any[],\n    skillGap: any\n  ): number {\n    let score = 0;\n\n    const classSkills = (classItem.skills || []).map((s: string) => s.toLowerCase());\n    const userSkillNames = userSkills.map(s => s.skillName.toLowerCase());\n    const missingSkills = (skillGap?.missingSkills || []).map((s: string) => s.toLowerCase());\n    const improvementSkills = (skillGap?.improvementSkills || []).map((s: string) => s.toLowerCase());\n\n    // High score for classes that teach missing skills\n    classSkills.forEach((skill: string) => {\n      if (missingSkills.some((missing: string) => skill.includes(missing) || missing.includes(skill))) {\n        score += 10;\n      }\n      if (improvementSkills.some((improvement: string) => skill.includes(improvement) || improvement.includes(skill))) {\n        score += 5;\n      }\n    });\n\n    // Moderate score for classes related to existing skills (for advancement)\n    classSkills.forEach((skill: string) => {\n      if (userSkillNames.some((userSkill: string) => skill.includes(userSkill) || userSkill.includes(skill))) {\n        score += 2;\n      }\n    });\n\n    // Boost for classes with available spots\n    const spotsLeft = Math.max(0, (classItem.maxStudents || 0) - (classItem.currentStudents || 0));\n    if (spotsLeft > 0) {\n      score += Math.min(spotsLeft / 5, 3); // Up to 3 bonus points for availability\n    }\n\n    return score;\n  }\n}\n\nexport const vectorSearchService = new VectorSearchService();\n","size_bytes":6750},"client/src/components/AIGuidance.tsx":{"content":"import { useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\ninterface AIGuidanceProps {\n  guidance?: {\n    id: string;\n    response: string;\n    createdAt: string;\n    guidanceType: string;\n  };\n  userProfile?: {\n    currentRole?: string;\n    targetRole?: string;\n  };\n}\n\nexport default function AIGuidance({ guidance, userProfile }: AIGuidanceProps) {\n  const { toast } = useToast();\n\n  const generateGuidanceMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/ai-guidance\");\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"AI guidance generated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate AI guidance\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (!guidance) {\n    return (\n      <Card className=\"border-border\">\n        <CardHeader>\n          <CardTitle className=\"text-lg\">AI Career Guidance</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-8\">\n            <i className=\"fas fa-robot text-4xl text-muted-foreground mb-4\"></i>\n            <h3 className=\"text-lg font-semibold text-foreground mb-2\">No guidance yet</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Get personalized AI-powered career advice based on your profile and goals.\n            </p>\n            <Button\n              onClick={() => generateGuidanceMutation.mutate()}\n              disabled={generateGuidanceMutation.isPending || !userProfile?.targetRole}\n              className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n              data-testid=\"button-generate-guidance\"\n            >\n              {generateGuidanceMutation.isPending ? \"Generating...\" : \"Get AI Guidance\"}\n            </Button>\n            {!userProfile?.targetRole && (\n              <p className=\"text-xs text-muted-foreground mt-2\">\n                Set your target role in profile to get guidance\n              </p>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      month: \"short\",\n      day: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n  };\n\n  return (\n    <Card className=\"border-border\">\n      <CardHeader>\n        <CardTitle className=\"text-lg\">AI Career Guidance</CardTitle>\n        <p className=\"text-xs text-muted-foreground\">\n          Generated {formatDate(guidance.createdAt)}\n        </p>\n      </CardHeader>\n      <CardContent>\n        <div className=\"bg-gradient-to-r from-primary/10 to-accent/10 rounded-lg p-4 border border-primary/20\">\n          <div className=\"flex items-start\">\n            <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center mr-3 flex-shrink-0\">\n              <i className=\"fas fa-robot text-white text-sm\"></i>\n            </div>\n            <div className=\"flex-1\">\n              <p className=\"text-sm text-foreground leading-relaxed mb-3\" data-testid=\"text-ai-guidance\">\n                {guidance.response}\n              </p>\n              <div className=\"flex gap-2\">\n                <Button\n                  variant=\"link\"\n                  size=\"sm\"\n                  onClick={() => generateGuidanceMutation.mutate()}\n                  disabled={generateGuidanceMutation.isPending}\n                  className=\"text-primary hover:underline p-0 h-auto\"\n                  data-testid=\"button-refresh-guidance\"\n                >\n                  {generateGuidanceMutation.isPending ? \"Generating...\" : \"Get new guidance\"}\n                </Button>\n                <Button\n                  variant=\"link\"\n                  size=\"sm\"\n                  className=\"text-primary hover:underline p-0 h-auto\"\n                  data-testid=\"button-detailed-guidance\"\n                >\n                  Get detailed guidance\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4853},"client/src/components/ChatWidget.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\ninterface ChatMessage {\n  id: string;\n  message: string;\n  response?: string;\n  isBot: boolean;\n  createdAt: string;\n}\n\nexport default function ChatWidget() {\n  const { toast } = useToast();\n  const [isOpen, setIsOpen] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const scrollAreaRef = useRef<HTMLDivElement>(null);\n\n  const { data: chatHistory, refetch: refetchHistory } = useQuery({\n    queryKey: [\"/api/chat/history\", { limit: 20 }],\n    enabled: isOpen,\n    retry: false,\n  });\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async (message: string) => {\n      const response = await apiRequest(\"POST\", \"/api/chat\", { message });\n      return response.json();\n    },\n    onSuccess: () => {\n      setNewMessage(\"\");\n      refetchHistory();\n      // Scroll to bottom after message is sent\n      setTimeout(() => {\n        if (scrollAreaRef.current) {\n          scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight;\n        }\n      }, 100);\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Scroll to bottom when chat history updates\n  useEffect(() => {\n    if (chatHistory && scrollAreaRef.current) {\n      setTimeout(() => {\n        if (scrollAreaRef.current) {\n          scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight;\n        }\n      }, 100);\n    }\n  }, [chatHistory]);\n\n  const handleSendMessage = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newMessage.trim() || sendMessageMutation.isPending) return;\n    \n    sendMessageMutation.mutate(newMessage.trim());\n  };\n\n  const toggleChat = () => {\n    setIsOpen(!isOpen);\n  };\n\n  // Group messages by conversation pairs\n  const groupedMessages: Array<{ userMessage: ChatMessage; botResponse?: ChatMessage }> = [];\n  if (chatHistory && Array.isArray(chatHistory)) {\n    const messages = [...(chatHistory || [])].reverse(); // Most recent first, then reverse for display\n    \n    for (let i = 0; i < messages.length; i++) {\n      const message = messages[i];\n      if (!message.isBot) {\n        // Find the corresponding bot response\n        const botResponse = messages.find((m, idx) => \n          idx > i && m.isBot && new Date(m.createdAt).getTime() > new Date(message.createdAt).getTime()\n        );\n        \n        groupedMessages.push({\n          userMessage: message,\n          botResponse,\n        });\n      }\n    }\n  }\n\n  return (\n    <div className=\"fixed bottom-6 right-6 z-50\">\n      {/* Chat Interface */}\n      {isOpen && (\n        <Card className=\"absolute bottom-16 right-0 w-80 h-96 shadow-xl border border-border\">\n          <CardHeader className=\"bg-primary text-primary-foreground p-4 rounded-t-xl\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center\">\n                <div className=\"w-8 h-8 bg-white/20 rounded-full flex items-center justify-center mr-2\">\n                  <i className=\"fas fa-robot text-sm\"></i>\n                </div>\n                <div>\n                  <h4 className=\"font-medium\">Career Mirror Assistant</h4>\n                  <p className=\"text-xs opacity-90\">Online now</p>\n                </div>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={toggleChat}\n                className=\"text-white/80 hover:text-white hover:bg-white/10 p-1 h-auto\"\n                data-testid=\"button-close-chat\"\n              >\n                <i className=\"fas fa-times\"></i>\n              </Button>\n            </div>\n          </CardHeader>\n          \n          <ScrollArea className=\"flex-1 h-64 p-4\" ref={scrollAreaRef}>\n            <div className=\"space-y-4\">\n              {/* Initial bot message */}\n              <div className=\"flex items-start\">\n                <div className=\"w-6 h-6 bg-primary rounded-full flex items-center justify-center mr-2 flex-shrink-0\">\n                  <i className=\"fas fa-robot text-white text-xs\"></i>\n                </div>\n                <div className=\"bg-secondary p-3 rounded-lg max-w-xs\">\n                  <p className=\"text-sm\">\n                    Hi! I'm here to help you find the perfect classes and career guidance. What are you looking for today?\n                  </p>\n                </div>\n              </div>\n\n              {/* Chat history */}\n              {groupedMessages.map((conversation, index) => (\n                <div key={conversation.userMessage.id} className=\"space-y-2\">\n                  {/* User message */}\n                  <div className=\"flex justify-end\">\n                    <div className=\"bg-primary text-primary-foreground p-3 rounded-lg max-w-xs\">\n                      <p className=\"text-sm\" data-testid={`user-message-${index}`}>\n                        {conversation.userMessage.message}\n                      </p>\n                    </div>\n                  </div>\n                  \n                  {/* Bot response */}\n                  {conversation.botResponse && (\n                    <div className=\"flex items-start\">\n                      <div className=\"w-6 h-6 bg-primary rounded-full flex items-center justify-center mr-2 flex-shrink-0\">\n                        <i className=\"fas fa-robot text-white text-xs\"></i>\n                      </div>\n                      <div className=\"bg-secondary p-3 rounded-lg max-w-xs\">\n                        <p className=\"text-sm\" data-testid={`bot-response-${index}`}>\n                          {conversation.botResponse.message}\n                        </p>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              ))}\n\n              {/* Loading indicator */}\n              {sendMessageMutation.isPending && (\n                <div className=\"flex items-start\">\n                  <div className=\"w-6 h-6 bg-primary rounded-full flex items-center justify-center mr-2 flex-shrink-0\">\n                    <i className=\"fas fa-robot text-white text-xs\"></i>\n                  </div>\n                  <div className=\"bg-secondary p-3 rounded-lg\">\n                    <div className=\"flex space-x-1\">\n                      <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\"></div>\n                      <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\" style={{ animationDelay: \"0.1s\" }}></div>\n                      <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\" style={{ animationDelay: \"0.2s\" }}></div>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </ScrollArea>\n          \n          <CardContent className=\"p-4 border-t border-border\">\n            <form onSubmit={handleSendMessage} className=\"flex gap-2\">\n              <Input\n                value={newMessage}\n                onChange={(e) => setNewMessage(e.target.value)}\n                placeholder=\"Type your message...\"\n                className=\"flex-1\"\n                disabled={sendMessageMutation.isPending}\n                data-testid=\"input-chat-message\"\n              />\n              <Button\n                type=\"submit\"\n                disabled={sendMessageMutation.isPending || !newMessage.trim()}\n                className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n                data-testid=\"button-send-message\"\n              >\n                <i className=\"fas fa-paper-plane text-sm\"></i>\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Chat Toggle Button */}\n      <Button\n        onClick={toggleChat}\n        className=\"w-14 h-14 bg-primary text-primary-foreground rounded-full shadow-lg hover:bg-primary/90 transition-all hover:scale-105 flex items-center justify-center\"\n        data-testid=\"button-toggle-chat\"\n      >\n        <i className={`fas ${isOpen ? \"fa-times\" : \"fa-comments\"} text-lg`}></i>\n      </Button>\n    </div>\n  );\n}\n","size_bytes":8900},"client/src/components/ClassCard.tsx":{"content":"import { useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\ninterface ClassCardProps {\n  classData: {\n    id: string;\n    title: string;\n    description: string;\n    category: string;\n    instructor?: string;\n    price: string;\n    duration: string;\n    location: string;\n    isOnline: boolean;\n    startDate: string;\n    maxStudents: number;\n    currentStudents: number;\n    skills: string[];\n    difficulty: string;\n    spotsLeft: number;\n    relevanceScore?: number;\n  };\n}\n\nexport default function ClassCard({ classData }: ClassCardProps) {\n  const { toast } = useToast();\n\n  const enrollMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", `/api/classes/${classData.id}/enroll`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Successfully enrolled in class\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/classes\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/enrollments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to enroll in class\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString(\"en-US\", {\n      weekday: \"short\",\n      month: \"short\",\n      day: \"numeric\",\n    });\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category.toLowerCase()) {\n      case \"programming\":\n        return \"bg-accent/10 text-accent\";\n      case \"design\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"business\":\n        return \"bg-green-100 text-green-800\";\n      case \"marketing\":\n        return \"bg-purple-100 text-purple-800\";\n      case \"data science\":\n        return \"bg-indigo-100 text-indigo-800\";\n      default:\n        return \"bg-secondary text-secondary-foreground\";\n    }\n  };\n\n  const getSpotsColor = (spotsLeft: number) => {\n    if (spotsLeft <= 2) return \"text-red-600\";\n    if (spotsLeft <= 5) return \"text-orange-600\";\n    return \"text-green-600\";\n  };\n\n  return (\n    <Card className=\"border-border hover:shadow-lg transition-shadow\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex-1\">\n            <div className=\"flex items-center mb-2\">\n              <Badge className={`${getCategoryColor(classData.category)} mr-2`}>\n                {classData.category}\n              </Badge>\n              <span className={`text-sm font-medium ${getSpotsColor(classData.spotsLeft)}`}>\n                {classData.spotsLeft > 0 ? `${classData.spotsLeft} spots left` : \"Full\"}\n              </span>\n            </div>\n            \n            <h3 className=\"text-lg font-semibold text-foreground mb-2\" data-testid=\"text-class-title\">\n              {classData.title}\n            </h3>\n            \n            <p className=\"text-muted-foreground text-sm mb-3 line-clamp-2\" data-testid=\"text-class-description\">\n              {classData.description}\n            </p>\n            \n            <div className=\"flex items-center text-sm text-muted-foreground space-x-4 mb-3\">\n              <div className=\"flex items-center\">\n                <i className=\"fas fa-calendar mr-1\"></i>\n                <span data-testid=\"text-class-date\">\n                  {classData.startDate ? `Starts ${formatDate(classData.startDate)}` : \"Date TBD\"}\n                </span>\n              </div>\n              <div className=\"flex items-center\">\n                <i className=\"fas fa-clock mr-1\"></i>\n                <span data-testid=\"text-class-duration\">{classData.duration}</span>\n              </div>\n              <div className=\"flex items-center\">\n                <i className={`${classData.isOnline ? \"fas fa-globe\" : \"fas fa-map-marker-alt\"} mr-1`}></i>\n                <span data-testid=\"text-class-location\">\n                  {classData.isOnline ? \"Online\" : classData.location}\n                </span>\n              </div>\n            </div>\n\n            {classData.instructor && (\n              <div className=\"flex items-center text-sm text-muted-foreground mb-3\">\n                <i className=\"fas fa-user mr-1\"></i>\n                <span data-testid=\"text-class-instructor\">{classData.instructor}</span>\n              </div>\n            )}\n\n            {classData.skills && classData.skills.length > 0 && (\n              <div className=\"flex flex-wrap gap-1 mb-3\">\n                {classData.skills.slice(0, 4).map((skill, index) => (\n                  <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                    {skill}\n                  </Badge>\n                ))}\n                {classData.skills.length > 4 && (\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    +{classData.skills.length - 4} more\n                  </Badge>\n                )}\n              </div>\n            )}\n\n            {classData.difficulty && (\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                {classData.difficulty.charAt(0).toUpperCase() + classData.difficulty.slice(1)}\n              </Badge>\n            )}\n          </div>\n          \n          <div className=\"text-right ml-4\">\n            <div className=\"text-2xl font-bold text-foreground mb-2\" data-testid=\"text-class-price\">\n              ${classData.price}\n            </div>\n            <Button\n              onClick={() => enrollMutation.mutate()}\n              disabled={enrollMutation.isPending || classData.spotsLeft <= 0}\n              className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n              data-testid=\"button-enroll\"\n            >\n              {enrollMutation.isPending ? \"Enrolling...\" : classData.spotsLeft > 0 ? \"Enroll Now\" : \"Full\"}\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6607},"client/src/components/DoppelgangerCard.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface DoppelgangerCardProps {\n  doppelganger: {\n    userId: string;\n    profileData: {\n      name?: string;\n      currentRole?: string;\n      experience?: number;\n      skills?: Array<{ skillName: string; proficiency: number }>;\n      careerPaths?: Array<{\n        role: string;\n        company?: string;\n        startDate?: string;\n        endDate?: string;\n        isCurrent?: boolean;\n      }>;\n    };\n    similarity: number;\n    careerPath?: string;\n    currentRole?: string;\n    skills?: string[];\n  };\n}\n\nexport default function DoppelgangerCard({ doppelganger }: DoppelgangerCardProps) {\n  const getInitials = (name?: string) => {\n    if (!name) return \"??\";\n    const parts = name.split(\" \");\n    return parts.length >= 2 \n      ? `${parts[0][0]}${parts[parts.length - 1][0]}`.toUpperCase()\n      : name.slice(0, 2).toUpperCase();\n  };\n\n  const getGradientClass = (similarity: number) => {\n    if (similarity >= 0.8) return \"from-primary to-accent\";\n    if (similarity >= 0.6) return \"from-accent to-primary\";\n    return \"from-secondary to-muted\";\n  };\n\n  const generateCareerSummary = () => {\n    if (doppelganger.careerPath) {\n      return doppelganger.careerPath;\n    }\n    \n    const paths = doppelganger.profileData?.careerPaths;\n    if (!paths || paths.length === 0) {\n      return \"Career path information not available\";\n    }\n\n    const sortedPaths = paths.sort((a, b) => \n      new Date(a.startDate || \"1970-01-01\").getTime() - new Date(b.startDate || \"1970-01-01\").getTime()\n    );\n\n    const pathSummary = sortedPaths.map(path => path.role).join(\" → \");\n    const timeframe = paths.length > 1 ? `(${paths.length} roles)` : \"(1 role)\";\n    \n    return `${pathSummary} ${timeframe}`;\n  };\n\n  const displayName = doppelganger.profileData?.name || \"Anonymous Professional\";\n  const displayRole = doppelganger.currentRole || doppelganger.profileData?.currentRole || \"Professional\";\n  const displaySkills = doppelganger.skills || doppelganger.profileData?.skills?.map(s => s.skillName) || [];\n  const matchPercentage = Math.round(doppelganger.similarity * 100);\n\n  return (\n    <div className=\"flex items-center p-4 bg-secondary rounded-lg hover:bg-secondary/80 transition-colors\">\n      <div className={`w-12 h-12 bg-gradient-to-br ${getGradientClass(doppelganger.similarity)} rounded-full flex items-center justify-center text-white font-semibold`}>\n        {getInitials(displayName)}\n      </div>\n      \n      <div className=\"ml-4 flex-1\">\n        <h4 className=\"font-semibold text-foreground\" data-testid=\"text-doppelganger-name\">\n          {displayName} - {displayRole}\n        </h4>\n        <p className=\"text-sm text-muted-foreground mb-2\" data-testid=\"text-doppelganger-path\">\n          {generateCareerSummary()}\n        </p>\n        \n        {displaySkills.length > 0 && (\n          <div className=\"flex items-center gap-1 flex-wrap\">\n            {displaySkills.slice(0, 3).map((skill, index) => (\n              <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                {skill}\n              </Badge>\n            ))}\n            {displaySkills.length > 3 && (\n              <Badge variant=\"outline\" className=\"text-xs\">\n                +{displaySkills.length - 3} more\n              </Badge>\n            )}\n          </div>\n        )}\n      </div>\n      \n      <div className=\"text-right\">\n        <div className=\"text-sm font-semibold text-foreground mb-1\" data-testid=\"text-doppelganger-match\">\n          {matchPercentage}% match\n        </div>\n        <Button \n          variant=\"link\" \n          size=\"sm\" \n          className=\"text-primary hover:underline p-0 h-auto\"\n          data-testid=\"button-view-path\"\n        >\n          View Path\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3835},"client/src/components/FileUpload.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function FileUpload() {\n  const { toast } = useToast();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [dragActive, setDragActive] = useState(false);\n\n  const uploadMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append(\"resume\", file);\n\n      // Simulate upload progress\n      setUploadProgress(10);\n      \n      const response = await fetch(\"/api/profile/upload-resume\", {\n        method: \"POST\",\n        body: formData,\n        credentials: \"include\",\n      });\n\n      setUploadProgress(50);\n\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`${response.status}: ${text}`);\n      }\n\n      setUploadProgress(90);\n      const result = await response.json();\n      setUploadProgress(100);\n      \n      return result;\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Success\",\n        description: \"Resume uploaded and parsed successfully\",\n      });\n      setUploadProgress(0);\n      \n      // Invalidate relevant queries\n      queryClient.invalidateQueries({ queryKey: [\"/api/profile\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n    },\n    onError: (error: Error) => {\n      setUploadProgress(0);\n      \n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      \n      toast({\n        title: \"Upload Failed\",\n        description: error.message || \"Failed to upload resume\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileSelect = (file: File) => {\n    // Validate file type\n    const allowedTypes = [\n      'application/pdf',\n      'application/msword',\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      'text/plain'\n    ];\n\n    if (!allowedTypes.includes(file.type)) {\n      toast({\n        title: \"Invalid File Type\",\n        description: \"Please upload a PDF, DOC, DOCX, or TXT file\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate file size (5MB limit)\n    if (file.size > 5 * 1024 * 1024) {\n      toast({\n        title: \"File Too Large\",\n        description: \"Please upload a file smaller than 5MB\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    uploadMutation.mutate(file);\n  };\n\n  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      handleFileSelect(file);\n    }\n  };\n\n  const handleDrag = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === \"dragenter\" || e.type === \"dragover\") {\n      setDragActive(true);\n    } else if (e.type === \"dragleave\") {\n      setDragActive(false);\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n    \n    const file = e.dataTransfer.files?.[0];\n    if (file) {\n      handleFileSelect(file);\n    }\n  };\n\n  const openFileDialog = () => {\n    fileInputRef.current?.click();\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <Card\n        className={`border-2 border-dashed transition-colors cursor-pointer ${\n          dragActive\n            ? \"border-primary bg-primary/5\"\n            : \"border-border hover:border-primary/50\"\n        }`}\n        onDragEnter={handleDrag}\n        onDragLeave={handleDrag}\n        onDragOver={handleDrag}\n        onDrop={handleDrop}\n        onClick={openFileDialog}\n        data-testid=\"file-upload-area\"\n      >\n        <CardContent className=\"p-8 text-center\">\n          <div className=\"space-y-4\">\n            <div className={`w-16 h-16 mx-auto rounded-full flex items-center justify-center ${\n              dragActive ? \"bg-primary text-primary-foreground\" : \"bg-secondary text-secondary-foreground\"\n            }`}>\n              <i className=\"fas fa-cloud-upload-alt text-2xl\"></i>\n            </div>\n            \n            <div>\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n                {dragActive ? \"Drop your file here\" : \"Upload your CV/Resume\"}\n              </h3>\n              <p className=\"text-muted-foreground text-sm mb-4\">\n                Drag and drop your file here, or click to browse\n              </p>\n              <p className=\"text-xs text-muted-foreground\">\n                Supports PDF, DOC, DOCX, and TXT files up to 5MB\n              </p>\n            </div>\n\n            <Button\n              variant=\"outline\"\n              disabled={uploadMutation.isPending}\n              className=\"mt-4\"\n              data-testid=\"button-browse-files\"\n            >\n              <i className=\"fas fa-folder-open mr-2\"></i>\n              Browse Files\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Upload Progress */}\n      {uploadMutation.isPending && (\n        <Card className=\"border-border\">\n          <CardContent className=\"p-4\">\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-foreground\">Uploading and parsing resume...</span>\n                <span className=\"text-muted-foreground\">{uploadProgress}%</span>\n              </div>\n              <Progress value={uploadProgress} className=\"w-full\" />\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Hidden file input */}\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        accept=\".pdf,.doc,.docx,.txt\"\n        onChange={handleFileInputChange}\n        className=\"hidden\"\n        data-testid=\"file-input\"\n      />\n\n      {/* Upload Instructions */}\n      <div className=\"bg-muted/50 rounded-lg p-4\">\n        <h4 className=\"font-medium text-foreground mb-2\">What happens after upload?</h4>\n        <ul className=\"text-sm text-muted-foreground space-y-1\">\n          <li className=\"flex items-center\">\n            <i className=\"fas fa-check text-green-500 mr-2 text-xs\"></i>\n            AI will extract your skills, experience, and career history\n          </li>\n          <li className=\"flex items-center\">\n            <i className=\"fas fa-check text-green-500 mr-2 text-xs\"></i>\n            Your profile will be automatically updated\n          </li>\n          <li className=\"flex items-center\">\n            <i className=\"fas fa-check text-green-500 mr-2 text-xs\"></i>\n            You'll get personalized career recommendations\n          </li>\n          <li className=\"flex items-center\">\n            <i className=\"fas fa-check text-green-500 mr-2 text-xs\"></i>\n            Career doppelgänger matching will be enabled\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7403},"client/src/components/Navigation.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n\nexport default function Navigation() {\n  const { user } = useAuth();\n  const [location] = useLocation();\n\n  const getInitials = (firstName?: string, lastName?: string) => {\n    const first = firstName?.charAt(0) || \"\";\n    const last = lastName?.charAt(0) || \"\";\n    return (first + last) || \"U\";\n  };\n\n  return (\n    <nav className=\"bg-card border-b border-border sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center space-x-4\">\n            <Link href=\"/\" className=\"flex items-center space-x-2\" data-testid=\"link-home\">\n              <div className=\"w-8 h-8 rounded-lg bg-gradient-to-br from-primary to-accent flex items-center justify-center\">\n                <i className=\"fas fa-graduation-cap text-white text-lg\"></i>\n              </div>\n              <span className=\"text-xl font-bold text-foreground\">Career Mirror</span>\n            </Link>\n          </div>\n          \n          <div className=\"hidden md:flex items-center space-x-6\">\n            <Link \n              href=\"/\" \n              className={`transition-colors ${\n                location === \"/\" ? \"text-foreground\" : \"text-muted-foreground hover:text-foreground\"\n              }`}\n              data-testid=\"link-dashboard\"\n            >\n              Dashboard\n            </Link>\n            <Link \n              href=\"/profile\" \n              className={`transition-colors ${\n                location === \"/profile\" ? \"text-foreground\" : \"text-muted-foreground hover:text-foreground\"\n              }`}\n              data-testid=\"link-profile\"\n            >\n              My Profile\n            </Link>\n            <a href=\"#\" className=\"text-muted-foreground hover:text-foreground transition-colors\">\n              Find Classes\n            </a>\n            <a href=\"#\" className=\"text-muted-foreground hover:text-foreground transition-colors\">\n              Career Guidance\n            </a>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            {user ? (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\" data-testid=\"button-user-menu\">\n                    <Avatar className=\"h-8 w-8\">\n                      <AvatarImage src={(user as any)?.profileImageUrl || undefined} alt={(user as any)?.firstName || \"User\"} />\n                      <AvatarFallback>{getInitials((user as any)?.firstName, (user as any)?.lastName)}</AvatarFallback>\n                    </Avatar>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n                  <DropdownMenuLabel className=\"font-normal\">\n                    <div className=\"flex flex-col space-y-1\">\n                      <p className=\"text-sm font-medium leading-none\">\n                        {(user as any)?.firstName && (user as any)?.lastName ? `${(user as any).firstName} ${(user as any).lastName}` : \"User\"}\n                      </p>\n                      <p className=\"text-xs leading-none text-muted-foreground\">\n                        {(user as any)?.email}\n                      </p>\n                    </div>\n                  </DropdownMenuLabel>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem asChild>\n                    <Link href=\"/profile\" data-testid=\"menuitem-profile\">\n                      <i className=\"fas fa-user mr-2 h-4 w-4\"></i>\n                      <span>Profile</span>\n                    </Link>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <i className=\"fas fa-cog mr-2 h-4 w-4\"></i>\n                    <span>Settings</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem\n                    onClick={() => window.location.href = \"/api/logout\"}\n                    data-testid=\"menuitem-logout\"\n                  >\n                    <i className=\"fas fa-sign-out-alt mr-2 h-4 w-4\"></i>\n                    <span>Log out</span>\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            ) : (\n              <div className=\"flex items-center space-x-2\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => window.location.href = \"/api/login\"}\n                  data-testid=\"button-signin\"\n                >\n                  Sign In\n                </Button>\n                <Button \n                  onClick={() => window.location.href = \"/api/login\"}\n                  className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n                  data-testid=\"button-getstarted\"\n                >\n                  Get Started\n                </Button>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":5449},"client/src/components/ProfileCompletion.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\n\ninterface ProfileCompletionProps {\n  user?: {\n    firstName?: string;\n    lastName?: string;\n    email?: string;\n  };\n  profile?: {\n    currentRole?: string;\n    targetRole?: string;\n    education?: string;\n    resumeText?: string;\n    profileCompletion?: number;\n  };\n  skills?: Array<{\n    skillName: string;\n    proficiency: number;\n  }>;\n}\n\nexport default function ProfileCompletion({ user, profile, skills }: ProfileCompletionProps) {\n  const completionScore = profile?.profileCompletion || 0;\n\n  const completionItems = [\n    {\n      label: \"Basic information\",\n      completed: !!(user?.firstName && user?.email),\n      icon: \"fas fa-user\",\n    },\n    {\n      label: \"Current role\",\n      completed: !!profile?.currentRole,\n      icon: \"fas fa-briefcase\",\n    },\n    {\n      label: \"Target role\",\n      completed: !!profile?.targetRole,\n      icon: \"fas fa-target\",\n    },\n    {\n      label: \"Skills & interests\",\n      completed: !!(skills && skills.length > 0),\n      icon: \"fas fa-cogs\",\n    },\n    {\n      label: \"Upload CV/Resume\",\n      completed: !!profile?.resumeText,\n      icon: \"fas fa-file-alt\",\n    },\n  ];\n\n  const nextIncompleteItem = completionItems.find(item => !item.completed);\n\n  return (\n    <Card className=\"border-border\">\n      <CardHeader>\n        <CardTitle className=\"text-lg\">Complete Your Profile</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\">Profile completion</span>\n            <span className=\"text-sm font-medium text-foreground\" data-testid=\"text-completion-percentage\">\n              {completionScore}%\n            </span>\n          </div>\n          \n          <Progress value={completionScore} className=\"w-full h-2\" />\n          \n          <div className=\"space-y-3 mt-4\">\n            {completionItems.map((item, index) => (\n              <div key={index} className=\"flex items-center text-sm\" data-testid={`completion-item-${index}`}>\n                <i className={`${item.completed ? \"fas fa-check-circle text-green-500\" : \"fas fa-circle text-muted-foreground/40\"} mr-2`}></i>\n                <span className={item.completed ? \"text-foreground\" : \"text-muted-foreground\"}>\n                  {item.label}\n                </span>\n              </div>\n            ))}\n          </div>\n          \n          {nextIncompleteItem && (\n            <div className=\"mt-4 pt-4 border-t border-border\">\n              <div className=\"mb-2\">\n                <span className=\"text-sm font-medium text-foreground\">Next step:</span>\n                <span className=\"text-sm text-muted-foreground ml-1\">{nextIncompleteItem.label}</span>\n              </div>\n              \n              {nextIncompleteItem.label === \"Upload CV/Resume\" ? (\n                <Button \n                  className=\"w-full bg-accent text-accent-foreground hover:bg-accent/90\"\n                  onClick={() => window.location.href = \"/profile\"}\n                  data-testid=\"button-upload-resume\"\n                >\n                  <i className=\"fas fa-upload mr-2\"></i>\n                  Upload CV/Resume\n                </Button>\n              ) : (\n                <Button \n                  variant=\"outline\"\n                  className=\"w-full\"\n                  onClick={() => window.location.href = \"/profile\"}\n                  data-testid=\"button-complete-profile\"\n                >\n                  <i className={`${nextIncompleteItem.icon} mr-2`}></i>\n                  Complete Profile\n                </Button>\n              )}\n            </div>\n          )}\n          \n          {completionScore === 100 && (\n            <div className=\"mt-4 pt-4 border-t border-border text-center\">\n              <div className=\"flex items-center justify-center text-green-600 mb-2\">\n                <i className=\"fas fa-trophy mr-2\"></i>\n                <span className=\"font-medium\">Profile Complete!</span>\n              </div>\n              <p className=\"text-sm text-muted-foreground\">\n                Your profile is fully optimized for the best career recommendations.\n              </p>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4439},"client/src/components/Sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n\n  const navItems = [\n    { href: \"/\", icon: \"fas fa-home\", label: \"Dashboard\" },\n    { href: \"#\", icon: \"fas fa-search\", label: \"Find Classes\" },\n    { href: \"/career-map\", icon: \"fas fa-route\", label: \"Career Map\" },\n    { href: \"#\", icon: \"fas fa-users\", label: \"Doppelgängers\" },\n    { href: \"/achievements\", icon: \"fas fa-trophy\", label: \"Achievements\" },\n    { href: \"/lifestyle\", icon: \"fas fa-chart-pie\", label: \"Lifestyle\" },\n    { href: \"/profile\", icon: \"fas fa-user\", label: \"Profile\" },\n  ];\n\n  return (\n    <aside className=\"hidden lg:flex lg:flex-col lg:w-64 lg:fixed lg:inset-y-0 lg:pt-16 bg-card border-r border-border\">\n      <div className=\"flex-1 flex flex-col min-h-0 pt-5 pb-4 overflow-y-auto\">\n        <div className=\"flex-1 px-3 space-y-1\">\n          <nav className=\"space-y-2\">\n            {navItems.map((item) => {\n              const isActive = item.href === location;\n              \n              if (item.href === \"#\") {\n                return (\n                  <a\n                    key={item.label}\n                    href={item.href}\n                    className=\"text-muted-foreground hover:bg-secondary hover:text-secondary-foreground group flex items-center px-3 py-2 text-sm font-medium rounded-md transition-colors\"\n                    data-testid={`nav-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    <i className={`${item.icon} mr-3 text-sm`}></i>\n                    {item.label}\n                  </a>\n                );\n              }\n\n              return (\n                <Link\n                  key={item.href}\n                  href={item.href}\n                  className={`group flex items-center px-3 py-2 text-sm font-medium rounded-md transition-colors ${\n                    isActive\n                      ? \"bg-secondary text-secondary-foreground\"\n                      : \"text-muted-foreground hover:bg-secondary hover:text-secondary-foreground\"\n                  }`}\n                  data-testid={`nav-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                >\n                  <i className={`${item.icon} mr-3 text-sm`}></i>\n                  {item.label}\n                </Link>\n              );\n            })}\n          </nav>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":2414},"client/src/components/SkillGapAnalysis.tsx":{"content":"import { useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\ninterface SkillGapAnalysisProps {\n  skillGap?: {\n    id: string;\n    targetRole: string;\n    missingSkills: string[];\n    improvementSkills: string[];\n    strongSkills: string[];\n    recommendations: any[];\n    createdAt: string;\n  };\n  userSkills: Array<{\n    skillName: string;\n    proficiency: number;\n  }>;\n}\n\nexport default function SkillGapAnalysis({ skillGap, userSkills }: SkillGapAnalysisProps) {\n  const { toast } = useToast();\n\n  const generateAnalysisMutation = useMutation({\n    mutationFn: async (targetRole: string) => {\n      await apiRequest(\"POST\", \"/api/skill-gap-analysis\", { targetRole });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Skill gap analysis updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/skill-gap-analysis\"] });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate skill gap analysis\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFindCourse = (skill: string) => {\n    // In a real implementation, this would search for courses\n    toast({\n      title: \"Coming Soon\",\n      description: `Finding courses for ${skill}...`,\n    });\n  };\n\n  if (!skillGap) {\n    return (\n      <Card className=\"border-border\">\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Skill Gap Analysis</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-8\">\n            <i className=\"fas fa-chart-line text-4xl text-muted-foreground mb-4\"></i>\n            <h3 className=\"text-lg font-semibold text-foreground mb-2\">No analysis yet</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Set your target role in your profile to get personalized skill gap analysis.\n            </p>\n            <Button \n              variant=\"outline\"\n              onClick={() => window.location.href = \"/profile\"}\n              data-testid=\"button-set-target-role\"\n            >\n              Set Target Role\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"border-border\">\n      <CardHeader>\n        <CardTitle className=\"text-lg\">Skill Gap Analysis</CardTitle>\n        <p className=\"text-sm text-muted-foreground\" data-testid=\"text-target-role\">\n          Based on your target role: <strong>{skillGap.targetRole}</strong>\n        </p>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-3\">\n          {/* Missing Skills */}\n          {skillGap.missingSkills && skillGap.missingSkills.length > 0 && (\n            <>\n              <h4 className=\"font-medium text-foreground mb-2\">Missing Skills</h4>\n              {skillGap.missingSkills.map((skill, index) => (\n                <div\n                  key={index}\n                  className=\"flex items-center justify-between p-3 bg-red-50 dark:bg-red-950/20 border border-red-200 dark:border-red-800 rounded-lg\"\n                  data-testid={`missing-skill-${index}`}\n                >\n                  <div>\n                    <span className=\"text-sm font-medium text-red-800 dark:text-red-200\">{skill}</span>\n                    <p className=\"text-xs text-red-600 dark:text-red-400\">Missing skill</p>\n                  </div>\n                  <Button\n                    variant=\"link\"\n                    size=\"sm\"\n                    className=\"text-primary hover:underline p-0 h-auto\"\n                    onClick={() => handleFindCourse(skill)}\n                    data-testid={`button-find-course-${index}`}\n                  >\n                    Find Course\n                  </Button>\n                </div>\n              ))}\n            </>\n          )}\n\n          {/* Improvement Skills */}\n          {skillGap.improvementSkills && skillGap.improvementSkills.length > 0 && (\n            <>\n              <h4 className=\"font-medium text-foreground mb-2 mt-4\">Needs Improvement</h4>\n              {skillGap.improvementSkills.map((skill, index) => (\n                <div\n                  key={index}\n                  className=\"flex items-center justify-between p-3 bg-yellow-50 dark:bg-yellow-950/20 border border-yellow-200 dark:border-yellow-800 rounded-lg\"\n                  data-testid={`improvement-skill-${index}`}\n                >\n                  <div>\n                    <span className=\"text-sm font-medium text-yellow-800 dark:text-yellow-200\">{skill}</span>\n                    <p className=\"text-xs text-yellow-600 dark:text-yellow-400\">Needs improvement</p>\n                  </div>\n                  <Button\n                    variant=\"link\"\n                    size=\"sm\"\n                    className=\"text-primary hover:underline p-0 h-auto\"\n                    onClick={() => handleFindCourse(skill)}\n                    data-testid={`button-improve-skill-${index}`}\n                  >\n                    Find Course\n                  </Button>\n                </div>\n              ))}\n            </>\n          )}\n\n          {/* Strong Skills */}\n          {skillGap.strongSkills && skillGap.strongSkills.length > 0 && (\n            <>\n              <h4 className=\"font-medium text-foreground mb-2 mt-4\">Strong Skills</h4>\n              {skillGap.strongSkills.map((skill, index) => (\n                <div\n                  key={index}\n                  className=\"flex items-center justify-between p-3 bg-green-50 dark:bg-green-950/20 border border-green-200 dark:border-green-800 rounded-lg\"\n                  data-testid={`strong-skill-${index}`}\n                >\n                  <div>\n                    <span className=\"text-sm font-medium text-green-800 dark:text-green-200\">{skill}</span>\n                    <p className=\"text-xs text-green-600 dark:text-green-400\">Strong skill</p>\n                  </div>\n                  <i className=\"fas fa-check-circle text-green-500\"></i>\n                </div>\n              ))}\n            </>\n          )}\n        </div>\n\n        <div className=\"mt-4 pt-4 border-t border-border\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => generateAnalysisMutation.mutate(skillGap.targetRole)}\n            disabled={generateAnalysisMutation.isPending}\n            data-testid=\"button-refresh-analysis\"\n          >\n            {generateAnalysisMutation.isPending ? \"Analyzing...\" : \"Refresh Analysis\"}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7280},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useEffect } from \"react\";\nimport Navigation from \"@/components/Navigation\";\nimport Sidebar from \"@/components/Sidebar\";\nimport ClassCard from \"@/components/ClassCard\";\nimport DoppelgangerCard from \"@/components/DoppelgangerCard\";\nimport SkillGapAnalysis from \"@/components/SkillGapAnalysis\";\nimport ProfileCompletion from \"@/components/ProfileCompletion\";\nimport AIGuidance from \"@/components/AIGuidance\";\nimport ChatWidget from \"@/components/ChatWidget\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useState } from \"react\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\n  const [selectedLocation, setSelectedLocation] = useState(\"\");\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: dashboardData, isLoading: isDashboardLoading, error } = useQuery({\n    queryKey: [\"/api/dashboard\"],\n    enabled: isAuthenticated,\n    retry: false,\n  });\n\n  const { data: classes, refetch: refetchClasses } = useQuery({\n    queryKey: [\"/api/classes/recommended\", { search: searchQuery, category: selectedCategory, location: selectedLocation }],\n    enabled: isAuthenticated,\n    retry: false,\n  });\n\n  // Handle search\n  const handleSearch = () => {\n    refetchClasses();\n  };\n\n  if (error && isUnauthorizedError(error as Error)) {\n    return null; // Will redirect in useEffect\n  }\n\n  if (isLoading || isDashboardLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navigation />\n        <div className=\"flex\">\n          <Sidebar />\n          <main className=\"lg:pl-64 flex-1 p-8\">\n            <div className=\"animate-pulse space-y-6\">\n              <div className=\"h-8 bg-muted rounded w-1/3\"></div>\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n                <div className=\"lg:col-span-2 space-y-6\">\n                  <div className=\"h-48 bg-muted rounded-xl\"></div>\n                  <div className=\"h-96 bg-muted rounded-xl\"></div>\n                </div>\n                <div className=\"space-y-6\">\n                  <div className=\"h-48 bg-muted rounded-xl\"></div>\n                  <div className=\"h-48 bg-muted rounded-xl\"></div>\n                </div>\n              </div>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  if (!dashboardData) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navigation />\n        <div className=\"flex\">\n          <Sidebar />\n          <main className=\"lg:pl-64 flex-1 p-8\">\n            <div className=\"text-center\">\n              <h2 className=\"text-2xl font-semibold text-foreground\">Unable to load dashboard</h2>\n              <p className=\"text-muted-foreground mt-2\">Please try refreshing the page.</p>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      <div className=\"flex\">\n        <Sidebar />\n        <main className=\"lg:pl-64 flex-1\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n            {/* Welcome Header */}\n            <div className=\"mb-8\">\n              <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n                <div>\n                  <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"text-welcome\">\n                    Welcome back, {(dashboardData as any)?.user?.firstName || 'there'}!\n                  </h1>\n                  <p className=\"mt-1 text-muted-foreground\">Discover new opportunities and advance your career path</p>\n                </div>\n                <div className=\"mt-4 sm:mt-0\">\n                  <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                    <i className=\"fas fa-circle text-green-500 text-xs\"></i>\n                    <span data-testid=\"text-profile-completion\">\n                      Profile {(dashboardData as any)?.profile?.profileCompletion || 0}% complete\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Quick Actions Bar */}\n            <div className=\"mb-8\">\n              <Card className=\"border-border\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex flex-col lg:flex-row gap-4\">\n                    <div className=\"flex-1\">\n                      <div className=\"relative\">\n                        <i className=\"fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\"></i>\n                        <Input\n                          type=\"text\"\n                          placeholder=\"Search classes, workshops, or skills...\"\n                          className=\"pl-10\"\n                          value={searchQuery}\n                          onChange={(e) => setSearchQuery(e.target.value)}\n                          onKeyPress={(e) => e.key === 'Enter' && handleSearch()}\n                          data-testid=\"input-search\"\n                        />\n                      </div>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                        <SelectTrigger className=\"w-48\" data-testid=\"select-category\">\n                          <SelectValue placeholder=\"All Categories\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"\">All Categories</SelectItem>\n                          <SelectItem value=\"Programming\">Programming</SelectItem>\n                          <SelectItem value=\"Design\">Design</SelectItem>\n                          <SelectItem value=\"Business\">Business</SelectItem>\n                          <SelectItem value=\"Marketing\">Marketing</SelectItem>\n                          <SelectItem value=\"Data Science\">Data Science</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <Select value={selectedLocation} onValueChange={setSelectedLocation}>\n                        <SelectTrigger className=\"w-48\" data-testid=\"select-location\">\n                          <SelectValue placeholder=\"Near Me\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"\">Near Me</SelectItem>\n                          <SelectItem value=\"Online\">Online</SelectItem>\n                          <SelectItem value=\"Downtown Campus\">Downtown Campus</SelectItem>\n                          <SelectItem value=\"North Campus\">North Campus</SelectItem>\n                          <SelectItem value=\"South Campus\">South Campus</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <Button onClick={handleSearch} data-testid=\"button-search\">\n                        Search\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n              <div className=\"lg:col-span-2 space-y-8\">\n                {/* Available Classes Section */}\n                <section>\n                  <div className=\"flex items-center justify-between mb-6\">\n                    <h2 className=\"text-2xl font-semibold text-foreground\">Recommended Classes & Workshops</h2>\n                    <div className=\"flex items-center text-sm text-muted-foreground\">\n                      <i className=\"fas fa-circle text-green-500 text-xs mr-2\"></i>\n                      <span>Live availability</span>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    {classes && Array.isArray(classes) && classes.length > 0 ? (\n                      classes.slice(0, 5).map((classItem: any) => (\n                        <ClassCard\n                          key={classItem.id}\n                          classData={classItem}\n                          data-testid={`card-class-${classItem.id}`}\n                        />\n                      ))\n                    ) : (\n                      <Card className=\"border-border\">\n                        <CardContent className=\"p-6 text-center\">\n                          <i className=\"fas fa-search text-4xl text-muted-foreground mb-4\"></i>\n                          <h3 className=\"text-lg font-semibold text-foreground mb-2\">No classes found</h3>\n                          <p className=\"text-muted-foreground\">Try adjusting your search criteria or check back later for new opportunities.</p>\n                        </CardContent>\n                      </Card>\n                    )}\n                  </div>\n\n                  {classes && Array.isArray(classes) && classes.length > 5 ? (\n                    <div className=\"text-center mt-6\">\n                      <Button variant=\"outline\" data-testid=\"button-view-all-classes\">\n                        View All Classes\n                      </Button>\n                    </div>\n                  ) : null}\n                </section>\n\n                {/* Career Doppelgängers Section */}\n                <section>\n                  <h2 className=\"text-2xl font-semibold text-foreground mb-6\">Your Career Doppelgängers</h2>\n                  <Card className=\"border-border\">\n                    <CardHeader>\n                      <CardTitle className=\"text-base\">Similar Career Paths</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-muted-foreground mb-4\">\n                        Based on your profile, here are professionals with similar backgrounds and their career journeys:\n                      </p>\n\n                      {(dashboardData as any)?.doppelgangers && Array.isArray((dashboardData as any).doppelgangers) && (dashboardData as any).doppelgangers.length > 0 ? (\n                        <div className=\"space-y-4\">\n                          {((dashboardData as any)?.doppelgangers || []).map((doppelganger: any, index: number) => (\n                            <DoppelgangerCard\n                              key={index}\n                              doppelganger={doppelganger}\n                              data-testid={`card-doppelganger-${index}`}\n                            />\n                          ))}\n                        </div>\n                      ) : (\n                        <div className=\"text-center py-8\">\n                          <i className=\"fas fa-users text-4xl text-muted-foreground mb-4\"></i>\n                          <h3 className=\"text-lg font-semibold text-foreground mb-2\">No matches yet</h3>\n                          <p className=\"text-muted-foreground\">Complete your profile to find career doppelgängers with similar backgrounds.</p>\n                        </div>\n                      )}\n\n                      {(dashboardData as any)?.doppelgangers && Array.isArray((dashboardData as any).doppelgangers) && (dashboardData as any).doppelgangers.length > 0 && (\n                        <div className=\"mt-4 text-center\">\n                          <Button variant=\"link\" className=\"text-primary\" data-testid=\"button-view-all-matches\">\n                            View All Matches\n                          </Button>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                </section>\n              </div>\n\n              <div className=\"space-y-8\">\n                {/* Profile Completion Card */}\n                <ProfileCompletion\n                  user={(dashboardData as any)?.user}\n                  profile={(dashboardData as any)?.profile}\n                  skills={(dashboardData as any)?.skills}\n                />\n\n                {/* Skill Gap Analysis */}\n                <SkillGapAnalysis\n                  skillGap={(dashboardData as any)?.skillGap}\n                  userSkills={(dashboardData as any)?.skills}\n                />\n\n                {/* AI Career Guidance */}\n                <AIGuidance\n                  guidance={(dashboardData as any)?.latestGuidance}\n                  userProfile={(dashboardData as any)?.profile}\n                />\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n\n      {/* Chat Widget */}\n      <ChatWidget />\n    </div>\n  );\n}\n","size_bytes":13392},"client/src/pages/landing.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function Landing() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      // Don't show toast on initial load, only if user was logged out\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-pulse\">\n          <div className=\"w-8 h-8 rounded-lg bg-primary/20 mb-4\"></div>\n          <div className=\"text-lg text-muted-foreground\">Loading...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Navigation */}\n      <nav className=\"bg-card border-b border-border sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-8 h-8 rounded-lg bg-gradient-to-br from-primary to-accent flex items-center justify-center\">\n                  <i className=\"fas fa-graduation-cap text-white text-lg\"></i>\n                </div>\n                <span className=\"text-xl font-bold text-foreground\">Career Mirror</span>\n              </div>\n            </div>\n            \n            <div className=\"hidden md:flex items-center space-x-6\">\n              <a href=\"#features\" className=\"text-muted-foreground hover:text-foreground transition-colors\">Features</a>\n              <a href=\"#how-it-works\" className=\"text-muted-foreground hover:text-foreground transition-colors\">How It Works</a>\n              <a href=\"#about\" className=\"text-muted-foreground hover:text-foreground transition-colors\">About</a>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <Button \n                variant=\"outline\" \n                onClick={() => window.location.href = \"/api/login\"}\n                data-testid=\"button-signin\"\n              >\n                Sign In\n              </Button>\n              <Button \n                onClick={() => window.location.href = \"/api/login\"}\n                className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n                data-testid=\"button-getstarted\"\n              >\n                Get Started\n              </Button>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Hero Section */}\n      <section className=\"relative py-20 px-4 text-center bg-gradient-to-br from-background to-secondary/20\">\n        <div className=\"max-w-4xl mx-auto\">\n          <h1 className=\"text-5xl font-bold text-foreground mb-6\" data-testid=\"text-hero-title\">\n            Find Your Career Mirror\n          </h1>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\" data-testid=\"text-hero-subtitle\">\n            Discover professionals with similar backgrounds, identify skill gaps, and get AI-powered guidance to accelerate your career journey.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button \n              size=\"lg\" \n              onClick={() => window.location.href = \"/api/login\"}\n              className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n              data-testid=\"button-start-journey\"\n            >\n              Start Your Journey\n            </Button>\n            <Button \n              size=\"lg\" \n              variant=\"outline\"\n              data-testid=\"button-learn-more\"\n            >\n              Learn More\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section id=\"features\" className=\"py-20 px-4 bg-background\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl font-bold text-foreground mb-4\" data-testid=\"text-features-title\">\n              Powerful Career Intelligence\n            </h2>\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\" data-testid=\"text-features-subtitle\">\n              Our AI-powered platform provides deep insights into your career potential and connects you with the right opportunities.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            <Card className=\"border-border hover:shadow-lg transition-shadow\" data-testid=\"card-feature-doppelgangers\">\n              <CardHeader>\n                <div className=\"w-12 h-12 rounded-lg bg-primary/10 flex items-center justify-center mb-4\">\n                  <i className=\"fas fa-users text-primary text-xl\"></i>\n                </div>\n                <CardTitle>Career Doppelgängers</CardTitle>\n                <CardDescription>\n                  Find professionals with similar backgrounds and see their career trajectories to inspire your own path.\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card className=\"border-border hover:shadow-lg transition-shadow\" data-testid=\"card-feature-skillgap\">\n              <CardHeader>\n                <div className=\"w-12 h-12 rounded-lg bg-accent/10 flex items-center justify-center mb-4\">\n                  <i className=\"fas fa-chart-line text-accent text-xl\"></i>\n                </div>\n                <CardTitle>Skill Gap Analysis</CardTitle>\n                <CardDescription>\n                  Identify missing skills for your target role and get personalized recommendations for courses and resources.\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card className=\"border-border hover:shadow-lg transition-shadow\" data-testid=\"card-feature-ai\">\n              <CardHeader>\n                <div className=\"w-12 h-12 rounded-lg bg-primary/10 flex items-center justify-center mb-4\">\n                  <i className=\"fas fa-robot text-primary text-xl\"></i>\n                </div>\n                <CardTitle>AI Career Guidance</CardTitle>\n                <CardDescription>\n                  Get personalized advice from your \"future self\" and receive actionable next steps for your career.\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card className=\"border-border hover:shadow-lg transition-shadow\" data-testid=\"card-feature-classes\">\n              <CardHeader>\n                <div className=\"w-12 h-12 rounded-lg bg-accent/10 flex items-center justify-center mb-4\">\n                  <i className=\"fas fa-graduation-cap text-accent text-xl\"></i>\n                </div>\n                <CardTitle>Smart Class Recommendations</CardTitle>\n                <CardDescription>\n                  Discover relevant courses and workshops based on your skill gaps and career goals.\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card className=\"border-border hover:shadow-lg transition-shadow\" data-testid=\"card-feature-lifestyle\">\n              <CardHeader>\n                <div className=\"w-12 h-12 rounded-lg bg-primary/10 flex items-center justify-center mb-4\">\n                  <i className=\"fas fa-balance-scale text-primary text-xl\"></i>\n                </div>\n                <CardTitle>Lifestyle Simulation</CardTitle>\n                <CardDescription>\n                  Understand the impact of career choices on salary, work-life balance, and stress levels.\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card className=\"border-border hover:shadow-lg transition-shadow\" data-testid=\"card-feature-progress\">\n              <CardHeader>\n                <div className=\"w-12 h-12 rounded-lg bg-accent/10 flex items-center justify-center mb-4\">\n                  <i className=\"fas fa-trophy text-accent text-xl\"></i>\n                </div>\n                <CardTitle>Progress Tracking</CardTitle>\n                <CardDescription>\n                  Monitor your skill development and career advancement with detailed analytics and milestones.\n                </CardDescription>\n              </CardHeader>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* How It Works Section */}\n      <section id=\"how-it-works\" className=\"py-20 px-4 bg-secondary/20\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl font-bold text-foreground mb-4\" data-testid=\"text-how-it-works-title\">\n              How Career Mirror Works\n            </h2>\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\" data-testid=\"text-how-it-works-subtitle\">\n              Get started in minutes and unlock personalized career insights powered by AI.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <div className=\"text-center\" data-testid=\"step-upload\">\n              <div className=\"w-16 h-16 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-2xl font-bold mx-auto mb-4\">\n                1\n              </div>\n              <h3 className=\"text-xl font-semibold text-foreground mb-3\">Upload Your Profile</h3>\n              <p className=\"text-muted-foreground\">\n                Upload your CV or manually input your skills, experience, and career goals. Our AI will parse and analyze your background.\n              </p>\n            </div>\n\n            <div className=\"text-center\" data-testid=\"step-analyze\">\n              <div className=\"w-16 h-16 rounded-full bg-accent text-accent-foreground flex items-center justify-center text-2xl font-bold mx-auto mb-4\">\n                2\n              </div>\n              <h3 className=\"text-xl font-semibold text-foreground mb-3\">Get AI Analysis</h3>\n              <p className=\"text-muted-foreground\">\n                Receive detailed skill gap analysis, career doppelgänger matches, and personalized recommendations for your target role.\n              </p>\n            </div>\n\n            <div className=\"text-center\" data-testid=\"step-grow\">\n              <div className=\"w-16 h-16 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-2xl font-bold mx-auto mb-4\">\n                3\n              </div>\n              <h3 className=\"text-xl font-semibold text-foreground mb-3\">Accelerate Growth</h3>\n              <p className=\"text-muted-foreground\">\n                Follow AI-guided career advice, enroll in recommended courses, and track your progress toward your career goals.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 px-4 bg-gradient-to-br from-primary to-accent text-white\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <h2 className=\"text-3xl font-bold mb-4\" data-testid=\"text-cta-title\">\n            Ready to Mirror Your Success?\n          </h2>\n          <p className=\"text-xl mb-8 opacity-90\" data-testid=\"text-cta-subtitle\">\n            Join thousands of professionals who have accelerated their careers with AI-powered insights.\n          </p>\n          <Button \n            size=\"lg\" \n            variant=\"secondary\"\n            onClick={() => window.location.href = \"/api/login\"}\n            className=\"bg-white text-primary hover:bg-white/90\"\n            data-testid=\"button-cta-start\"\n          >\n            Start Free Today\n          </Button>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"py-12 px-4 bg-card border-t border-border\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center\">\n            <div className=\"flex items-center space-x-2 mb-4 md:mb-0\">\n              <div className=\"w-6 h-6 rounded bg-gradient-to-br from-primary to-accent flex items-center justify-center\">\n                <i className=\"fas fa-graduation-cap text-white text-sm\"></i>\n              </div>\n              <span className=\"font-semibold text-foreground\">Career Mirror</span>\n            </div>\n            <div className=\"flex space-x-6 text-sm text-muted-foreground\">\n              <a href=\"#\" className=\"hover:text-foreground transition-colors\">Privacy</a>\n              <a href=\"#\" className=\"hover:text-foreground transition-colors\">Terms</a>\n              <a href=\"#\" className=\"hover:text-foreground transition-colors\">Support</a>\n            </div>\n          </div>\n          <div className=\"mt-8 pt-8 border-t border-border text-center text-sm text-muted-foreground\">\n            © 2025 Career Mirror. All rights reserved.\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":13272},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/profile.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useEffect } from \"react\";\nimport Navigation from \"@/components/Navigation\";\nimport Sidebar from \"@/components/Sidebar\";\nimport FileUpload from \"@/components/FileUpload\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\n\nexport default function Profile() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [newSkillName, setNewSkillName] = useState(\"\");\n  const [newSkillProficiency, setNewSkillProficiency] = useState(\"3\");\n  const [profileData, setProfileData] = useState({\n    currentRole: \"\",\n    targetRole: \"\",\n    experience: \"\",\n    education: \"\",\n    location: \"\",\n    salary: \"\",\n  });\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: profile, isLoading: isProfileLoading, error } = useQuery({\n    queryKey: [\"/api/profile\"],\n    enabled: isAuthenticated,\n    retry: false,\n  });\n\n  // Initialize form data when profile loads\n  useEffect(() => {\n    if ((profile as any)?.profile) {\n      setProfileData({\n        currentRole: (profile as any).profile.currentRole || \"\",\n        targetRole: (profile as any).profile.targetRole || \"\",\n        experience: (profile as any).profile.experience?.toString() || \"\",\n        education: (profile as any).profile.education || \"\",\n        location: (profile as any).profile.location || \"\",\n        salary: (profile as any).profile.salary?.toString() || \"\",\n      });\n    }\n  }, [profile]);\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: any) => {\n      await apiRequest(\"POST\", \"/api/profile\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Profile updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/profile\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update profile\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addSkillMutation = useMutation({\n    mutationFn: async (data: any) => {\n      await apiRequest(\"POST\", \"/api/skills\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Skill added successfully\",\n      });\n      setNewSkillName(\"\");\n      setNewSkillProficiency(\"3\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/profile\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to add skill\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteSkillMutation = useMutation({\n    mutationFn: async (skillName: string) => {\n      await apiRequest(\"DELETE\", `/api/skills/${encodeURIComponent(skillName)}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Skill removed successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/profile\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to remove skill\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const generateSkillGapMutation = useMutation({\n    mutationFn: async (targetRole: string) => {\n      await apiRequest(\"POST\", \"/api/skill-gap-analysis\", { targetRole });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Skill gap analysis generated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate skill gap analysis\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (error && isUnauthorizedError(error as Error)) {\n    return null; // Will redirect in useEffect\n  }\n\n  if (isLoading || isProfileLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navigation />\n        <div className=\"flex\">\n          <Sidebar />\n          <main className=\"lg:pl-64 flex-1 p-8\">\n            <div className=\"animate-pulse space-y-6\">\n              <div className=\"h-8 bg-muted rounded w-1/3\"></div>\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                <div className=\"h-96 bg-muted rounded-xl\"></div>\n                <div className=\"h-96 bg-muted rounded-xl\"></div>\n              </div>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  const handleProfileSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    updateProfileMutation.mutate({\n      ...profileData,\n      experience: profileData.experience ? parseInt(profileData.experience) : null,\n      salary: profileData.salary ? parseInt(profileData.salary) : null,\n    });\n  };\n\n  const handleAddSkill = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newSkillName.trim()) return;\n\n    addSkillMutation.mutate({\n      skillName: newSkillName.trim(),\n      proficiency: parseInt(newSkillProficiency),\n    });\n  };\n\n  const handleDeleteSkill = (skillName: string) => {\n    deleteSkillMutation.mutate(skillName);\n  };\n\n  const handleGenerateSkillGap = () => {\n    if (!profileData.targetRole.trim()) {\n      toast({\n        title: \"Target Role Required\",\n        description: \"Please set your target role first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    generateSkillGapMutation.mutate(profileData.targetRole);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      <div className=\"flex\">\n        <Sidebar />\n        <main className=\"lg:pl-64 flex-1\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n            <div className=\"mb-8\">\n              <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"text-profile-title\">My Profile</h1>\n              <p className=\"mt-1 text-muted-foreground\">Manage your career information and skills</p>\n            </div>\n\n            <Tabs defaultValue=\"basic\" className=\"space-y-6\">\n              <TabsList className=\"grid w-full grid-cols-4\">\n                <TabsTrigger value=\"basic\" data-testid=\"tab-basic\">Basic Info</TabsTrigger>\n                <TabsTrigger value=\"skills\" data-testid=\"tab-skills\">Skills</TabsTrigger>\n                <TabsTrigger value=\"resume\" data-testid=\"tab-resume\">Resume</TabsTrigger>\n                <TabsTrigger value=\"career\" data-testid=\"tab-career\">Career Path</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"basic\" className=\"space-y-6\">\n                <Card className=\"border-border\">\n                  <CardHeader>\n                    <CardTitle>Basic Information</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <form onSubmit={handleProfileSubmit} className=\"space-y-6\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"currentRole\">Current Role</Label>\n                          <Input\n                            id=\"currentRole\"\n                            value={profileData.currentRole}\n                            onChange={(e) => setProfileData({ ...profileData, currentRole: e.target.value })}\n                            placeholder=\"e.g., Software Engineer\"\n                            data-testid=\"input-current-role\"\n                          />\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"targetRole\">Target Role</Label>\n                          <Input\n                            id=\"targetRole\"\n                            value={profileData.targetRole}\n                            onChange={(e) => setProfileData({ ...profileData, targetRole: e.target.value })}\n                            placeholder=\"e.g., Senior Software Engineer\"\n                            data-testid=\"input-target-role\"\n                          />\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"experience\">Years of Experience</Label>\n                          <Input\n                            id=\"experience\"\n                            type=\"number\"\n                            min=\"0\"\n                            max=\"50\"\n                            value={profileData.experience}\n                            onChange={(e) => setProfileData({ ...profileData, experience: e.target.value })}\n                            placeholder=\"e.g., 3\"\n                            data-testid=\"input-experience\"\n                          />\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"location\">Location</Label>\n                          <Input\n                            id=\"location\"\n                            value={profileData.location}\n                            onChange={(e) => setProfileData({ ...profileData, location: e.target.value })}\n                            placeholder=\"e.g., San Francisco, CA\"\n                            data-testid=\"input-location\"\n                          />\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"salary\">Current Salary (optional)</Label>\n                          <Input\n                            id=\"salary\"\n                            type=\"number\"\n                            min=\"0\"\n                            value={profileData.salary}\n                            onChange={(e) => setProfileData({ ...profileData, salary: e.target.value })}\n                            placeholder=\"e.g., 120000\"\n                            data-testid=\"input-salary\"\n                          />\n                        </div>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"education\">Education</Label>\n                        <Textarea\n                          id=\"education\"\n                          value={profileData.education}\n                          onChange={(e) => setProfileData({ ...profileData, education: e.target.value })}\n                          placeholder=\"e.g., Bachelor's in Computer Science from Stanford University\"\n                          rows={3}\n                          data-testid=\"textarea-education\"\n                        />\n                      </div>\n\n                      <div className=\"flex gap-4\">\n                        <Button\n                          type=\"submit\"\n                          disabled={updateProfileMutation.isPending}\n                          data-testid=\"button-save-profile\"\n                        >\n                          {updateProfileMutation.isPending ? \"Saving...\" : \"Save Profile\"}\n                        </Button>\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          onClick={handleGenerateSkillGap}\n                          disabled={generateSkillGapMutation.isPending || !profileData.targetRole}\n                          data-testid=\"button-generate-skill-gap\"\n                        >\n                          {generateSkillGapMutation.isPending ? \"Analyzing...\" : \"Generate Skill Gap Analysis\"}\n                        </Button>\n                      </div>\n                    </form>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"skills\" className=\"space-y-6\">\n                <Card className=\"border-border\">\n                  <CardHeader>\n                    <CardTitle>Skills & Expertise</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-6\">\n                      {/* Add New Skill */}\n                      <form onSubmit={handleAddSkill} className=\"flex gap-4\">\n                        <div className=\"flex-1\">\n                          <Input\n                            value={newSkillName}\n                            onChange={(e) => setNewSkillName(e.target.value)}\n                            placeholder=\"Enter skill name\"\n                            data-testid=\"input-new-skill\"\n                          />\n                        </div>\n                        <div className=\"w-32\">\n                          <Select value={newSkillProficiency} onValueChange={setNewSkillProficiency}>\n                            <SelectTrigger data-testid=\"select-proficiency\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"1\">Beginner</SelectItem>\n                              <SelectItem value=\"2\">Basic</SelectItem>\n                              <SelectItem value=\"3\">Intermediate</SelectItem>\n                              <SelectItem value=\"4\">Advanced</SelectItem>\n                              <SelectItem value=\"5\">Expert</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        <Button\n                          type=\"submit\"\n                          disabled={addSkillMutation.isPending || !newSkillName.trim()}\n                          data-testid=\"button-add-skill\"\n                        >\n                          {addSkillMutation.isPending ? \"Adding...\" : \"Add Skill\"}\n                        </Button>\n                      </form>\n\n                      {/* Skills List */}\n                      <div className=\"space-y-4\">\n                        <h3 className=\"text-lg font-semibold text-foreground\">Your Skills</h3>\n                        {(profile as any)?.skills && Array.isArray((profile as any).skills) && (profile as any).skills.length > 0 ? (\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                            {((profile as any)?.skills || []).map((skill: any) => (\n                              <div\n                                key={skill.id}\n                                className=\"flex items-center justify-between p-4 bg-secondary rounded-lg\"\n                                data-testid={`skill-item-${skill.skillName}`}\n                              >\n                                <div className=\"flex-1\">\n                                  <div className=\"flex items-center gap-2\">\n                                    <span className=\"font-medium text-foreground\">{skill.skillName}</span>\n                                    <Badge variant=\"secondary\">\n                                      {skill.proficiency === 1 && \"Beginner\"}\n                                      {skill.proficiency === 2 && \"Basic\"}\n                                      {skill.proficiency === 3 && \"Intermediate\"}\n                                      {skill.proficiency === 4 && \"Advanced\"}\n                                      {skill.proficiency === 5 && \"Expert\"}\n                                    </Badge>\n                                  </div>\n                                  <div className=\"flex items-center mt-2\">\n                                    <div className=\"w-full bg-muted rounded-full h-2 mr-2\">\n                                      <div\n                                        className=\"bg-primary h-2 rounded-full\"\n                                        style={{ width: `${(skill.proficiency / 5) * 100}%` }}\n                                      ></div>\n                                    </div>\n                                  </div>\n                                </div>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => handleDeleteSkill(skill.skillName)}\n                                  disabled={deleteSkillMutation.isPending}\n                                  data-testid={`button-delete-skill-${skill.skillName}`}\n                                >\n                                  <i className=\"fas fa-trash text-destructive\"></i>\n                                </Button>\n                              </div>\n                            ))}\n                          </div>\n                        ) : (\n                          <div className=\"text-center py-8\">\n                            <i className=\"fas fa-plus-circle text-4xl text-muted-foreground mb-4\"></i>\n                            <h3 className=\"text-lg font-semibold text-foreground mb-2\">No skills added yet</h3>\n                            <p className=\"text-muted-foreground\">Add your skills to get personalized recommendations.</p>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"resume\" className=\"space-y-6\">\n                <Card className=\"border-border\">\n                  <CardHeader>\n                    <CardTitle>Resume Upload</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <FileUpload />\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"career\" className=\"space-y-6\">\n                <Card className=\"border-border\">\n                  <CardHeader>\n                    <CardTitle>Career History</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {(profile as any)?.careerPaths && Array.isArray((profile as any).careerPaths) && (profile as any).careerPaths.length > 0 ? (\n                      <div className=\"space-y-4\">\n                        {((profile as any)?.careerPaths || []).map((path: any) => (\n                          <div\n                            key={path.id}\n                            className=\"flex items-start p-4 bg-secondary rounded-lg\"\n                            data-testid={`career-path-${path.id}`}\n                          >\n                            <div className=\"w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center mr-4 flex-shrink-0\">\n                              <i className=\"fas fa-briefcase text-primary\"></i>\n                            </div>\n                            <div className=\"flex-1\">\n                              <h4 className=\"font-semibold text-foreground\">{path.role}</h4>\n                              {path.company && (\n                                <p className=\"text-muted-foreground\">{path.company}</p>\n                              )}\n                              <div className=\"flex items-center text-sm text-muted-foreground mt-1\">\n                                {path.startDate && (\n                                  <span>\n                                    {new Date(path.startDate).toLocaleDateString()} -{\" \"}\n                                    {path.isCurrent ? \"Present\" : path.endDate ? new Date(path.endDate).toLocaleDateString() : \"Present\"}\n                                  </span>\n                                )}\n                                {path.isCurrent && (\n                                  <Badge variant=\"default\" className=\"ml-2\">Current</Badge>\n                                )}\n                              </div>\n                              {path.description && (\n                                <p className=\"text-sm text-muted-foreground mt-2\">{path.description}</p>\n                              )}\n                              {path.skills && path.skills.length > 0 && (\n                                <div className=\"flex flex-wrap gap-1 mt-2\">\n                                  {path.skills.map((skill: string, index: number) => (\n                                    <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                                      {skill}\n                                    </Badge>\n                                  ))}\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-8\">\n                        <i className=\"fas fa-briefcase text-4xl text-muted-foreground mb-4\"></i>\n                        <h3 className=\"text-lg font-semibold text-foreground mb-2\">No career history yet</h3>\n                        <p className=\"text-muted-foreground\">Upload your resume to automatically populate your career history.</p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":23495},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/career-map.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport Navigation from \"@/components/Navigation\";\nimport Sidebar from \"@/components/Sidebar\";\nimport { motion } from \"framer-motion\";\n\ninterface CareerNode {\n  id: string;\n  role: string;\n  company?: string;\n  startDate?: string;\n  endDate?: string;\n  isCurrent: boolean;\n  salary?: number;\n  skills: string[];\n  description?: string;\n  x: number;\n  y: number;\n}\n\ninterface SuggestedPath {\n  role: string;\n  timeframe: string;\n  probability: number;\n  requiredSkills: string[];\n  salaryRange: string;\n}\n\nexport default function CareerMap() {\n  const [selectedNode, setSelectedNode] = useState<CareerNode | null>(null);\n\n  const { data: careerData } = useQuery<{\n    careerPaths: any[];\n    suggestedPaths: SuggestedPath[];\n    skillCount: number;\n    totalExperience: number;\n  }>({\n    queryKey: [\"/api/career-map\"],\n    retry: false,\n  });\n\n  const generateTimelineNodes = (careerPaths: any[]): CareerNode[] => {\n    if (!careerPaths || careerPaths.length === 0) return [];\n\n    const sortedPaths = careerPaths.sort((a, b) => \n      new Date(a.startDate || \"1970-01-01\").getTime() - new Date(b.startDate || \"1970-01-01\").getTime()\n    );\n\n    return sortedPaths.map((path, index) => ({\n      id: path.id,\n      role: path.role,\n      company: path.company,\n      startDate: path.startDate,\n      endDate: path.endDate,\n      isCurrent: path.isCurrent,\n      salary: path.salary,\n      skills: path.skills || [],\n      description: path.description,\n      x: 100 + (index * 200),\n      y: 200 + (Math.sin(index * 0.5) * 50), // Slight curve for visual appeal\n    }));\n  };\n\n  const nodes = careerData ? generateTimelineNodes(careerData.careerPaths || []) : [];\n  const suggestedPaths: SuggestedPath[] = careerData?.suggestedPaths || [];\n\n  const formatDate = (dateString?: string) => {\n    if (!dateString) return \"Present\";\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      month: \"short\",\n      year: \"numeric\",\n    });\n  };\n\n  const calculateYearsBetween = (start?: string, end?: string) => {\n    const startDate = new Date(start || Date.now());\n    const endDate = new Date(end || Date.now());\n    return Math.max(0, endDate.getFullYear() - startDate.getFullYear());\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      <div className=\"flex\">\n        <Sidebar />\n        <main className=\"lg:pl-64 flex-1\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.5 }}\n            >\n              <div className=\"mb-8\">\n                <h1 className=\"text-3xl font-bold text-foreground mb-2\">\n                  Career Map\n                </h1>\n                <p className=\"text-muted-foreground\">\n                  Visualize your career journey and explore potential growth paths\n                </p>\n              </div>\n\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n                {/* Career Timeline Visualization */}\n                <div className=\"lg:col-span-2\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Career Timeline</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      {nodes.length > 0 ? (\n                        <div className=\"relative\">\n                          {/* SVG Timeline */}\n                          <svg\n                            width=\"100%\"\n                            height=\"400\"\n                            viewBox=\"0 0 800 400\"\n                            className=\"border rounded-lg bg-muted/20\"\n                          >\n                            {/* Timeline line */}\n                            <line\n                              x1=\"50\"\n                              y1=\"200\"\n                              x2=\"750\"\n                              y2=\"200\"\n                              stroke=\"hsl(var(--border))\"\n                              strokeWidth=\"2\"\n                              strokeDasharray=\"5,5\"\n                            />\n\n                            {/* Career nodes */}\n                            {nodes.map((node, index) => (\n                              <g key={node.id}>\n                                {/* Connection lines to previous node */}\n                                {index > 0 && (\n                                  <line\n                                    x1={nodes[index - 1].x}\n                                    y1={nodes[index - 1].y}\n                                    x2={node.x}\n                                    y2={node.y}\n                                    stroke=\"hsl(var(--primary))\"\n                                    strokeWidth=\"3\"\n                                    opacity=\"0.6\"\n                                  />\n                                )}\n\n                                {/* Node circle */}\n                                <motion.circle\n                                  cx={node.x}\n                                  cy={node.y}\n                                  r={node.isCurrent ? \"20\" : \"15\"}\n                                  fill={node.isCurrent ? \"hsl(var(--primary))\" : \"hsl(var(--secondary))\"}\n                                  stroke={node.isCurrent ? \"hsl(var(--primary-foreground))\" : \"hsl(var(--border))\"}\n                                  strokeWidth=\"3\"\n                                  className=\"cursor-pointer\"\n                                  onClick={() => setSelectedNode(node)}\n                                  whileHover={{ scale: 1.2 }}\n                                  whileTap={{ scale: 0.9 }}\n                                  data-testid={`node-${node.id}`}\n                                />\n\n                                {/* Node label */}\n                                <text\n                                  x={node.x}\n                                  y={node.y - 35}\n                                  textAnchor=\"middle\"\n                                  className=\"text-xs font-medium fill-foreground\"\n                                  onClick={() => setSelectedNode(node)}\n                                  style={{ cursor: \"pointer\" }}\n                                >\n                                  {node.role}\n                                </text>\n\n                                {/* Company label */}\n                                {node.company && (\n                                  <text\n                                    x={node.x}\n                                    y={node.y + 35}\n                                    textAnchor=\"middle\"\n                                    className=\"text-xs fill-muted-foreground\"\n                                  >\n                                    {node.company}\n                                  </text>\n                                )}\n\n                                {/* Date label */}\n                                <text\n                                  x={node.x}\n                                  y={node.y + 50}\n                                  textAnchor=\"middle\"\n                                  className=\"text-xs fill-muted-foreground\"\n                                >\n                                  {formatDate(node.startDate)}\n                                </text>\n                              </g>\n                            ))}\n                          </svg>\n\n                          {/* Legend */}\n                          <div className=\"mt-4 flex items-center gap-6 text-sm text-muted-foreground\">\n                            <div className=\"flex items-center gap-2\">\n                              <div className=\"w-4 h-4 rounded-full bg-primary\"></div>\n                              <span>Current Role</span>\n                            </div>\n                            <div className=\"flex items-center gap-2\">\n                              <div className=\"w-4 h-4 rounded-full bg-secondary border-2 border-border\"></div>\n                              <span>Past Role</span>\n                            </div>\n                          </div>\n                        </div>\n                      ) : (\n                        <div className=\"text-center py-12\">\n                          <i className=\"fas fa-map text-4xl text-muted-foreground mb-4\"></i>\n                          <h3 className=\"text-lg font-semibold text-foreground mb-2\">No Career Data</h3>\n                          <p className=\"text-muted-foreground mb-4\">\n                            Add your career history in your profile to see your career map.\n                          </p>\n                          <Button variant=\"outline\" onClick={() => window.location.href = \"/profile\"}>\n                            Update Profile\n                          </Button>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Side Panel */}\n                <div className=\"space-y-6\">\n                  {/* Selected Node Details */}\n                  {selectedNode && (\n                    <motion.div\n                      initial={{ opacity: 0, x: 20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ duration: 0.3 }}\n                    >\n                      <Card>\n                        <CardHeader>\n                          <CardTitle className=\"text-lg\">Role Details</CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"space-y-4\">\n                          <div>\n                            <h3 className=\"font-semibold text-foreground\" data-testid=\"selected-role\">\n                              {selectedNode.role}\n                            </h3>\n                            {selectedNode.company && (\n                              <p className=\"text-sm text-muted-foreground\" data-testid=\"selected-company\">\n                                {selectedNode.company}\n                              </p>\n                            )}\n                          </div>\n\n                          <div className=\"text-sm\">\n                            <p className=\"text-muted-foreground\">\n                              {formatDate(selectedNode.startDate)} - {formatDate(selectedNode.endDate)}\n                            </p>\n                            <p className=\"text-muted-foreground\">\n                              Duration: {calculateYearsBetween(selectedNode.startDate, selectedNode.endDate)} years\n                            </p>\n                          </div>\n\n                          {selectedNode.salary && (\n                            <div>\n                              <p className=\"text-sm font-medium\">Salary</p>\n                              <p className=\"text-lg font-semibold text-primary\">\n                                ${selectedNode.salary.toLocaleString()}\n                              </p>\n                            </div>\n                          )}\n\n                          {selectedNode.skills.length > 0 && (\n                            <div>\n                              <p className=\"text-sm font-medium mb-2\">Skills Used</p>\n                              <div className=\"flex flex-wrap gap-1\">\n                                {selectedNode.skills.map((skill, index) => (\n                                  <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                                    {skill}\n                                  </Badge>\n                                ))}\n                              </div>\n                            </div>\n                          )}\n\n                          {selectedNode.description && (\n                            <div>\n                              <p className=\"text-sm font-medium mb-1\">Description</p>\n                              <p className=\"text-sm text-muted-foreground\">\n                                {selectedNode.description}\n                              </p>\n                            </div>\n                          )}\n                        </CardContent>\n                      </Card>\n                    </motion.div>\n                  )}\n\n                  {/* Suggested Career Paths */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-lg\">Suggested Next Steps</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      {suggestedPaths.length > 0 ? (\n                        <div className=\"space-y-4\">\n                          {suggestedPaths.map((path, index) => (\n                            <motion.div\n                              key={index}\n                              initial={{ opacity: 0, y: 10 }}\n                              animate={{ opacity: 1, y: 0 }}\n                              transition={{ duration: 0.3, delay: index * 0.1 }}\n                              className=\"p-3 border rounded-lg hover:bg-muted/50 transition-colors\"\n                              data-testid={`suggested-path-${index}`}\n                            >\n                              <div className=\"flex items-center justify-between mb-2\">\n                                <h4 className=\"font-medium text-foreground\">{path.role}</h4>\n                                <Badge\n                                  variant={path.probability >= 0.7 ? \"default\" : path.probability >= 0.4 ? \"secondary\" : \"outline\"}\n                                >\n                                  {Math.round(path.probability * 100)}% match\n                                </Badge>\n                              </div>\n                              \n                              <div className=\"text-sm text-muted-foreground mb-2\">\n                                <p>Timeframe: {path.timeframe}</p>\n                                <p>Salary: {path.salaryRange}</p>\n                              </div>\n\n                              <div className=\"mb-2\">\n                                <p className=\"text-sm font-medium mb-1\">Required Skills:</p>\n                                <div className=\"flex flex-wrap gap-1\">\n                                  {path.requiredSkills.slice(0, 3).map((skill, skillIndex) => (\n                                    <Badge key={skillIndex} variant=\"outline\" className=\"text-xs\">\n                                      {skill}\n                                    </Badge>\n                                  ))}\n                                  {path.requiredSkills.length > 3 && (\n                                    <Badge variant=\"outline\" className=\"text-xs\">\n                                      +{path.requiredSkills.length - 3} more\n                                    </Badge>\n                                  )}\n                                </div>\n                              </div>\n\n                              <Progress \n                                value={path.probability * 100} \n                                className=\"h-2\"\n                                data-testid={`progress-path-${index}`}\n                              />\n                            </motion.div>\n                          ))}\n                        </div>\n                      ) : (\n                        <div className=\"text-center py-6\">\n                          <i className=\"fas fa-compass text-3xl text-muted-foreground mb-3\"></i>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Complete your profile to get personalized career path suggestions.\n                          </p>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n\n                  {/* Career Statistics */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-lg\">Career Statistics</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      {nodes.length > 0 && (\n                        <>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-sm text-muted-foreground\">Total Roles</span>\n                            <span className=\"font-semibold\" data-testid=\"total-roles\">\n                              {nodes.length}\n                            </span>\n                          </div>\n                          \n                          <div className=\"flex justify-between\">\n                            <span className=\"text-sm text-muted-foreground\">Career Span</span>\n                            <span className=\"font-semibold\" data-testid=\"career-span\">\n                              {calculateYearsBetween(nodes[0]?.startDate, nodes[nodes.length - 1]?.endDate || undefined)} years\n                            </span>\n                          </div>\n\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-sm text-muted-foreground\">Unique Skills</span>\n                            <span className=\"font-semibold\" data-testid=\"unique-skills\">\n                              {new Set(nodes.flatMap(node => node.skills)).size}\n                            </span>\n                          </div>\n\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-sm text-muted-foreground\">Companies</span>\n                            <span className=\"font-semibold\" data-testid=\"total-companies\">\n                              {new Set(nodes.map(node => node.company).filter(Boolean)).size}\n                            </span>\n                          </div>\n                        </>\n                      )}\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            </motion.div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":18353},"client/src/pages/lifestyle-simulation.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Navigation from \"@/components/Navigation\";\nimport Sidebar from \"@/components/Sidebar\";\nimport { motion } from \"framer-motion\";\n\ninterface LifestylePreferences {\n  salaryImportance: number;\n  wlbImportance: number;\n  stressTolerance: number;\n  remotePreference: number;\n  travelWillingness: number;\n}\n\ninterface SalaryData {\n  role: string;\n  location: string;\n  p25: number;\n  median: number;\n  p75: number;\n  currency: string;\n  source: string;\n  dataYear: number;\n}\n\ninterface LifestyleMetrics {\n  salary: SalaryData;\n  workLifeBalance: number;\n  stressLevel: number;\n  remoteFlexibility: number;\n  travelRequirement: number;\n  careerGrowth: number;\n}\n\nexport default function LifestyleSimulation() {\n  const { toast } = useToast();\n  const [targetRole, setTargetRole] = useState(\"\");\n  const [targetLocation, setTargetLocation] = useState(\"\");\n  const [preferences, setPreferences] = useState<LifestylePreferences>({\n    salaryImportance: 5,\n    wlbImportance: 5,\n    stressTolerance: 5,\n    remotePreference: 5,\n    travelWillingness: 5,\n  });\n\n  const { data: profileData } = useQuery<{profile: any}>({\n    queryKey: [\"/api/profile\"],\n    retry: false,\n  });\n\n  const { data: simulationData, refetch: refetchSimulation } = useQuery<LifestyleMetrics>({\n    queryKey: [\"/api/lifestyle/simulate\", { role: targetRole, location: targetLocation }],\n    enabled: !!(targetRole && targetLocation),\n    retry: false,\n  });\n\n  const updatePreferencesMutation = useMutation({\n    mutationFn: async (newPreferences: LifestylePreferences) => {\n      await apiRequest(\"PATCH\", \"/api/profile\", newPreferences);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Lifestyle preferences updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/profile\"] });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update preferences\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Set initial values from profile\n  useEffect(() => {\n    if (profileData?.profile) {\n      const profile = (profileData as any).profile;\n      setTargetRole(profile.targetRole || \"\");\n      setTargetLocation(profile.location || \"\");\n      \n      if (profile.salaryImportance !== undefined) {\n        setPreferences({\n          salaryImportance: profile.salaryImportance || 5,\n          wlbImportance: profile.wlbImportance || 5,\n          stressTolerance: profile.stressTolerance || 5,\n          remotePreference: profile.remotePreference || 5,\n          travelWillingness: profile.travelWillingness || 5,\n        });\n      }\n    }\n  }, [profileData]);\n\n  const handleSimulate = () => {\n    if (!targetRole || !targetLocation) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please enter both target role and location\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    refetchSimulation();\n  };\n\n  const handlePreferenceChange = (key: keyof LifestylePreferences, value: number[]) => {\n    const newPreferences = { ...preferences, [key]: value[0] };\n    setPreferences(newPreferences);\n    updatePreferencesMutation.mutate(newPreferences);\n  };\n\n  const getScoreColor = (score: number) => {\n    if (score >= 8) return \"text-green-600\";\n    if (score >= 6) return \"text-yellow-600\";\n    return \"text-red-600\";\n  };\n\n  const getScoreLabel = (score: number) => {\n    if (score >= 8) return \"Excellent\";\n    if (score >= 6) return \"Good\";\n    if (score >= 4) return \"Fair\";\n    return \"Poor\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      <div className=\"flex\">\n        <Sidebar />\n        <main className=\"lg:pl-64 flex-1\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.5 }}\n            >\n              <div className=\"mb-8\">\n                <h1 className=\"text-3xl font-bold text-foreground mb-2\">\n                  Lifestyle Simulation\n                </h1>\n                <p className=\"text-muted-foreground\">\n                  Explore how different career choices impact your lifestyle, salary, and work-life balance\n                </p>\n              </div>\n\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                {/* Input Section */}\n                <motion.div\n                  initial={{ opacity: 0, x: -20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  transition={{ duration: 0.5, delay: 0.1 }}\n                >\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Simulation Parameters</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6\">\n                      <div className=\"space-y-4\">\n                        <div>\n                          <Label htmlFor=\"target-role\">Target Role</Label>\n                          <Input\n                            id=\"target-role\"\n                            value={targetRole}\n                            onChange={(e) => setTargetRole(e.target.value)}\n                            placeholder=\"e.g., Senior Software Engineer\"\n                            data-testid=\"input-target-role\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"target-location\">Target Location</Label>\n                          <Input\n                            id=\"target-location\"\n                            value={targetLocation}\n                            onChange={(e) => setTargetLocation(e.target.value)}\n                            placeholder=\"e.g., San Francisco, CA\"\n                            data-testid=\"input-target-location\"\n                          />\n                        </div>\n                      </div>\n\n                      <Separator />\n\n                      <div className=\"space-y-6\">\n                        <h3 className=\"text-lg font-semibold\">Your Preferences</h3>\n                        \n                        <div className=\"space-y-4\">\n                          <div>\n                            <Label className=\"flex items-center justify-between\">\n                              <span>Salary Importance</span>\n                              <Badge variant=\"outline\" data-testid=\"text-salary-importance\">\n                                {preferences.salaryImportance}/10\n                              </Badge>\n                            </Label>\n                            <Slider\n                              value={[preferences.salaryImportance]}\n                              onValueChange={(value) => handlePreferenceChange(\"salaryImportance\", value)}\n                              max={10}\n                              min={1}\n                              step={1}\n                              className=\"mt-2\"\n                              data-testid=\"slider-salary-importance\"\n                            />\n                          </div>\n\n                          <div>\n                            <Label className=\"flex items-center justify-between\">\n                              <span>Work-Life Balance Importance</span>\n                              <Badge variant=\"outline\" data-testid=\"text-wlb-importance\">\n                                {preferences.wlbImportance}/10\n                              </Badge>\n                            </Label>\n                            <Slider\n                              value={[preferences.wlbImportance]}\n                              onValueChange={(value) => handlePreferenceChange(\"wlbImportance\", value)}\n                              max={10}\n                              min={1}\n                              step={1}\n                              className=\"mt-2\"\n                              data-testid=\"slider-wlb-importance\"\n                            />\n                          </div>\n\n                          <div>\n                            <Label className=\"flex items-center justify-between\">\n                              <span>Stress Tolerance</span>\n                              <Badge variant=\"outline\" data-testid=\"text-stress-tolerance\">\n                                {preferences.stressTolerance}/10\n                              </Badge>\n                            </Label>\n                            <Slider\n                              value={[preferences.stressTolerance]}\n                              onValueChange={(value) => handlePreferenceChange(\"stressTolerance\", value)}\n                              max={10}\n                              min={1}\n                              step={1}\n                              className=\"mt-2\"\n                              data-testid=\"slider-stress-tolerance\"\n                            />\n                          </div>\n\n                          <div>\n                            <Label className=\"flex items-center justify-between\">\n                              <span>Remote Work Preference</span>\n                              <Badge variant=\"outline\" data-testid=\"text-remote-preference\">\n                                {preferences.remotePreference}/10\n                              </Badge>\n                            </Label>\n                            <Slider\n                              value={[preferences.remotePreference]}\n                              onValueChange={(value) => handlePreferenceChange(\"remotePreference\", value)}\n                              max={10}\n                              min={1}\n                              step={1}\n                              className=\"mt-2\"\n                              data-testid=\"slider-remote-preference\"\n                            />\n                          </div>\n\n                          <div>\n                            <Label className=\"flex items-center justify-between\">\n                              <span>Travel Willingness</span>\n                              <Badge variant=\"outline\" data-testid=\"text-travel-willingness\">\n                                {preferences.travelWillingness}/10\n                              </Badge>\n                            </Label>\n                            <Slider\n                              value={[preferences.travelWillingness]}\n                              onValueChange={(value) => handlePreferenceChange(\"travelWillingness\", value)}\n                              max={10}\n                              min={1}\n                              step={1}\n                              className=\"mt-2\"\n                              data-testid=\"slider-travel-willingness\"\n                            />\n                          </div>\n                        </div>\n                      </div>\n\n                      <Button \n                        onClick={handleSimulate}\n                        className=\"w-full\"\n                        disabled={!targetRole || !targetLocation}\n                        data-testid=\"button-simulate\"\n                      >\n                        Run Lifestyle Simulation\n                      </Button>\n                    </CardContent>\n                  </Card>\n                </motion.div>\n\n                {/* Results Section */}\n                <motion.div\n                  initial={{ opacity: 0, x: 20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  transition={{ duration: 0.5, delay: 0.2 }}\n                >\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Simulation Results</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      {simulationData ? (\n                        <div className=\"space-y-6\">\n                          {/* Salary Information */}\n                          <div>\n                            <h3 className=\"text-lg font-semibold mb-4\">Salary Range</h3>\n                            <div className=\"bg-muted p-4 rounded-lg\">\n                              <div className=\"grid grid-cols-3 gap-4 text-center\">\n                                <div>\n                                  <p className=\"text-sm text-muted-foreground\">25th Percentile</p>\n                                  <p className=\"text-lg font-semibold\" data-testid=\"text-salary-p25\">\n                                    ${simulationData.salary.p25.toLocaleString()}\n                                  </p>\n                                </div>\n                                <div>\n                                  <p className=\"text-sm text-muted-foreground\">Median</p>\n                                  <p className=\"text-lg font-semibold text-primary\" data-testid=\"text-salary-median\">\n                                    ${simulationData.salary.median.toLocaleString()}\n                                  </p>\n                                </div>\n                                <div>\n                                  <p className=\"text-sm text-muted-foreground\">75th Percentile</p>\n                                  <p className=\"text-lg font-semibold\" data-testid=\"text-salary-p75\">\n                                    ${simulationData.salary.p75.toLocaleString()}\n                                  </p>\n                                </div>\n                              </div>\n                              <p className=\"text-xs text-muted-foreground mt-2 text-center\">\n                                Data from {simulationData.salary.source} ({simulationData.salary.dataYear})\n                              </p>\n                            </div>\n                          </div>\n\n                          {/* Lifestyle Metrics */}\n                          <div>\n                            <h3 className=\"text-lg font-semibold mb-4\">Lifestyle Metrics</h3>\n                            <div className=\"space-y-4\">\n                              <div>\n                                <div className=\"flex items-center justify-between mb-2\">\n                                  <span className=\"text-sm font-medium\">Work-Life Balance</span>\n                                  <span className={`text-sm font-semibold ${getScoreColor(simulationData.workLifeBalance)}`}>\n                                    {getScoreLabel(simulationData.workLifeBalance)} ({simulationData.workLifeBalance}/10)\n                                  </span>\n                                </div>\n                                <Progress value={simulationData.workLifeBalance * 10} data-testid=\"progress-work-life-balance\" />\n                              </div>\n\n                              <div>\n                                <div className=\"flex items-center justify-between mb-2\">\n                                  <span className=\"text-sm font-medium\">Stress Level</span>\n                                  <span className={`text-sm font-semibold ${getScoreColor(11 - simulationData.stressLevel)}`}>\n                                    {getScoreLabel(11 - simulationData.stressLevel)} ({simulationData.stressLevel}/10)\n                                  </span>\n                                </div>\n                                <Progress value={simulationData.stressLevel * 10} className=\"[&>[data-progress]]:bg-red-500\" data-testid=\"progress-stress-level\" />\n                              </div>\n\n                              <div>\n                                <div className=\"flex items-center justify-between mb-2\">\n                                  <span className=\"text-sm font-medium\">Remote Flexibility</span>\n                                  <span className={`text-sm font-semibold ${getScoreColor(simulationData.remoteFlexibility)}`}>\n                                    {getScoreLabel(simulationData.remoteFlexibility)} ({simulationData.remoteFlexibility}/10)\n                                  </span>\n                                </div>\n                                <Progress value={simulationData.remoteFlexibility * 10} data-testid=\"progress-remote-flexibility\" />\n                              </div>\n\n                              <div>\n                                <div className=\"flex items-center justify-between mb-2\">\n                                  <span className=\"text-sm font-medium\">Travel Requirement</span>\n                                  <span className={`text-sm font-semibold ${getScoreColor(11 - simulationData.travelRequirement)}`}>\n                                    {simulationData.travelRequirement <= 3 ? \"Low\" : simulationData.travelRequirement <= 6 ? \"Medium\" : \"High\"} ({simulationData.travelRequirement}/10)\n                                  </span>\n                                </div>\n                                <Progress value={simulationData.travelRequirement * 10} className=\"[&>[data-progress]]:bg-orange-500\" data-testid=\"progress-travel-requirement\" />\n                              </div>\n\n                              <div>\n                                <div className=\"flex items-center justify-between mb-2\">\n                                  <span className=\"text-sm font-medium\">Career Growth Potential</span>\n                                  <span className={`text-sm font-semibold ${getScoreColor(simulationData.careerGrowth)}`}>\n                                    {getScoreLabel(simulationData.careerGrowth)} ({simulationData.careerGrowth}/10)\n                                  </span>\n                                </div>\n                                <Progress value={simulationData.careerGrowth * 10} data-testid=\"progress-career-growth\" />\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      ) : (\n                        <div className=\"text-center py-8\">\n                          <i className=\"fas fa-chart-line text-4xl text-muted-foreground mb-4\"></i>\n                          <h3 className=\"text-lg font-semibold text-foreground mb-2\">No Simulation Yet</h3>\n                          <p className=\"text-muted-foreground\">\n                            Enter your target role and location, then click \"Run Simulation\" to see detailed lifestyle insights.\n                          </p>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                </motion.div>\n              </div>\n            </motion.div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":19587},"server/routes/career-map.ts":{"content":"import type { Express } from \"express\";\nimport { isAuthenticated } from \"../replitAuth\";\nimport { storage } from \"../storage\";\n\ninterface SuggestedPath {\n  role: string;\n  timeframe: string;\n  probability: number;\n  requiredSkills: string[];\n  salaryRange: string;\n}\n\nexport function registerCareerMapRoutes(app: Express) {\n  // Get career map data including timeline and suggestions\n  app.get('/api/career-map', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n\n      // Get user's career paths\n      const careerPaths = await storage.getUserCareerPaths(userId);\n      \n      // Get user's skills for recommendations\n      const userSkills = await storage.getUserSkills(userId);\n      const skillNames = userSkills.map(skill => skill.skillName);\n\n      // Generate suggested career paths based on current profile\n      const suggestedPaths = generateCareerSuggestions(careerPaths, skillNames);\n\n      res.json({\n        careerPaths,\n        suggestedPaths,\n        skillCount: skillNames.length,\n        totalExperience: calculateTotalExperience(careerPaths),\n      });\n    } catch (error) {\n      console.error(\"Error fetching career map data:\", error);\n      res.status(500).json({ message: \"Failed to fetch career map data\" });\n    }\n  });\n\n  // Get career progression analytics\n  app.get('/api/career-map/analytics', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      \n      const [careerPaths, userSkills] = await Promise.all([\n        storage.getUserCareerPaths(userId),\n        storage.getUserSkills(userId),\n      ]);\n\n      const analytics = {\n        totalRoles: careerPaths.length,\n        careerSpan: calculateCareerSpan(careerPaths),\n        uniqueSkills: new Set(careerPaths.flatMap(path => path.skills || [])).size,\n        companies: new Set(careerPaths.map(path => path.company).filter(Boolean)).size,\n        averageTenure: calculateAverageTenure(careerPaths),\n        salaryGrowth: calculateSalaryGrowth(careerPaths),\n        skillEvolution: analyzeSkillEvolution(careerPaths),\n      };\n\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Error fetching career analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch career analytics\" });\n    }\n  });\n}\n\nfunction generateCareerSuggestions(careerPaths: any[], userSkills: string[]): SuggestedPath[] {\n  if (careerPaths.length === 0) return [];\n\n  const currentRole = careerPaths.find(path => path.isCurrent);\n  const latestRole = currentRole || careerPaths[careerPaths.length - 1];\n  \n  if (!latestRole) return [];\n\n  const suggestions: SuggestedPath[] = [];\n  const currentRoleLower = latestRole.role.toLowerCase();\n\n  // Generate role-specific suggestions\n  if (currentRoleLower.includes(\"junior\") || currentRoleLower.includes(\"associate\")) {\n    // Junior to Mid-level progression\n    const baseRole = currentRoleLower.replace(/junior|associate/g, \"\").trim();\n    suggestions.push({\n      role: `Senior ${baseRole}`,\n      timeframe: \"2-3 years\",\n      probability: 0.8,\n      requiredSkills: [\"Leadership\", \"Mentoring\", \"Advanced Technical Skills\"],\n      salaryRange: \"$80,000 - $120,000\",\n    });\n  } else if (currentRoleLower.includes(\"senior\")) {\n    // Senior to Leadership progression\n    suggestions.push(\n      {\n        role: \"Engineering Manager\",\n        timeframe: \"1-2 years\",\n        probability: 0.6,\n        requiredSkills: [\"Team Management\", \"Project Planning\", \"Strategic Thinking\"],\n        salaryRange: \"$120,000 - $160,000\",\n      },\n      {\n        role: \"Principal Engineer\",\n        timeframe: \"3-4 years\",\n        probability: 0.7,\n        requiredSkills: [\"System Architecture\", \"Technical Leadership\", \"Cross-team Collaboration\"],\n        salaryRange: \"$140,000 - $200,000\",\n      }\n    );\n  } else if (currentRoleLower.includes(\"manager\")) {\n    // Management progression\n    suggestions.push(\n      {\n        role: \"Director of Engineering\",\n        timeframe: \"2-4 years\",\n        probability: 0.5,\n        requiredSkills: [\"Strategic Planning\", \"Budget Management\", \"Organizational Leadership\"],\n        salaryRange: \"$160,000 - $250,000\",\n      },\n      {\n        role: \"VP of Engineering\",\n        timeframe: \"4-6 years\",\n        probability: 0.3,\n        requiredSkills: [\"Executive Leadership\", \"Business Strategy\", \"Organizational Development\"],\n        salaryRange: \"$200,000 - $350,000\",\n      }\n    );\n  }\n\n  // Add skill-based suggestions\n  if (userSkills.some(skill => skill.toLowerCase().includes(\"data\"))) {\n    suggestions.push({\n      role: \"Data Science Manager\",\n      timeframe: \"1-3 years\",\n      probability: 0.6,\n      requiredSkills: [\"Machine Learning\", \"Data Analysis\", \"Team Leadership\"],\n      salaryRange: \"$110,000 - $160,000\",\n    });\n  }\n\n  if (userSkills.some(skill => skill.toLowerCase().includes(\"product\"))) {\n    suggestions.push({\n      role: \"Product Manager\",\n      timeframe: \"6 months - 2 years\",\n      probability: 0.7,\n      requiredSkills: [\"Product Strategy\", \"Market Research\", \"User Experience\"],\n      salaryRange: \"$100,000 - $150,000\",\n    });\n  }\n\n  // Add entrepreneurial path\n  if (careerPaths.length >= 2) {\n    suggestions.push({\n      role: \"Startup Founder/CTO\",\n      timeframe: \"1-5 years\",\n      probability: 0.4,\n      requiredSkills: [\"Business Development\", \"Technical Vision\", \"Risk Management\"],\n      salaryRange: \"Equity-based compensation\",\n    });\n  }\n\n  return suggestions.slice(0, 5); // Limit to top 5 suggestions\n}\n\nfunction calculateTotalExperience(careerPaths: any[]): number {\n  if (careerPaths.length === 0) return 0;\n\n  return careerPaths.reduce((total, path) => {\n    const startDate = new Date(path.startDate || Date.now());\n    const endDate = new Date(path.endDate || Date.now());\n    const years = Math.max(0, endDate.getFullYear() - startDate.getFullYear());\n    return total + years;\n  }, 0);\n}\n\nfunction calculateCareerSpan(careerPaths: any[]): number {\n  if (careerPaths.length === 0) return 0;\n\n  const sortedPaths = careerPaths.sort((a, b) => \n    new Date(a.startDate || \"1970-01-01\").getTime() - new Date(b.startDate || \"1970-01-01\").getTime()\n  );\n\n  const firstRole = sortedPaths[0];\n  const lastRole = sortedPaths[sortedPaths.length - 1];\n\n  const startDate = new Date(firstRole.startDate || Date.now());\n  const endDate = new Date(lastRole.endDate || Date.now());\n\n  return Math.max(0, endDate.getFullYear() - startDate.getFullYear());\n}\n\nfunction calculateAverageTenure(careerPaths: any[]): number {\n  if (careerPaths.length === 0) return 0;\n\n  const totalTenure = careerPaths.reduce((sum, path) => {\n    const startDate = new Date(path.startDate || Date.now());\n    const endDate = new Date(path.endDate || Date.now());\n    const tenure = Math.max(0, endDate.getFullYear() - startDate.getFullYear());\n    return sum + tenure;\n  }, 0);\n\n  return Math.round((totalTenure / careerPaths.length) * 10) / 10;\n}\n\nfunction calculateSalaryGrowth(careerPaths: any[]): number {\n  const pathsWithSalary = careerPaths.filter(path => path.salary).sort((a, b) => \n    new Date(a.startDate || \"1970-01-01\").getTime() - new Date(b.startDate || \"1970-01-01\").getTime()\n  );\n\n  if (pathsWithSalary.length < 2) return 0;\n\n  const firstSalary = pathsWithSalary[0].salary;\n  const lastSalary = pathsWithSalary[pathsWithSalary.length - 1].salary;\n\n  return Math.round(((lastSalary - firstSalary) / firstSalary) * 100);\n}\n\nfunction analyzeSkillEvolution(careerPaths: any[]): { skill: string; frequency: number }[] {\n  const skillCounts: Record<string, number> = {};\n\n  careerPaths.forEach(path => {\n    (path.skills || []).forEach((skill: string) => {\n      skillCounts[skill] = (skillCounts[skill] || 0) + 1;\n    });\n  });\n\n  return Object.entries(skillCounts)\n    .map(([skill, frequency]) => ({ skill, frequency }))\n    .sort((a, b) => b.frequency - a.frequency)\n    .slice(0, 10);\n}","size_bytes":7899},"server/routes/courses.ts":{"content":"import type { Express } from \"express\";\nimport { isAuthenticated } from \"../replitAuth\";\nimport { courseService } from \"../services/courses\";\nimport { storage } from \"../storage\";\n\nexport function registerCourseRoutes(app: Express) {\n  // Search for courses based on skills and providers\n  app.get('/api/courses/search', isAuthenticated, async (req: any, res) => {\n    try {\n      const { skills, providers } = req.query;\n\n      if (!skills) {\n        return res.status(400).json({ \n          message: \"Skills parameter is required\" \n        });\n      }\n\n      // Parse skills and providers from query string\n      const skillsArray = Array.isArray(skills) ? skills : skills.split(',');\n      const providersArray = providers ? \n        (Array.isArray(providers) ? providers : providers.split(',')) : \n        [];\n\n      const courses = await courseService.searchCourses(skillsArray, providersArray);\n      res.json(courses);\n    } catch (error) {\n      console.error(\"Error searching courses:\", error);\n      res.status(500).json({ message: \"Failed to search courses\" });\n    }\n  });\n\n  // Get recommended courses based on skill gaps\n  app.get('/api/courses/recommendations', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      \n      // Get latest skill gap analysis\n      const skillGap = await storage.getLatestSkillGap(userId);\n      \n      if (!skillGap) {\n        return res.status(404).json({ \n          message: \"No skill gap analysis found. Please run skill gap analysis first.\" \n        });\n      }\n\n      const courses = await courseService.getRecommendedCourses(\n        skillGap.missingSkills || [],\n        skillGap.improvementSkills || []\n      );\n\n      res.json({\n        skillGap: {\n          targetRole: skillGap.targetRole,\n          missingSkills: skillGap.missingSkills,\n          improvementSkills: skillGap.improvementSkills,\n        },\n        courses,\n      });\n    } catch (error) {\n      console.error(\"Error getting course recommendations:\", error);\n      res.status(500).json({ message: \"Failed to get course recommendations\" });\n    }\n  });\n\n  // Get course details by external course ID (for future API integrations)\n  app.get('/api/courses/:courseId', isAuthenticated, async (req: any, res) => {\n    try {\n      const { courseId } = req.params;\n      \n      // For now, return a placeholder response\n      // In a real implementation, this would fetch from the actual course provider's API\n      res.json({\n        id: courseId,\n        message: \"Course details would be fetched from external API\",\n        note: \"This endpoint is prepared for future integration with course provider APIs\"\n      });\n    } catch (error) {\n      console.error(\"Error fetching course details:\", error);\n      res.status(500).json({ message: \"Failed to fetch course details\" });\n    }\n  });\n}","size_bytes":2856},"server/routes/lifestyle.ts":{"content":"import type { Express } from \"express\";\nimport { isAuthenticated } from \"../replitAuth\";\nimport { salaryService } from \"../services/salary\";\nimport { storage } from \"../storage\";\n\nexport function registerLifestyleRoutes(app: Express) {\n  // Get lifestyle simulation for a specific role and location\n  app.get('/api/lifestyle/simulate', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { role, location } = req.query;\n\n      if (!role || !location) {\n        return res.status(400).json({ \n          message: \"Role and location are required\" \n        });\n      }\n\n      // Get user preferences from profile\n      const userProfile = await storage.getUserProfile(userId);\n      const preferences = {\n        salaryImportance: userProfile?.salaryImportance || 5,\n        wlbImportance: userProfile?.wlbImportance || 5,\n        stressTolerance: userProfile?.stressTolerance || 5,\n        remotePreference: userProfile?.remotePreference || 5,\n        travelWillingness: userProfile?.travelWillingness || 5,\n      };\n\n      const simulation = await salaryService.generateLifestyleSimulation(\n        role as string,\n        location as string,\n        preferences\n      );\n\n      if (!simulation) {\n        return res.status(404).json({ \n          message: \"Unable to generate simulation for this role and location\" \n        });\n      }\n\n      res.json(simulation);\n    } catch (error) {\n      console.error(\"Error generating lifestyle simulation:\", error);\n      res.status(500).json({ message: \"Failed to generate lifestyle simulation\" });\n    }\n  });\n\n  // Get or update lifestyle preferences\n  app.get('/api/lifestyle/preferences', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const profile = await storage.getUserProfile(userId);\n      \n      if (!profile) {\n        return res.status(404).json({ message: \"Profile not found\" });\n      }\n\n      const preferences = {\n        salaryImportance: profile.salaryImportance || 5,\n        wlbImportance: profile.wlbImportance || 5,\n        stressTolerance: profile.stressTolerance || 5,\n        remotePreference: profile.remotePreference || 5,\n        travelWillingness: profile.travelWillingness || 5,\n      };\n\n      res.json(preferences);\n    } catch (error) {\n      console.error(\"Error fetching lifestyle preferences:\", error);\n      res.status(500).json({ message: \"Failed to fetch lifestyle preferences\" });\n    }\n  });\n\n  app.post('/api/lifestyle/preferences', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { salaryImportance, wlbImportance, stressTolerance, remotePreference, travelWillingness } = req.body;\n\n      // Validate inputs (1-10 scale)\n      const preferences = {\n        salaryImportance: Math.max(1, Math.min(10, salaryImportance || 5)),\n        wlbImportance: Math.max(1, Math.min(10, wlbImportance || 5)),\n        stressTolerance: Math.max(1, Math.min(10, stressTolerance || 5)),\n        remotePreference: Math.max(1, Math.min(10, remotePreference || 5)),\n        travelWillingness: Math.max(1, Math.min(10, travelWillingness || 5)),\n      };\n\n      const updatedProfile = await storage.updateUserProfile(userId, preferences);\n      res.json(updatedProfile);\n    } catch (error) {\n      console.error(\"Error updating lifestyle preferences:\", error);\n      res.status(500).json({ message: \"Failed to update lifestyle preferences\" });\n    }\n  });\n}","size_bytes":3490},"server/services/courses.ts":{"content":"export interface CourseProvider {\n  id: string;\n  name: string;\n  url: string;\n  logo?: string;\n}\n\nexport interface Course {\n  id: string;\n  title: string;\n  description: string;\n  provider: CourseProvider;\n  url: string;\n  price: string;\n  duration: string;\n  level: \"beginner\" | \"intermediate\" | \"advanced\";\n  rating: number;\n  enrollments: number;\n  skills: string[];\n  imageUrl?: string;\n  isFree: boolean;\n}\n\nexport class CourseService {\n  private providers: Record<string, CourseProvider> = {\n    coursera: {\n      id: \"coursera\",\n      name: \"Coursera\",\n      url: \"https://coursera.org\",\n      logo: \"🎓\"\n    },\n    udemy: {\n      id: \"udemy\", \n      name: \"Udemy\",\n      url: \"https://udemy.com\",\n      logo: \"📚\"\n    },\n    linkedin: {\n      id: \"linkedin\",\n      name: \"LinkedIn Learning\", \n      url: \"https://linkedin.com/learning\",\n      logo: \"💼\"\n    },\n    youtube: {\n      id: \"youtube\",\n      name: \"YouTube\",\n      url: \"https://youtube.com\",\n      logo: \"📺\"\n    },\n    codecademy: {\n      id: \"codecademy\",\n      name: \"Codecademy\",\n      url: \"https://codecademy.com\",\n      logo: \"💻\"\n    }\n  };\n\n  async searchCourses(skills: string[], providers: string[] = []): Promise<Course[]> {\n    try {\n      // In a real implementation, this would call actual course APIs\n      // For now, we'll generate realistic course recommendations\n      const courses: Course[] = [];\n      \n      for (const skill of skills.slice(0, 3)) { // Limit to first 3 skills\n        const skillCourses = this.generateCoursesForSkill(skill, providers);\n        courses.push(...skillCourses);\n      }\n\n      // Remove duplicates and sort by relevance\n      const uniqueCourses = this.removeDuplicates(courses);\n      return this.sortByRelevance(uniqueCourses, skills);\n    } catch (error) {\n      console.error(\"Error searching courses:\", error);\n      return [];\n    }\n  }\n\n  async getRecommendedCourses(missingSkills: string[], improvementSkills: string[]): Promise<Course[]> {\n    try {\n      const allSkills = [...missingSkills, ...improvementSkills];\n      const courses = await this.searchCourses(allSkills);\n      \n      // Prioritize courses for missing skills\n      return courses.sort((a, b) => {\n        const aHasMissingSkill = a.skills.some(skill => \n          missingSkills.some(missing => \n            missing.toLowerCase().includes(skill.toLowerCase()) || \n            skill.toLowerCase().includes(missing.toLowerCase())\n          )\n        );\n        const bHasMissingSkill = b.skills.some(skill => \n          missingSkills.some(missing => \n            missing.toLowerCase().includes(skill.toLowerCase()) || \n            skill.toLowerCase().includes(missing.toLowerCase())\n          )\n        );\n        \n        if (aHasMissingSkill && !bHasMissingSkill) return -1;\n        if (!aHasMissingSkill && bHasMissingSkill) return 1;\n        return b.rating - a.rating;\n      });\n    } catch (error) {\n      console.error(\"Error getting recommended courses:\", error);\n      return [];\n    }\n  }\n\n  private generateCoursesForSkill(skill: string, preferredProviders: string[]): Course[] {\n    const skillLower = skill.toLowerCase();\n    const courses: Course[] = [];\n    const providers = preferredProviders.length > 0 \n      ? preferredProviders.map(p => this.providers[p]).filter(Boolean)\n      : Object.values(this.providers);\n\n    // Generate courses for each provider\n    providers.forEach(provider => {\n      const coursesForProvider = this.getCoursesForSkillAndProvider(skill, provider);\n      courses.push(...coursesForProvider);\n    });\n\n    return courses;\n  }\n\n  private getCoursesForSkillAndProvider(skill: string, provider: CourseProvider): Course[] {\n    const skillLower = skill.toLowerCase();\n    const courses: Course[] = [];\n\n    // Programming skills\n    if (skillLower.includes(\"javascript\") || skillLower.includes(\"js\")) {\n      courses.push({\n        id: `${provider.id}-js-${Date.now()}`,\n        title: `Complete ${skill} Masterclass`,\n        description: `Learn ${skill} from beginner to advanced with hands-on projects`,\n        provider,\n        url: `${provider.url}/course/${skillLower.replace(/\\s+/g, \"-\")}`,\n        price: provider.id === \"youtube\" ? \"Free\" : \"$49.99\",\n        duration: \"40 hours\",\n        level: \"intermediate\",\n        rating: 4.5 + Math.random() * 0.5,\n        enrollments: Math.floor(Math.random() * 50000) + 10000,\n        skills: [skill, \"Web Development\", \"Programming\"],\n        isFree: provider.id === \"youtube\",\n      });\n    }\n\n    if (skillLower.includes(\"python\")) {\n      courses.push({\n        id: `${provider.id}-python-${Date.now()}`,\n        title: `${skill} for Data Science and Machine Learning`,\n        description: `Master ${skill} programming with real-world applications`,\n        provider,\n        url: `${provider.url}/course/${skillLower.replace(/\\s+/g, \"-\")}`,\n        price: provider.id === \"youtube\" ? \"Free\" : \"$59.99\",\n        duration: \"35 hours\",\n        level: \"beginner\",\n        rating: 4.6 + Math.random() * 0.4,\n        enrollments: Math.floor(Math.random() * 100000) + 20000,\n        skills: [skill, \"Data Science\", \"Machine Learning\"],\n        isFree: provider.id === \"youtube\",\n      });\n    }\n\n    if (skillLower.includes(\"react\")) {\n      courses.push({\n        id: `${provider.id}-react-${Date.now()}`,\n        title: `Modern ${skill} Development`,\n        description: `Build dynamic web applications with ${skill} and modern tools`,\n        provider,\n        url: `${provider.url}/course/${skillLower.replace(/\\s+/g, \"-\")}`,\n        price: provider.id === \"youtube\" ? \"Free\" : \"$54.99\",\n        duration: \"30 hours\",\n        level: \"intermediate\",\n        rating: 4.7 + Math.random() * 0.3,\n        enrollments: Math.floor(Math.random() * 75000) + 15000,\n        skills: [skill, \"JavaScript\", \"Frontend Development\"],\n        isFree: provider.id === \"youtube\",\n      });\n    }\n\n    // Data Science skills\n    if (skillLower.includes(\"machine learning\") || skillLower.includes(\"ml\")) {\n      courses.push({\n        id: `${provider.id}-ml-${Date.now()}`,\n        title: `${skill} A-Z: Hands-On Projects`,\n        description: `Complete guide to ${skill} with practical implementations`,\n        provider,\n        url: `${provider.url}/course/${skillLower.replace(/\\s+/g, \"-\")}`,\n        price: provider.id === \"youtube\" ? \"Free\" : \"$69.99\",\n        duration: \"50 hours\",\n        level: \"intermediate\",\n        rating: 4.5 + Math.random() * 0.5,\n        enrollments: Math.floor(Math.random() * 60000) + 12000,\n        skills: [skill, \"Python\", \"Data Science\", \"AI\"],\n        isFree: provider.id === \"youtube\",\n      });\n    }\n\n    // Generic course for any skill\n    if (courses.length === 0) {\n      courses.push({\n        id: `${provider.id}-generic-${skill.replace(/\\s+/g, \"-\")}-${Date.now()}`,\n        title: `Learn ${skill}: Complete Guide`,\n        description: `Comprehensive course covering all aspects of ${skill}`,\n        provider,\n        url: `${provider.url}/course/${skillLower.replace(/\\s+/g, \"-\")}`,\n        price: provider.id === \"youtube\" ? \"Free\" : \"$39.99\",\n        duration: \"25 hours\",\n        level: \"beginner\",\n        rating: 4.3 + Math.random() * 0.7,\n        enrollments: Math.floor(Math.random() * 30000) + 5000,\n        skills: [skill],\n        isFree: provider.id === \"youtube\",\n      });\n    }\n\n    return courses;\n  }\n\n  private removeDuplicates(courses: Course[]): Course[] {\n    const seen = new Set<string>();\n    return courses.filter(course => {\n      const key = `${course.title}-${course.provider.id}`;\n      if (seen.has(key)) return false;\n      seen.add(key);\n      return true;\n    });\n  }\n\n  private sortByRelevance(courses: Course[], skills: string[]): Course[] {\n    return courses.sort((a, b) => {\n      // Calculate relevance score\n      const aScore = this.calculateRelevanceScore(a, skills);\n      const bScore = this.calculateRelevanceScore(b, skills);\n      \n      if (aScore !== bScore) return bScore - aScore;\n      return b.rating - a.rating; // Secondary sort by rating\n    });\n  }\n\n  private calculateRelevanceScore(course: Course, targetSkills: string[]): number {\n    let score = 0;\n    \n    targetSkills.forEach(targetSkill => {\n      const targetLower = targetSkill.toLowerCase();\n      \n      // Check title\n      if (course.title.toLowerCase().includes(targetLower)) {\n        score += 3;\n      }\n      \n      // Check skills\n      course.skills.forEach(courseSkill => {\n        if (courseSkill.toLowerCase().includes(targetLower) || \n            targetLower.includes(courseSkill.toLowerCase())) {\n          score += 2;\n        }\n      });\n      \n      // Check description\n      if (course.description.toLowerCase().includes(targetLower)) {\n        score += 1;\n      }\n    });\n    \n    return score;\n  }\n}\n\nexport const courseService = new CourseService();","size_bytes":8830},"server/services/salary.ts":{"content":"import { storage } from \"../storage\";\nimport type { SalaryCache, InsertSalaryCache } from \"@shared/schema\";\n\nexport interface SalaryData {\n  role: string;\n  location: string;\n  p25: number;\n  median: number;\n  p75: number;\n  currency: string;\n  source: string;\n  dataYear: number;\n}\n\nexport interface LifestyleMetrics {\n  salary: SalaryData;\n  workLifeBalance: number; // 1-10 scale\n  stressLevel: number; // 1-10 scale\n  remoteFlexibility: number; // 1-10 scale\n  travelRequirement: number; // 1-10 scale\n  careerGrowth: number; // 1-10 scale\n}\n\nexport class SalaryService {\n  // Cache duration in milliseconds (30 days)\n  private readonly CACHE_DURATION = 30 * 24 * 60 * 60 * 1000;\n\n  async getSalaryData(role: string, location: string): Promise<SalaryData | null> {\n    try {\n      // Check cache first\n      const cached = await storage.getSalaryCacheEntry(role, location);\n      if (cached && this.isCacheValid(cached)) {\n        return {\n          role: cached.role,\n          location: cached.location,\n          p25: cached.p25 || 0,\n          median: cached.median || 0,\n          p75: cached.p75 || 0,\n          currency: cached.currency || \"USD\",\n          source: cached.source,\n          dataYear: cached.dataYear || new Date().getFullYear(),\n        };\n      }\n\n      // Fetch from BLS or other APIs\n      const salaryData = await this.fetchFromBLS(role, location);\n      \n      if (salaryData) {\n        // Cache the result\n        await storage.cacheSalaryData({\n          role,\n          location,\n          source: \"bls\",\n          p25: salaryData.p25,\n          median: salaryData.median,\n          p75: salaryData.p75,\n          currency: salaryData.currency,\n          dataYear: salaryData.dataYear,\n          expiresAt: new Date(Date.now() + this.CACHE_DURATION),\n        });\n      }\n\n      return salaryData;\n    } catch (error) {\n      console.error(\"Error fetching salary data:\", error);\n      return null;\n    }\n  }\n\n  async generateLifestyleSimulation(\n    role: string,\n    location: string,\n    userPreferences: {\n      salaryImportance: number;\n      wlbImportance: number;\n      stressTolerance: number;\n      remotePreference: number;\n      travelWillingness: number;\n    }\n  ): Promise<LifestyleMetrics | null> {\n    try {\n      const salaryData = await this.getSalaryData(role, location);\n      if (!salaryData) return null;\n\n      // Generate lifestyle metrics based on role and location\n      const metrics = await this.calculateLifestyleMetrics(role, location);\n\n      return {\n        salary: salaryData,\n        workLifeBalance: this.adjustForPreferences(metrics.workLifeBalance, userPreferences.wlbImportance),\n        stressLevel: this.adjustForPreferences(metrics.stressLevel, userPreferences.stressTolerance),\n        remoteFlexibility: this.adjustForPreferences(metrics.remoteFlexibility, userPreferences.remotePreference),\n        travelRequirement: this.adjustForPreferences(metrics.travelRequirement, userPreferences.travelWillingness),\n        careerGrowth: metrics.careerGrowth,\n      };\n    } catch (error) {\n      console.error(\"Error generating lifestyle simulation:\", error);\n      return null;\n    }\n  }\n\n  private async fetchFromBLS(role: string, location: string): Promise<SalaryData | null> {\n    try {\n      // In a real implementation, this would call the BLS API\n      // For now, we'll generate realistic estimates based on role and location\n      const baseSalaries = this.getBaseSalaryEstimates(role);\n      const locationMultiplier = this.getLocationMultiplier(location);\n\n      return {\n        role,\n        location,\n        p25: Math.round(baseSalaries.base * 0.8 * locationMultiplier),\n        median: Math.round(baseSalaries.base * locationMultiplier),\n        p75: Math.round(baseSalaries.base * 1.3 * locationMultiplier),\n        currency: \"USD\",\n        source: \"bls\",\n        dataYear: new Date().getFullYear(),\n      };\n    } catch (error) {\n      console.error(\"Error fetching from BLS:\", error);\n      return null;\n    }\n  }\n\n  private async calculateLifestyleMetrics(role: string, location: string): Promise<Omit<LifestyleMetrics, 'salary'>> {\n    // Base metrics for different role types\n    const roleMetrics = this.getRoleMetrics(role);\n    const locationMetrics = this.getLocationMetrics(location);\n\n    return {\n      workLifeBalance: Math.min(10, Math.max(1, roleMetrics.workLifeBalance + locationMetrics.workLifeBalance - 5)),\n      stressLevel: Math.min(10, Math.max(1, roleMetrics.stressLevel + locationMetrics.stressLevel - 5)),\n      remoteFlexibility: Math.min(10, Math.max(1, roleMetrics.remoteFlexibility + locationMetrics.remoteFlexibility - 5)),\n      travelRequirement: Math.min(10, Math.max(1, roleMetrics.travelRequirement + locationMetrics.travelRequirement - 5)),\n      careerGrowth: Math.min(10, Math.max(1, roleMetrics.careerGrowth + locationMetrics.careerGrowth - 5)),\n    };\n  }\n\n  private adjustForPreferences(baseValue: number, preference: number): number {\n    // Adjust metrics based on user preferences (1-10 scale)\n    const adjustment = (preference - 5) * 0.2; // Small adjustment based on preference\n    return Math.min(10, Math.max(1, baseValue + adjustment));\n  }\n\n  private getBaseSalaryEstimates(role: string): { base: number } {\n    const roleLower = role.toLowerCase();\n    \n    if (roleLower.includes(\"software\") || roleLower.includes(\"developer\") || roleLower.includes(\"engineer\")) {\n      return { base: 95000 };\n    } else if (roleLower.includes(\"data scientist\") || roleLower.includes(\"machine learning\")) {\n      return { base: 120000 };\n    } else if (roleLower.includes(\"product manager\")) {\n      return { base: 110000 };\n    } else if (roleLower.includes(\"designer\") || roleLower.includes(\"ux\") || roleLower.includes(\"ui\")) {\n      return { base: 80000 };\n    } else if (roleLower.includes(\"marketing\")) {\n      return { base: 70000 };\n    } else if (roleLower.includes(\"sales\")) {\n      return { base: 75000 };\n    } else if (roleLower.includes(\"manager\") || roleLower.includes(\"director\")) {\n      return { base: 100000 };\n    } else {\n      return { base: 65000 }; // Default\n    }\n  }\n\n  private getLocationMultiplier(location: string): number {\n    const locationLower = location.toLowerCase();\n    \n    if (locationLower.includes(\"san francisco\") || locationLower.includes(\"sf\")) {\n      return 1.6;\n    } else if (locationLower.includes(\"new york\") || locationLower.includes(\"nyc\")) {\n      return 1.4;\n    } else if (locationLower.includes(\"seattle\")) {\n      return 1.3;\n    } else if (locationLower.includes(\"los angeles\") || locationLower.includes(\"la\")) {\n      return 1.2;\n    } else if (locationLower.includes(\"boston\")) {\n      return 1.2;\n    } else if (locationLower.includes(\"chicago\")) {\n      return 1.1;\n    } else if (locationLower.includes(\"austin\")) {\n      return 1.1;\n    } else if (locationLower.includes(\"denver\")) {\n      return 1.0;\n    } else if (locationLower.includes(\"remote\")) {\n      return 1.1;\n    } else {\n      return 0.9; // Lower cost areas\n    }\n  }\n\n  private getRoleMetrics(role: string): Omit<LifestyleMetrics, 'salary'> {\n    const roleLower = role.toLowerCase();\n    \n    if (roleLower.includes(\"software\") || roleLower.includes(\"developer\")) {\n      return {\n        workLifeBalance: 7,\n        stressLevel: 5,\n        remoteFlexibility: 8,\n        travelRequirement: 2,\n        careerGrowth: 8,\n      };\n    } else if (roleLower.includes(\"data scientist\")) {\n      return {\n        workLifeBalance: 6,\n        stressLevel: 6,\n        remoteFlexibility: 7,\n        travelRequirement: 3,\n        careerGrowth: 8,\n      };\n    } else if (roleLower.includes(\"product manager\")) {\n      return {\n        workLifeBalance: 5,\n        stressLevel: 7,\n        remoteFlexibility: 6,\n        travelRequirement: 4,\n        careerGrowth: 9,\n      };\n    } else if (roleLower.includes(\"consultant\")) {\n      return {\n        workLifeBalance: 4,\n        stressLevel: 8,\n        remoteFlexibility: 3,\n        travelRequirement: 8,\n        careerGrowth: 7,\n      };\n    } else if (roleLower.includes(\"sales\")) {\n      return {\n        workLifeBalance: 5,\n        stressLevel: 7,\n        remoteFlexibility: 5,\n        travelRequirement: 6,\n        careerGrowth: 6,\n      };\n    } else {\n      return {\n        workLifeBalance: 6,\n        stressLevel: 5,\n        remoteFlexibility: 5,\n        travelRequirement: 3,\n        careerGrowth: 6,\n      };\n    }\n  }\n\n  private getLocationMetrics(location: string): Omit<LifestyleMetrics, 'salary'> {\n    const locationLower = location.toLowerCase();\n    \n    if (locationLower.includes(\"san francisco\") || locationLower.includes(\"new york\")) {\n      return {\n        workLifeBalance: -1,\n        stressLevel: 2,\n        remoteFlexibility: 0,\n        travelRequirement: 1,\n        careerGrowth: 2,\n      };\n    } else if (locationLower.includes(\"remote\")) {\n      return {\n        workLifeBalance: 2,\n        stressLevel: -1,\n        remoteFlexibility: 5,\n        travelRequirement: -2,\n        careerGrowth: 0,\n      };\n    } else {\n      return {\n        workLifeBalance: 0,\n        stressLevel: 0,\n        remoteFlexibility: 0,\n        travelRequirement: 0,\n        careerGrowth: 0,\n      };\n    }\n  }\n\n  private isCacheValid(cached: SalaryCache): boolean {\n    if (!cached.expiresAt) return false;\n    return new Date() < new Date(cached.expiresAt);\n  }\n}\n\nexport const salaryService = new SalaryService();","size_bytes":9410},"client/src/pages/achievements.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport Navigation from \"@/components/Navigation\";\nimport Sidebar from \"@/components/Sidebar\";\nimport { motion } from \"framer-motion\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Achievement {\n  id: string;\n  name: string;\n  description: string;\n  category: string;\n  icon: string;\n  points: number;\n  isUnlocked: boolean;\n  unlockedAt?: string;\n  progress?: number;\n  maxProgress?: number;\n  requirements: string[];\n}\n\ninterface UserStats {\n  totalPoints: number;\n  level: number;\n  pointsToNextLevel: number;\n  totalAchievements: number;\n  unlockedAchievements: number;\n  streakDays: number;\n  profileCompletionPercent: number;\n}\n\ninterface Milestone {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  targetValue: number;\n  currentValue: number;\n  isCompleted: boolean;\n  reward: string;\n  deadline?: string;\n}\n\nexport default function Achievements() {\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"all\");\n  const { toast } = useToast();\n\n  const { data: achievementsData, isLoading: achievementsLoading } = useQuery<{\n    achievements: Achievement[];\n    userStats: UserStats;\n    milestones: Milestone[];\n  }>({\n    queryKey: [\"/api/achievements\"],\n    retry: false,\n  });\n\n  const claimRewardMutation = useMutation({\n    mutationFn: async (achievementId: string) => {\n      return apiRequest(`/api/achievements/${achievementId}/claim`, \"POST\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/achievements\"] });\n      toast({\n        title: \"Reward Claimed!\",\n        description: \"Your achievement reward has been added to your account.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to claim reward. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const achievements = achievementsData?.achievements || [];\n  const userStats = achievementsData?.userStats || {\n    totalPoints: 0,\n    level: 1,\n    pointsToNextLevel: 100,\n    totalAchievements: 0,\n    unlockedAchievements: 0,\n    streakDays: 0,\n    profileCompletionPercent: 0,\n  };\n  const milestones = achievementsData?.milestones || [];\n\n  const categories = [\n    { id: \"all\", name: \"All\", icon: \"fas fa-trophy\" },\n    { id: \"profile\", name: \"Profile\", icon: \"fas fa-user\" },\n    { id: \"learning\", name: \"Learning\", icon: \"fas fa-graduation-cap\" },\n    { id: \"career\", name: \"Career\", icon: \"fas fa-briefcase\" },\n    { id: \"social\", name: \"Social\", icon: \"fas fa-users\" },\n    { id: \"milestone\", name: \"Milestones\", icon: \"fas fa-flag\" },\n  ];\n\n  const filteredAchievements = selectedCategory === \"all\" \n    ? achievements \n    : achievements.filter(achievement => achievement.category === selectedCategory);\n\n  const getXPForLevel = (level: number) => {\n    return level * 100; // Simple progression: 100 XP per level\n  };\n\n  const getLevelProgress = () => {\n    const currentLevelXP = getXPForLevel(userStats.level - 1);\n    const nextLevelXP = getXPForLevel(userStats.level);\n    const progressXP = userStats.totalPoints - currentLevelXP;\n    const neededXP = nextLevelXP - currentLevelXP;\n    return (progressXP / neededXP) * 100;\n  };\n\n  if (achievementsLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navigation />\n        <div className=\"flex\">\n          <Sidebar />\n          <main className=\"lg:pl-64 flex-1\">\n            <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n              <div className=\"flex items-center justify-center h-64\">\n                <div className=\"text-center\">\n                  <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n                  <p className=\"text-muted-foreground\">Loading achievements...</p>\n                </div>\n              </div>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      <div className=\"flex\">\n        <Sidebar />\n        <main className=\"lg:pl-64 flex-1\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.5 }}\n            >\n              <div className=\"mb-8\">\n                <h1 className=\"text-3xl font-bold text-foreground mb-2\">\n                  Achievements & Progress\n                </h1>\n                <p className=\"text-muted-foreground\">\n                  Track your career development journey and unlock rewards\n                </p>\n              </div>\n\n              {/* User Stats Dashboard */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n                <Card>\n                  <CardContent className=\"pt-6\">\n                    <div className=\"text-center\">\n                      <div className=\"text-3xl font-bold text-primary mb-2\" data-testid=\"user-level\">\n                        Level {userStats.level}\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">Current Level</p>\n                      <div className=\"mt-3\">\n                        <Progress value={getLevelProgress()} className=\"h-2\" />\n                        <p className=\"text-xs text-muted-foreground mt-1\">\n                          {userStats.pointsToNextLevel} XP to next level\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"pt-6\">\n                    <div className=\"text-center\">\n                      <div className=\"text-3xl font-bold text-green-600 mb-2\" data-testid=\"total-points\">\n                        {userStats.totalPoints.toLocaleString()}\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">Total XP</p>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"pt-6\">\n                    <div className=\"text-center\">\n                      <div className=\"text-3xl font-bold text-blue-600 mb-2\" data-testid=\"achievements-unlocked\">\n                        {userStats.unlockedAchievements}/{userStats.totalAchievements}\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">Achievements</p>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"pt-6\">\n                    <div className=\"text-center\">\n                      <div className=\"text-3xl font-bold text-orange-600 mb-2\" data-testid=\"streak-days\">\n                        {userStats.streakDays}\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">Day Streak</p>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <Tabs value={selectedCategory} onValueChange={setSelectedCategory} className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-6\">\n                  {categories.map((category) => (\n                    <TabsTrigger \n                      key={category.id} \n                      value={category.id}\n                      className=\"text-xs\"\n                      data-testid={`tab-${category.id}`}\n                    >\n                      <i className={`${category.icon} mr-1`}></i>\n                      {category.name}\n                    </TabsTrigger>\n                  ))}\n                </TabsList>\n\n                <TabsContent value={selectedCategory} className=\"mt-6\">\n                  {selectedCategory === \"milestone\" ? (\n                    /* Milestones View */\n                    <div className=\"space-y-4\">\n                      <h2 className=\"text-xl font-semibold mb-4\">Current Milestones</h2>\n                      {milestones.length > 0 ? (\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                          {milestones.map((milestone, index) => (\n                            <motion.div\n                              key={milestone.id}\n                              initial={{ opacity: 0, y: 20 }}\n                              animate={{ opacity: 1, y: 0 }}\n                              transition={{ duration: 0.3, delay: index * 0.1 }}\n                            >\n                              <Card className={`${milestone.isCompleted ? 'bg-green-50 dark:bg-green-900/20' : ''}`}>\n                                <CardHeader className=\"pb-3\">\n                                  <div className=\"flex items-center justify-between\">\n                                    <CardTitle className=\"text-lg\">{milestone.title}</CardTitle>\n                                    {milestone.isCompleted && (\n                                      <Badge variant=\"default\" className=\"bg-green-600\">\n                                        <i className=\"fas fa-check mr-1\"></i>\n                                        Complete\n                                      </Badge>\n                                    )}\n                                  </div>\n                                </CardHeader>\n                                <CardContent>\n                                  <p className=\"text-sm text-muted-foreground mb-4\">\n                                    {milestone.description}\n                                  </p>\n                                  \n                                  <div className=\"mb-4\">\n                                    <div className=\"flex justify-between text-sm mb-2\">\n                                      <span>Progress</span>\n                                      <span className=\"font-medium\">\n                                        {milestone.currentValue}/{milestone.targetValue}\n                                      </span>\n                                    </div>\n                                    <Progress \n                                      value={(milestone.currentValue / milestone.targetValue) * 100} \n                                      className=\"h-2\"\n                                    />\n                                  </div>\n\n                                  <div className=\"flex items-center justify-between text-sm\">\n                                    <span className=\"text-muted-foreground\">Reward:</span>\n                                    <Badge variant=\"outline\">{milestone.reward}</Badge>\n                                  </div>\n\n                                  {milestone.deadline && (\n                                    <div className=\"flex items-center justify-between text-sm mt-2\">\n                                      <span className=\"text-muted-foreground\">Deadline:</span>\n                                      <span className=\"text-xs\">\n                                        {new Date(milestone.deadline).toLocaleDateString()}\n                                      </span>\n                                    </div>\n                                  )}\n                                </CardContent>\n                              </Card>\n                            </motion.div>\n                          ))}\n                        </div>\n                      ) : (\n                        <div className=\"text-center py-12\">\n                          <i className=\"fas fa-flag text-4xl text-muted-foreground mb-4\"></i>\n                          <h3 className=\"text-lg font-semibold text-foreground mb-2\">No Active Milestones</h3>\n                          <p className=\"text-muted-foreground\">\n                            Complete more activities to unlock career milestones\n                          </p>\n                        </div>\n                      )}\n                    </div>\n                  ) : (\n                    /* Achievements View */\n                    <div className=\"space-y-4\">\n                      {filteredAchievements.length > 0 ? (\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                          {filteredAchievements.map((achievement, index) => (\n                            <motion.div\n                              key={achievement.id}\n                              initial={{ opacity: 0, y: 20 }}\n                              animate={{ opacity: 1, y: 0 }}\n                              transition={{ duration: 0.3, delay: index * 0.1 }}\n                            >\n                              <Card \n                                className={`relative transition-all duration-300 hover:shadow-lg ${\n                                  achievement.isUnlocked \n                                    ? 'bg-gradient-to-br from-yellow-50 to-orange-50 dark:from-yellow-900/20 dark:to-orange-900/20' \n                                    : 'opacity-75'\n                                }`}\n                                data-testid={`achievement-${achievement.id}`}\n                              >\n                                {achievement.isUnlocked && (\n                                  <div className=\"absolute top-2 right-2\">\n                                    <i className=\"fas fa-crown text-yellow-500 text-lg\"></i>\n                                  </div>\n                                )}\n                                \n                                <CardHeader className=\"pb-3\">\n                                  <div className=\"flex items-center space-x-3\">\n                                    <div className={`w-12 h-12 rounded-full flex items-center justify-center text-xl ${\n                                      achievement.isUnlocked \n                                        ? 'bg-yellow-100 text-yellow-700 dark:bg-yellow-900/30 dark:text-yellow-400' \n                                        : 'bg-gray-100 text-gray-400 dark:bg-gray-800 dark:text-gray-600'\n                                    }`}>\n                                      <i className={achievement.icon}></i>\n                                    </div>\n                                    <div className=\"flex-1\">\n                                      <CardTitle className={`text-lg ${achievement.isUnlocked ? 'text-foreground' : 'text-muted-foreground'}`}>\n                                        {achievement.name}\n                                      </CardTitle>\n                                      <Badge \n                                        variant={achievement.isUnlocked ? \"default\" : \"secondary\"}\n                                        className=\"mt-1\"\n                                      >\n                                        {achievement.points} XP\n                                      </Badge>\n                                    </div>\n                                  </div>\n                                </CardHeader>\n                                \n                                <CardContent>\n                                  <p className={`text-sm mb-4 ${achievement.isUnlocked ? 'text-foreground' : 'text-muted-foreground'}`}>\n                                    {achievement.description}\n                                  </p>\n\n                                  {achievement.progress !== undefined && achievement.maxProgress && (\n                                    <div className=\"mb-4\">\n                                      <div className=\"flex justify-between text-sm mb-2\">\n                                        <span>Progress</span>\n                                        <span className=\"font-medium\">\n                                          {achievement.progress}/{achievement.maxProgress}\n                                        </span>\n                                      </div>\n                                      <Progress \n                                        value={(achievement.progress / achievement.maxProgress) * 100} \n                                        className=\"h-2\"\n                                      />\n                                    </div>\n                                  )}\n\n                                  <div className=\"space-y-2\">\n                                    <p className=\"text-xs font-medium text-muted-foreground\">Requirements:</p>\n                                    <ul className=\"text-xs space-y-1\">\n                                      {achievement.requirements.map((req, reqIndex) => (\n                                        <li key={reqIndex} className=\"flex items-center space-x-2\">\n                                          <i className={`fas fa-${achievement.isUnlocked ? 'check text-green-500' : 'circle text-gray-400'} text-xs`}></i>\n                                          <span className={achievement.isUnlocked ? 'text-foreground' : 'text-muted-foreground'}>\n                                            {req}\n                                          </span>\n                                        </li>\n                                      ))}\n                                    </ul>\n                                  </div>\n\n                                  {achievement.isUnlocked && achievement.unlockedAt && (\n                                    <div className=\"mt-4 pt-4 border-t border-border\">\n                                      <div className=\"flex items-center justify-between\">\n                                        <span className=\"text-xs text-muted-foreground\">\n                                          Unlocked: {new Date(achievement.unlockedAt).toLocaleDateString()}\n                                        </span>\n                                        <Button\n                                          size=\"sm\"\n                                          variant=\"outline\"\n                                          onClick={() => claimRewardMutation.mutate(achievement.id)}\n                                          disabled={claimRewardMutation.isPending}\n                                          data-testid={`claim-${achievement.id}`}\n                                        >\n                                          {claimRewardMutation.isPending ? \"Claiming...\" : \"Claim Reward\"}\n                                        </Button>\n                                      </div>\n                                    </div>\n                                  )}\n                                </CardContent>\n                              </Card>\n                            </motion.div>\n                          ))}\n                        </div>\n                      ) : (\n                        <div className=\"text-center py-12\">\n                          <i className=\"fas fa-trophy text-4xl text-muted-foreground mb-4\"></i>\n                          <h3 className=\"text-lg font-semibold text-foreground mb-2\">No Achievements Found</h3>\n                          <p className=\"text-muted-foreground\">\n                            {selectedCategory === \"all\" \n                              ? \"Start your career journey to unlock achievements!\" \n                              : `No ${selectedCategory} achievements available yet.`}\n                          </p>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </TabsContent>\n              </Tabs>\n            </motion.div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":20040},"server/routes/achievements.ts":{"content":"import type { Express } from \"express\";\nimport { isAuthenticated } from \"../replitAuth\";\nimport { storage } from \"../storage\";\n\ninterface Achievement {\n  id: string;\n  name: string;\n  description: string;\n  category: string;\n  icon: string;\n  points: number;\n  isUnlocked: boolean;\n  unlockedAt?: string;\n  progress?: number;\n  maxProgress?: number;\n  requirements: string[];\n}\n\ninterface UserStats {\n  totalPoints: number;\n  level: number;\n  pointsToNextLevel: number;\n  totalAchievements: number;\n  unlockedAchievements: number;\n  streakDays: number;\n  profileCompletionPercent: number;\n}\n\ninterface Milestone {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  targetValue: number;\n  currentValue: number;\n  isCompleted: boolean;\n  reward: string;\n  deadline?: string;\n}\n\nexport function registerAchievementRoutes(app: Express) {\n  // Get user achievements, stats, and milestones\n  app.get('/api/achievements', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n\n      // Get all achievements from database\n      const allAchievements = await storage.getAchievements();\n      \n      // Get user's earned achievements\n      const userAchievements = await storage.getUserAchievements(userId);\n      \n      // Map achievements with user progress\n      const achievementsWithProgress = allAchievements.map(achievement => {\n        const userAchievement = userAchievements.find(ua => ua.achievementId === achievement.id);\n        return {\n          id: achievement.id,\n          name: achievement.name,\n          description: achievement.description || \"\",\n          category: achievement.code.split('_')[0], // Extract category from code\n          icon: achievement.icon || \"fas fa-trophy\",\n          points: getPointsForAchievement(achievement.code),\n          isUnlocked: !!userAchievement,\n          unlockedAt: userAchievement?.earnedAt,\n          progress: userAchievement?.progress || 0,\n          maxProgress: 100,\n          requirements: getRequirementsForAchievement(achievement.code),\n        };\n      });\n\n      // Calculate user stats\n      const userStats = await calculateUserStats(userId);\n      \n      // Get user milestones\n      const milestones = await generateUserMilestones(userId);\n\n      res.json({\n        achievements: achievementsWithProgress,\n        userStats,\n        milestones,\n      });\n    } catch (error) {\n      console.error(\"Error fetching achievements:\", error);\n      res.status(500).json({ message: \"Failed to fetch achievements\" });\n    }\n  });\n\n  // Claim achievement reward\n  app.post('/api/achievements/:achievementId/claim', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { achievementId } = req.params;\n\n      // Check if user has this achievement\n      const userAchievements = await storage.getUserAchievements(userId);\n      const hasAchievement = userAchievements.some(ua => ua.achievementId === achievementId);\n\n      if (!hasAchievement) {\n        return res.status(404).json({ message: \"Achievement not found or not unlocked\" });\n      }\n\n      // TODO: Implement actual reward system\n      // This could give rewards like:\n      // - XP points to user profile\n      // - Virtual currency\n      // - Unlock premium features\n      // - Special badges\n      \n      res.json({ \n        message: \"Reward claimed successfully\",\n        reward: \"Experience points added to your profile!\"\n      });\n    } catch (error) {\n      console.error(\"Error claiming achievement reward:\", error);\n      res.status(500).json({ message: \"Failed to claim reward\" });\n    }\n  });\n\n  // Trigger achievement check (called after user actions)\n  app.post('/api/achievements/check', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { action, data } = req.body;\n\n      const newlyUnlocked = await checkAndUnlockAchievements(userId, action, data);\n      \n      res.json({ \n        newlyUnlocked: newlyUnlocked.length,\n        achievements: newlyUnlocked,\n      });\n    } catch (error) {\n      console.error(\"Error checking achievements:\", error);\n      res.status(500).json({ message: \"Failed to check achievements\" });\n    }\n  });\n}\n\nfunction getPointsForAchievement(code: string): number {\n  const pointsMap: Record<string, number> = {\n    'profile_complete': 50,\n    'profile_first_skill': 25,\n    'profile_skill_master': 100,\n    'learning_first_course': 30,\n    'learning_course_completed': 75,\n    'learning_streak': 150,\n    'career_path_set': 40,\n    'career_skill_gap_analyzed': 60,\n    'career_doppelganger_found': 80,\n    'social_ai_chat_started': 35,\n    'social_ai_chat_veteran': 200,\n  };\n  return pointsMap[code] || 25;\n}\n\nfunction getRequirementsForAchievement(code: string): string[] {\n  const requirementsMap: Record<string, string[]> = {\n    'profile_complete': [\n      'Add profile photo',\n      'Fill in basic information',\n      'Add current role',\n      'Upload resume',\n      'Set career goals'\n    ],\n    'profile_first_skill': ['Add at least one skill'],\n    'profile_skill_master': ['Add 10 different skills'],\n    'learning_first_course': ['Enroll in any course'],\n    'learning_course_completed': ['Complete any course'],\n    'learning_streak': ['7-day learning streak'],\n    'career_path_set': ['Set a career path goal'],\n    'career_skill_gap_analyzed': ['Complete skill gap analysis'],\n    'career_doppelganger_found': ['Find a career doppelgänger'],\n    'social_ai_chat_started': ['Send first message to AI'],\n    'social_ai_chat_veteran': ['50 AI conversations'],\n  };\n  return requirementsMap[code] || ['Complete the required action'];\n}\n\nfunction generateAllAchievements(): Achievement[] {\n  return [\n    // Profile Achievements\n    {\n      id: \"profile_complete\",\n      name: \"Profile Pioneer\",\n      description: \"Complete your profile with all required information\",\n      category: \"profile\",\n      icon: \"fas fa-user-circle\",\n      points: 50,\n      isUnlocked: false,\n      maxProgress: 5,\n      requirements: [\n        \"Add profile photo\",\n        \"Fill in basic information\",\n        \"Add current role\",\n        \"Upload resume\",\n        \"Set career goals\"\n      ],\n    },\n    {\n      id: \"first_skill\",\n      name: \"Skill Seeker\",\n      description: \"Add your first skill to your profile\",\n      category: \"profile\",\n      icon: \"fas fa-star\",\n      points: 25,\n      isUnlocked: false,\n      maxProgress: 1,\n      requirements: [\"Add at least one skill\"],\n    },\n    {\n      id: \"skill_master\",\n      name: \"Skill Master\",\n      description: \"Add 10 or more skills to your profile\",\n      category: \"profile\",\n      icon: \"fas fa-medal\",\n      points: 100,\n      isUnlocked: false,\n      maxProgress: 10,\n      requirements: [\"Add 10 different skills\"],\n    },\n\n    // Learning Achievements\n    {\n      id: \"first_course\",\n      name: \"Learning Beginner\",\n      description: \"Enroll in your first course\",\n      category: \"learning\",\n      icon: \"fas fa-graduation-cap\",\n      points: 30,\n      isUnlocked: false,\n      maxProgress: 1,\n      requirements: [\"Enroll in any course\"],\n    },\n    {\n      id: \"course_completed\",\n      name: \"Course Finisher\",\n      description: \"Complete your first course\",\n      category: \"learning\",\n      icon: \"fas fa-certificate\",\n      points: 75,\n      isUnlocked: false,\n      maxProgress: 1,\n      requirements: [\"Complete any course\"],\n    },\n    {\n      id: \"learning_streak\",\n      name: \"Learning Streak\",\n      description: \"Complete courses 7 days in a row\",\n      category: \"learning\",\n      icon: \"fas fa-fire\",\n      points: 150,\n      isUnlocked: false,\n      maxProgress: 7,\n      requirements: [\"7-day learning streak\"],\n    },\n\n    // Career Achievements\n    {\n      id: \"career_path_set\",\n      name: \"Path Finder\",\n      description: \"Set your first career path goal\",\n      category: \"career\",\n      icon: \"fas fa-route\",\n      points: 40,\n      isUnlocked: false,\n      maxProgress: 1,\n      requirements: [\"Set a career path goal\"],\n    },\n    {\n      id: \"skill_gap_analyzed\",\n      name: \"Gap Analyzer\",\n      description: \"Complete your first skill gap analysis\",\n      category: \"career\",\n      icon: \"fas fa-chart-bar\",\n      points: 60,\n      isUnlocked: false,\n      maxProgress: 1,\n      requirements: [\"Complete skill gap analysis\"],\n    },\n    {\n      id: \"doppelganger_found\",\n      name: \"Mirror Mirror\",\n      description: \"Find your first career doppelgänger\",\n      category: \"career\",\n      icon: \"fas fa-search\",\n      points: 80,\n      isUnlocked: false,\n      maxProgress: 1,\n      requirements: [\"Find a career doppelgänger\"],\n    },\n\n    // Social Achievements\n    {\n      id: \"ai_chat_started\",\n      name: \"AI Conversationalist\",\n      description: \"Start your first AI conversation\",\n      category: \"social\",\n      icon: \"fas fa-robot\",\n      points: 35,\n      isUnlocked: false,\n      maxProgress: 1,\n      requirements: [\"Send first message to AI\"],\n    },\n    {\n      id: \"ai_chat_veteran\",\n      name: \"AI Veteran\",\n      description: \"Have 50 conversations with AI\",\n      category: \"social\",\n      icon: \"fas fa-comments\",\n      points: 200,\n      isUnlocked: false,\n      maxProgress: 50,\n      requirements: [\"50 AI conversations\"],\n    },\n  ];\n}\n\nasync function calculateUserStats(userId: string): Promise<UserStats> {\n  const [userAchievements, profile, skills] = await Promise.all([\n    storage.getUserAchievements(userId),\n    storage.getUserProfile(userId),\n    storage.getUserSkills(userId),\n  ]);\n\n  const totalPoints = userAchievements.reduce((sum, achievement) => {\n    const achievementData = generateAllAchievements().find(a => a.id === achievement.achievementId);\n    return sum + (achievementData?.points || 0);\n  }, 0);\n\n  const level = Math.floor(totalPoints / 100) + 1;\n  const pointsToNextLevel = (level * 100) - totalPoints;\n  \n  const allAchievements = generateAllAchievements();\n  const profileCompletionPercent = calculateProfileCompletion(profile, skills);\n\n  return {\n    totalPoints,\n    level,\n    pointsToNextLevel,\n    totalAchievements: allAchievements.length,\n    unlockedAchievements: userAchievements.length,\n    streakDays: 0, // TODO: Implement streak tracking\n    profileCompletionPercent,\n  };\n}\n\nfunction calculateProfileCompletion(profile: any, skills: any[]): number {\n  let completion = 0;\n  if (profile?.firstName) completion += 20;\n  if (profile?.currentRole) completion += 20;\n  if (profile?.resumeText) completion += 20;\n  if (skills.length > 0) completion += 20;\n  if (profile?.careerGoals) completion += 20;\n  return completion;\n}\n\nfunction calculateAchievementProgress(achievementId: string, userId: string): number {\n  // This is a simplified version - in a real implementation,\n  // you'd calculate actual progress based on user data\n  \n  switch (achievementId) {\n    case \"profile_complete\":\n      return 3; // Example: 3 out of 5 profile sections completed\n    case \"skill_master\":\n      return 5; // Example: 5 out of 10 skills added\n    case \"learning_streak\":\n      return 2; // Example: 2 out of 7 days\n    case \"ai_chat_veteran\":\n      return 12; // Example: 12 out of 50 conversations\n    default:\n      return 0;\n  }\n}\n\nasync function generateUserMilestones(userId: string): Promise<Milestone[]> {\n  const [profile, skills, careerPaths] = await Promise.all([\n    storage.getUserProfile(userId),\n    storage.getUserSkills(userId),\n    storage.getUserCareerPaths(userId),\n  ]);\n\n  const milestones: Milestone[] = [];\n\n  // Profile completion milestone\n  const profileCompletion = calculateProfileCompletion(profile, skills);\n  if (profileCompletion < 100) {\n    milestones.push({\n      id: \"complete_profile\",\n      title: \"Complete Your Profile\",\n      description: \"Fill out all sections of your profile to unlock personalized recommendations\",\n      category: \"profile\",\n      targetValue: 100,\n      currentValue: profileCompletion,\n      isCompleted: false,\n      reward: \"50 XP + Personalized recommendations\",\n    });\n  }\n\n  // Skills milestone\n  if (skills.length < 5) {\n    milestones.push({\n      id: \"add_skills\",\n      title: \"Build Your Skill Portfolio\",\n      description: \"Add at least 5 skills to get better career matching\",\n      category: \"skills\",\n      targetValue: 5,\n      currentValue: skills.length,\n      isCompleted: false,\n      reward: \"75 XP + Advanced matching\",\n    });\n  }\n\n  // Career path milestone\n  if (careerPaths.length === 0) {\n    milestones.push({\n      id: \"set_career_path\",\n      title: \"Define Your Career Journey\",\n      description: \"Set your first career path to start tracking progress\",\n      category: \"career\",\n      targetValue: 1,\n      currentValue: 0,\n      isCompleted: false,\n      reward: \"100 XP + Path tracking\",\n    });\n  }\n\n  return milestones;\n}\n\nasync function checkAndUnlockAchievements(userId: string, action: string, data: any): Promise<Achievement[]> {\n  // This would check if any achievements should be unlocked based on the user's action\n  // For example: if action === \"profile_updated\", check profile completion achievements\n  // Return any newly unlocked achievements\n  \n  return [];\n}","size_bytes":13170},"etl/README.md":{"content":"# ETL for Career Mirror\n\n## Steps\n1. `python etl/seed_profiles.py`\n2. `python etl/load_embeddings.py`\n3. `python etl/seed_analytics.py`\n4. `python etl/seed_achievements.py`\n","size_bytes":173},"etl/Utils.py":{"content":"import os, psycopg2\nfrom faker import Faker\n\nDB_URL = os.getenv(\"DATABASE_URL\")\nfake = Faker()\n\ndef get_conn():\n    return psycopg2.connect(DB_URL)\n","size_bytes":148},"etl/load_embeddings.py":{"content":"import os, openai, pinecone\nfrom utils import get_conn\n\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\npinecone.init(api_key=os.getenv(\"PINECONE_API_KEY\"), environment=\"us-east1-gcp\")\n\nindex_name = \"career-mirror\"\nif index_name not in pinecone.list_indexes():\n    pinecone.create_index(index_name, dimension=1536)\nindex = pinecone.Index(index_name)\n\ndef seed_embeddings():\n    conn = get_conn(); cur = conn.cursor()\n    cur.execute(\"SELECT id, profile_text FROM user_profiles\")\n    profiles = cur.fetchall()\n\n    for uid, text in profiles:\n        emb = openai.Embedding.create(\n            input=text, model=\"text-embedding-ada-002\"\n        )[\"data\"][0][\"embedding\"]\n        index.upsert([(str(uid), emb)])\n\n    print(\"✅ Embeddings synced\")\n    cur.close(); conn.close()\n\nif __name__ == \"__main__\":\n    seed_embeddings()\n","size_bytes":822},"etl/seed_achievements.py":{"content":"import random\nfrom datetime import datetime, timedelta\nfrom utils import get_conn\n\ndef seed_achievements():\n    achievements = [(\"First Steps\",\"Completed first analysis\",50),\n                    (\"Learner\",\"Took a course\",100)]\n    conn = get_conn(); cur = conn.cursor()\n    for t,d,p in achievements:\n        cur.execute(\"INSERT INTO achievements (title,description,points) VALUES (%s,%s,%s) ON CONFLICT DO NOTHING\",(t,d,p))\n    conn.commit(); cur.close(); conn.close()\n    print(\"✅ Achievements seeded\")\n\nif __name__ == \"__main__\":\n    seed_achievements()\n","size_bytes":560},"etl/seed_analytics.py":{"content":"import random, json\nfrom utils import get_conn\n\ndef seed_careers():\n    careers = [\"Data Scientist\",\"Frontend Developer\",\"Backend Engineer\",\n               \"UX Designer\",\"AI Researcher\"]\n    conn = get_conn(); cur = conn.cursor()\n\n    for c in careers:\n        cur.execute(\"\"\"INSERT INTO career_paths (title, description, avg_salary, lifestyle)\n                       VALUES (%s,%s,%s,%s) ON CONFLICT DO NOTHING\"\"\",\n                    (c, f\"A career as {c}\", random.randint(60000,180000),\n                     json.dumps({\"stress\":\"medium\",\"travel\":\"occasional\"})))\n    conn.commit(); cur.close(); conn.close()\n    print(\"✅ Careers seeded\")\n\nif __name__ == \"__main__\":\n    seed_careers()\n","size_bytes":691},"etl/seed_profiles.py":{"content":"from utils import get_conn, fake\n\ndef seed_users():\n    conn = get_conn()\n    cur = conn.cursor()\n\n    for _ in range(20):\n        name = fake.name()\n        email = fake.email()\n        headline = fake.job()\n        profile_text = fake.text(max_nb_chars=500)\n\n        cur.execute(\"INSERT INTO users (name, email) VALUES (%s,%s) RETURNING id\",\n                    (name, email))\n        user_id = cur.fetchone()[0]\n\n        cur.execute(\"INSERT INTO user_profiles (user_id, headline, profile_text) VALUES (%s,%s,%s)\",\n                    (user_id, headline, profile_text))\n\n    conn.commit(); cur.close(); conn.close()\n    print(\"✅ Users seeded\")\n\nif __name__ == \"__main__\":\n    seed_users()\n","size_bytes":693},"client/app/layout.tsx":{"content":"import \"./globals.css\";\nimport { ReactNode } from \"react\";\n\nexport default function RootLayout({ children }: { children: ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body className=\"bg-gray-50 font-sans\">{children}</body>\n    </html>\n  );\n}\n","size_bytes":250},"client/app/page.tsx":{"content":"export default function Home() {\n  return (\n    <main className=\"flex flex-col items-center justify-center h-screen\">\n      <h1 className=\"text-4xl font-bold text-blue-600\">Career Mirror</h1>\n      <p className=\"text-gray-600 mt-4\">\n        Discover your career Doppelgängers, skill gaps, and lifestyle fit.\n      </p>\n    </main>\n  );\n}\n","size_bytes":339},"server/routes/doppelganger.ts":{"content":"import { Router } from \"express\";\nimport { vectorSearchService } from \"../services/vectorSearch\";\n\nconst router = Router();\n\n/**\n * Career Doppelgänger API\n * Input: { profileText: string }\n * Output: top similar profiles (careers)\n */\nrouter.post(\"/\", async (req, res, next) => {\n  try {\n    const { profileText } = req.body;\n    if (!profileText) {\n      return res.status(400).json({ error: \"profileText is required\" });\n    }\n\n    const results = await vectorSearchService.findCareerDoppelgangers(profileText);\n    res.json({ doppelgangers: results });\n  } catch (err) {\n    next(err);\n  }\n});\n\nexport default router;\n","size_bytes":623},"server/routes/future-self.ts":{"content":"import { Router } from \"express\";\nimport { openAIService } from \"../services/openai\";\n\nconst router = Router();\n\n/**\n * Future-Self AI Narrative API\n * Input: { career: string, skills: string[] }\n * Output: GPT-generated narrative\n */\nrouter.post(\"/\", async (req, res, next) => {\n  try {\n    const { career, skills } = req.body;\n    if (!career) {\n      return res.status(400).json({ error: \"career is required\" });\n    }\n\n    const narrative = await openAIService.generateFutureSelf(career, skills || []);\n    res.json({ futureSelf: narrative });\n  } catch (err) {\n    next(err);\n  }\n});\n\nexport default router;\n","size_bytes":613},"server/routes/index.ts":{"content":"import { Express } from \"express\";\nimport { registerAchievementRoutes } from \"./achievements\";\nimport { registerCareerMapRoutes } from \"./career-map\";\nimport { registerCourseRoutes } from \"./courses\";\nimport { registerLifestyleRoutes } from \"./lifestyle\";\nimport doppelgangerRouter from \"./doppelganger\";\nimport futureSelfRouter from \"./future-self\";\n\nexport async function registerRoutes(app: Express) {\n  // Register all route modules\n  registerAchievementRoutes(app);\n  registerCareerMapRoutes(app);\n  registerCourseRoutes(app);\n  registerLifestyleRoutes(app);\n  \n  // Register router-based routes\n  app.use(\"/api/doppelganger\", doppelgangerRouter);\n  app.use(\"/api/future-self\", futureSelfRouter);\n  \n  return app;\n}\n","size_bytes":721},"server/routes/openai.ts":{"content":"import OpenAI from \"openai\";\n\nconst client = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY!,\n});\n\nexport async function generateFutureSelf(career: string, skills: string[]) {\n  const prompt = `\nImagine the user in 5 years working as a ${career}.\nThey currently have skills: ${skills.join(\", \") || \"none\"}.\nWrite a motivational narrative of their future self, including lifestyle, daily work, and career growth.\n`;\n\n  const completion = await client.chat.completions.create({\n    model: \"gpt-4o-mini\",\n    messages: [{ role: \"user\", content: prompt }],\n  });\n\n  return completion.choices[0].message?.content || \"\";\n}\n","size_bytes":620},"server/scripts/seed-achievements.ts":{"content":"import { db } from \"../db\";\nimport { achievements } from \"@shared/schema\";\n\nconst seedAchievements = [\n  {\n    code: \"profile_complete\",\n    name: \"Profile Pioneer\",\n    description: \"Complete your profile with all required information\",\n    icon: \"fas fa-user-circle\",\n    criteriaJson: {\n      type: \"profile_completion\",\n      threshold: 100\n    },\n  },\n  {\n    code: \"profile_first_skill\",\n    name: \"Skill Seeker\", \n    description: \"Add your first skill to your profile\",\n    icon: \"fas fa-star\",\n    criteriaJson: {\n      type: \"skill_count\",\n      threshold: 1\n    },\n  },\n  {\n    code: \"profile_skill_master\",\n    name: \"Skill Master\",\n    description: \"Add 10 or more skills to your profile\",\n    icon: \"fas fa-medal\",\n    criteriaJson: {\n      type: \"skill_count\",\n      threshold: 10\n    },\n  },\n  {\n    code: \"learning_first_course\",\n    name: \"Learning Beginner\",\n    description: \"Enroll in your first course\",\n    icon: \"fas fa-graduation-cap\",\n    criteriaJson: {\n      type: \"course_enrollment\",\n      threshold: 1\n    },\n  },\n  {\n    code: \"learning_course_completed\",\n    name: \"Course Finisher\",\n    description: \"Complete your first course\",\n    icon: \"fas fa-certificate\",\n    criteriaJson: {\n      type: \"course_completion\",\n      threshold: 1\n    },\n  },\n  {\n    code: \"learning_streak\",\n    name: \"Learning Streak\",\n    description: \"Complete courses 7 days in a row\",\n    icon: \"fas fa-fire\",\n    criteriaJson: {\n      type: \"learning_streak\",\n      threshold: 7\n    },\n  },\n  {\n    code: \"career_path_set\",\n    name: \"Path Finder\",\n    description: \"Set your first career path goal\",\n    icon: \"fas fa-route\",\n    criteriaJson: {\n      type: \"career_path\",\n      threshold: 1\n    },\n  },\n  {\n    code: \"career_skill_gap_analyzed\",\n    name: \"Gap Analyzer\",\n    description: \"Complete your first skill gap analysis\",\n    icon: \"fas fa-chart-bar\",\n    criteriaJson: {\n      type: \"skill_gap_analysis\",\n      threshold: 1\n    },\n  },\n  {\n    code: \"career_doppelganger_found\",\n    name: \"Mirror Mirror\",\n    description: \"Find your first career doppelgänger\",\n    icon: \"fas fa-search\",\n    criteriaJson: {\n      type: \"doppelganger_found\",\n      threshold: 1\n    },\n  },\n  {\n    code: \"social_ai_chat_started\",\n    name: \"AI Conversationalist\",\n    description: \"Start your first AI conversation\",\n    icon: \"fas fa-robot\",\n    criteriaJson: {\n      type: \"ai_chat_count\",\n      threshold: 1\n    },\n  },\n  {\n    code: \"social_ai_chat_veteran\",\n    name: \"AI Veteran\",\n    description: \"Have 50 conversations with AI\",\n    icon: \"fas fa-comments\",\n    criteriaJson: {\n      type: \"ai_chat_count\",\n      threshold: 50\n    },\n  },\n];\n\nasync function seedAchievementsData() {\n  try {\n    console.log(\"Seeding achievements...\");\n    \n    // Insert achievements if they don't exist\n    for (const achievement of seedAchievements) {\n      await db\n        .insert(achievements)\n        .values(achievement)\n        .onConflictDoNothing(); // Don't insert if code already exists\n    }\n    \n    console.log(`Seeded ${seedAchievements.length} achievements successfully`);\n  } catch (error) {\n    console.error(\"Error seeding achievements:\", error);\n    throw error;\n  }\n}\n\n// Run if called directly\nseedAchievementsData()\n  .then(() => {\n    console.log(\"Achievement seeding completed\");\n    process.exit(0);\n  })\n  .catch((error) => {\n    console.error(\"Achievement seeding failed:\", error);\n    process.exit(1);\n  });\n\nexport { seedAchievementsData };","size_bytes":3470},"client/app/dashboard/page.tsx":{"content":"\"use client\";\nimport Link from \"next/link\";\n\nexport default function Dashboard() {\n  return (\n    <main className=\"p-8\">\n      <h1 className=\"text-3xl font-bold\">Career Dashboard</h1>\n      <ul className=\"mt-4 space-y-2\">\n        <li><Link href=\"/dashboard/doppelgangers\">Doppelgängers</Link></li>\n        <li><Link href=\"/dashboard/career-map\">Career Map</Link></li>\n        <li><Link href=\"/dashboard/skill-gaps\">Skill Gaps</Link></li>\n        <li><Link href=\"/dashboard/lifestyle\">Lifestyle Simulation</Link></li>\n        <li><Link href=\"/dashboard/achievements\">Achievements</Link></li>\n      </ul>\n    </main>\n  );\n}\n","size_bytes":623},"client/app/dashboard/achievements/page.tsx":{"content":"\"use client\";\nimport { useEffect, useState } from \"react\";\n\nexport default function Achievements() {\n  const [data, setData] = useState<any>(null);\n\n  useEffect(() => {\n    fetch(\"http://localhost:5000/api/achievements\")\n      .then((res) => res.json())\n      .then(setData);\n  }, []);\n\n  return (\n    <div className=\"p-6\">\n      <h2 className=\"text-xl font-semibold\">Achievements</h2>\n      {data?.achievements?.map((a: any, i: number) => (\n        <div key={i} className=\"mt-3 p-4 bg-white rounded shadow\">\n          <h3 className=\"font-bold\">{a.title}</h3>\n          <p>Points: {a.points}</p>\n        </div>\n      ))}\n    </div>\n  );\n}\n","size_bytes":639},"client/app/dashboard/career-map/page.tsx":{"content":"\"use client\";\nimport { useEffect, useState } from \"react\";\n\nexport default function CareerMap() {\n  const [data, setData] = useState<any>(null);\n\n  useEffect(() => {\n    fetch(\"http://localhost:5000/api/career-map\")\n      .then((res) => res.json())\n      .then(setData);\n  }, []);\n\n  return (\n    <div className=\"p-6\">\n      <h2 className=\"text-xl font-semibold\">Career Map</h2>\n      {data?.careerPaths?.map((c: any, i: number) => (\n        <div key={i} className=\"mt-3 p-4 bg-white rounded shadow\">\n          <h3 className=\"font-bold\">{c.title}</h3>\n          <p>Salary: ${c.avg_salary}</p>\n          <p>Lifestyle: {c.lifestyle}</p>\n        </div>\n      ))}\n    </div>\n  );\n}\n","size_bytes":678},"client/app/dashboard/doppelgangers/page.tsx":{"content":"\"use client\";\nimport { useState } from \"react\";\n\nexport default function Doppelgangers() {\n  const [input, setInput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [results, setResults] = useState<any[]>([]);\n\n  async function handleSearch(e: React.FormEvent) {\n    e.preventDefault();\n    setLoading(true);\n\n    const res = await fetch(\"http://localhost:5000/api/doppelganger\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ profileText: input }),\n    });\n\n    const data = await res.json();\n    setResults(data.doppelgangers || []);\n    setLoading(false);\n  }\n\n  return (\n    <div className=\"p-6\">\n      <h2 className=\"text-2xl font-bold\">Career Doppelgängers</h2>\n\n      <form onSubmit={handleSearch} className=\"mt-4 flex space-x-2\">\n        <textarea\n          className=\"border rounded p-2 w-full\"\n          placeholder=\"Paste your CV summary, LinkedIn profile, or skills...\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n        />\n        <button\n          type=\"submit\"\n          disabled={loading}\n          className=\"px-4 py-2 bg-blue-600 text-white rounded\"\n        >\n          {loading ? \"Searching...\" : \"Find Doppelgängers\"}\n        </button>\n      </form>\n\n      <div className=\"mt-6 space-y-4\">\n        {results.map((r, i) => (\n          <div\n            key={i}\n            className=\"p-4 bg-white rounded shadow hover:shadow-md transition\"\n          >\n            <p className=\"text-gray-800\">\n              <strong>Career:</strong> {r.career || \"Unknown\"}\n            </p>\n            <p className=\"text-sm text-gray-600\">\n              <strong>Similarity:</strong>{\" \"}\n              {(r.score * 100).toFixed(1)}%\n            </p>\n            {r.skills?.length > 0 && (\n              <p className=\"text-sm text-gray-600\">\n                <strong>Skills:</strong> {r.skills.join(\", \")}\n              </p>\n            )}\n            {r.profile && (\n              <p className=\"text-sm mt-2 italic\">\"{r.profile}\"</p>\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":2130},"client/app/dashboard/lifestyle/page.tsx":{"content":"\"use client\";\nimport { useEffect, useState } from \"react\";\n\nexport default function Lifestyle() {\n  const [data, setData] = useState<any>(null);\n\n  useEffect(() => {\n    fetch(\"http://localhost:5000/api/lifestyle/simulate\")\n      .then((res) => res.json())\n      .then(setData);\n  }, []);\n\n  return (\n    <div className=\"p-6\">\n      <h2 className=\"text-xl font-semibold\">Lifestyle Simulation</h2>\n      {data && (\n        <div className=\"mt-3 p-4 bg-white rounded shadow\">\n          <p>Salary: ${data.salary}</p>\n          <p>Work-Life Balance: {data.work_life_balance}</p>\n          <p>Stress: {data.stress}</p>\n          <p>Travel: {data.travel}</p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":694}},"version":1}